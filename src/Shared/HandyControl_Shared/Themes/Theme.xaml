<!--
    This code was generated by a tool.

    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:langs="clr-namespace:HandyControl.Properties.Langs" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:converter="clr-namespace:HandyControl.Tools.Converter" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:themes="clr-namespace:HandyControl.Themes" xmlns:interactivity="clr-namespace:HandyControl.Interactivity" xmlns:hc="clr-namespace:HandyControl.Controls" xmlns:tools="clr-namespace:HandyControl.Tools" xmlns:shapes="clr-namespace:HandyControl.Expression.Shapes" xmlns:ex="clr-namespace:HandyControl.Tools.Extension">
	<langs:LangProvider x:Key="Langs" />
	<converter:Boolean2BooleanReConverter x:Key="Boolean2BooleanReConverter" />
	<converter:Boolean2VisibilityReConverter x:Key="Boolean2VisibilityReConverter" />
	<converter:BooleanArr2VisibilityConverter x:Key="BooleanArr2VisibilityConverter" />
	<converter:Long2FileSizeConverter x:Key="Long2FileSizeConverter" />
	<converter:String2VisibilityConverter x:Key="String2VisibilityConverter" />
	<converter:String2VisibilityReConverter x:Key="String2VisibilityReConverter" />
	<BooleanToVisibilityConverter x:Key="Boolean2VisibilityConverter" />
	<converter:TreeViewItemMarginConverter x:Key="TreeViewItemMarginConverter" />
	<converter:Color2HexStringConverter x:Key="Color2HexStringConverter" />
	<converter:Object2BooleanConverter x:Key="Object2BooleanConverter" />
	<converter:Boolean2StringConverter x:Key="Boolean2StringConverter" />
	<converter:Int2StringConverter x:Key="Int2StringConverter" />
	<converter:BorderClipConverter x:Key="BorderClipConverter" />
	<converter:BorderCircularClipConverter x:Key="BorderCircularClipConverter" />
	<converter:BorderCircularConverter x:Key="BorderCircularConverter" />
	<converter:Object2VisibilityConverter x:Key="Object2VisibilityConverter" />
	<converter:Object2VisibilityReConverter x:Key="Object2VisibilityReConverter" />
	<converter:Number2PercentageConverter x:Key="Number2PercentageConverter" />
	<converter:RectangleCircularConverter x:Key="RectangleCircularConverter" />
	<converter:ThicknessSplitConverter x:Key="ThicknessSplitConverter" />
	<converter:CornerRadiusSplitConverter x:Key="CornerRadiusSplitConverter" />
	<MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
	<converter:Double2GridLengthConverter x:Key="Double2GridLengthConverter" />
	<converter:DoubleMinConverter x:Key="DoubleMinConverter" />
	<converter:Object2StringConverter x:Key="Object2StringConverter" />
	<Color x:Key="EffectShadowColor">#88000000</Color>
	<system:Double x:Key="LargeFontSize">24</system:Double>
	<system:Double x:Key="HeadFontSize">20</system:Double>
	<system:Double x:Key="SubHeadFontSize">16</system:Double>
	<system:Double x:Key="TextFontSize">12</system:Double>
	<Geometry o:Freeze="True" x:Key="CalendarGeometry">M377.897477 116.291025l265.298718 0 0 47.459125-265.298718 0 0-47.459125ZM888.317416 116.291025 748.229288 116.291025l0 47.459125 123.54866 0c18.167626 0 32.894732 14.727106 32.894732 32.894732l0 92.92987L115.42936 289.574752l0-92.92987c0-18.167626 14.727106-32.894732 32.894732-32.894732l123.54866 0 0-47.459125L131.776437 116.291025c-35.244356 0-63.814389 28.571056-63.814389 63.815412l0.004093 713.966329c0 35.243333 28.571056 63.814389 63.814389 63.814389l756.540979 0c35.244356 0 63.814389-28.571056 63.814389-63.815412l-0.004093-713.966329C952.131805 144.861058 923.560749 116.291025 888.317416 116.291025zM904.67268 337.033877l0 540.498398c0 18.167626-14.727106 32.894732-32.894732 32.894732L148.324092 910.427007c-18.167626 0-32.894732-14.727106-32.894732-32.894732L115.42936 337.033877 904.67268 337.033877zM300.659736 64.801927l47.459125 0 0 170.241292-47.459125 0 0-170.241292ZM672.97481 64.801927l47.450938 0 0 170.241292-47.450938 0 0-170.241292ZM358.384138 547.939214l0 231.021432 52.863464 0L411.247602 459.226591l-34.580198 0-2.651514 3.804835c-18.000819 25.896006-41.448959 48.758786-69.681285 67.955908l-3.886703 2.643327 0 53.742526 13.441772-8.069156C330.690097 569.215794 345.588103 558.712075 358.384138 547.939214zM618.031888 726.552576c-10.287791 6.395971-24.435678 8.069156-42.059902 4.948946-16.094309-2.842881-27.898712-18.373321-35.082666-46.159464l-2.261615-8.753781-48.312603 13.424375 1.68956 8.129534c6.270098 30.168514 18.347737 52.052967 35.884976 65.017855 17.120734 12.705979 35.542152 19.777364 54.731087 21.043255 3.358652 0.225138 6.655903 0.337707 9.897892 0.337707 14.859119 0 28.430857-2.374184 40.452211-7.072408 14.417029-5.641758 26.88866-13.338413 37.076162-22.86278 10.365566-9.723922 18.230051-22.143362 23.378552-36.920612 4.918246-14.170401 7.739636-28.296797 8.385373-42.025108 0.60685-13.658723-0.667228-26.650218-3.791531-38.619382l-0.008187-0.017397c-3.111-11.777796-8.133628-23.738773-14.946104-35.551363-7.353831-12.679372-19.028268-22.750211-34.710165-29.952586-15.037183-6.872854-30.927843-10.685876-47.24729-11.32752-11.414505-0.415482-23.487027 1.386646-36.04462 5.434017 3.813022-14.568486 7.648557-31.884681 11.465673-51.775637l113.87693 0 0-49.357449L535.645647 464.492778l-1.495122 7.028404c-24.621928 115.77116-31.589954 145.497585-33.102473 150.039235l-3.432334 10.338958 45.829943 5.391036 3.054716-4.20292c8.146931-11.214951 18.247448-18.139996 30.879746-21.164011 13.004799-3.137607 24.743707-3.180588 34.879018-0.129966 9.857981 2.95545 17.822756 8.771178 24.327202 17.758284 6.512633 9.03111 10.084143 20.392401 10.617311 33.757421 0.519864 13.849067-1.603598 26.442477-6.314102 37.440476C636.315153 711.429431 628.843637 719.871089 618.031888 726.552576z</Geometry>
	<Geometry o:Freeze="True" x:Key="DeleteGeometry">M512 620.544l253.3376 253.3376a76.6976 76.6976 0 1 0 108.544-108.544L620.6464 512l253.2352-253.3376a76.6976 76.6976 0 1 0-108.544-108.544L512 403.3536 258.6624 150.1184a76.6976 76.6976 0 1 0-108.544 108.544L403.3536 512 150.1184 765.3376a76.6976 76.6976 0 1 0 108.544 108.544L512 620.6464z</Geometry>
	<Geometry o:Freeze="True" x:Key="DeleteFillCircleGeometry">M7.4038057,6.4038057 C7.1478834,6.4038057 6.8919611,6.5014372 6.6966991,6.6966991 6.3061748,7.0872235 6.3061748,7.7203884 6.6966991,8.1109123 L10.585787,12 6.6966991,15.889088 C6.3061748,16.279612 6.3061748,16.912777 6.6966991,17.303301 7.0872235,17.693825 7.7203879,17.693825 8.1109123,17.303301 L12,13.414213 15.889088,17.303301 C16.279612,17.693825 16.912777,17.693825 17.303301,17.303301 17.693825,16.912777 17.693825,16.279612 17.303301,15.889088 L13.414213,12 17.303301,8.1109123 C17.693825,7.7203884 17.693825,7.0872235 17.303301,6.6966991 16.912777,6.3061748 16.279612,6.3061748 15.889088,6.6966991 L12,10.585787 8.1109123,6.6966991 C7.9156504,6.5014372 7.6597281,6.4038057 7.4038057,6.4038057 z M12,0 C18.627417,0 24,5.3725829 24,12 24,18.627417 18.627417,24 12,24 5.3725829,24 0,18.627417 0,12 0,5.3725829 5.3725829,0 12,0 z</Geometry>
	<Geometry o:Freeze="True" x:Key="CloseGeometry">M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z</Geometry>
	<Geometry o:Freeze="True" x:Key="DownGeometry">M512 801.6896L5.12 282.0096l58.1632-59.5968L512 682.3936l448.7168-460.0832 58.1632 59.5968-506.88 519.7824z</Geometry>
	<Geometry o:Freeze="True" x:Key="UpGeometry">M50.000001,0 L100,51.262779 94.262627,57.141584 50.000001,11.767713 5.7373757,57.151686 0,51.27288 z</Geometry>
	<Geometry o:Freeze="True" x:Key="ClockGeometry">M498.506684 256.571517 425.359734 256.571517 425.359734 622.190635 720.166063 622.190635 720.166063 549.725206 498.506684 549.725206ZM512.714268 80.162738c-245.740844 0-445.181175 197.577914-445.181175 441.024505s199.439308 441.024505 445.181175 441.024505c245.738797 0 445.178105-197.577914 445.178105-441.024505S758.453065 80.162738 512.714268 80.162738zM512.714268 874.005824c-195.880249 0-356.145349-158.768003-356.145349-352.818581s160.2651-352.821651 356.145349-352.821651c195.877179 0 356.14228 158.77005 356.14228 352.821651S708.591447 874.005824 512.714268 874.005824z</Geometry>
	<Geometry o:Freeze="True" x:Key="LeftGeometry">M394.24 512L683.52 248.32c10.24-10.24 10.24-25.6 0-35.84-10.24-10.24-25.6-10.24-35.84 0l-307.2 279.04c-5.12 5.12-7.68 12.8-7.68 20.48 0 7.68 2.56 15.36 7.68 20.48l307.2 279.04c10.24 10.24 25.6 10.24 35.84 0 10.24-10.24 10.24-25.6 0-35.84L394.24 512z</Geometry>
	<Geometry o:Freeze="True" x:Key="RightGeometry">M4.1666641,0 C5.2083321,0 6.25,0.41666794 7.0833321,1.25 L57.083331,46.666664 C57.916664,47.499998 58.33333,48.749998 58.333329,49.999998 58.33333,51.249997 57.916664,52.499997 57.083331,53.333331 L7.0833321,98.749996 C5.4166641,100.41666 2.9166641,100.41666 1.2499962,98.749996 -0.41666794,97.083328 -0.41666794,94.583328 1.2499962,92.916664 L48.333331,49.999998 1.2499962,7.0833321 C-0.41666794,5.4166641 -0.41666794,2.9166641 1.2499962,1.25 2.0833282,0.41666794 3.1249962,0 4.1666641,0 z</Geometry>
	<Geometry o:Freeze="True" x:Key="RotateLeftGeometry">M165.238899 508.178506C164.450369 456.442676 171.767779 404.485842 187.244542 353.863631 266.138632 95.812692 533.436225-51.353028 784.380224 25.368251 1035.324219 102.08953 1174.62994 373.566359 1095.735851 631.617298 1016.84176 889.66824 749.544168 1036.833959 498.600172 960.11268 424.134741 937.346313 357.837833 896.870788 303.973868 842.276436 291.310328 829.441176 291.396506 808.495802 304.166356 795.493625 316.936205 782.491452 337.554042 782.356136 350.217582 795.191397 396.640587 842.243889 453.73137 877.098901 517.975091 896.740177 734.436966 962.919213 965.320335 835.802028 1033.557737 612.607541 1101.795139 389.413057 981.467179 154.919792 765.005305 88.740755 548.543428 22.561718 317.660056 149.678904 249.422655 372.873388 235.597198 418.094418 229.294871 464.461039 230.4403 510.559881L311.240978 429.759202C323.584094 417.416085 343.892513 417.712357 356.601099 430.420946 369.309686 443.129535 369.605959 463.437952 357.262842 475.781068L230.778782 602.265128C229.273826 605.769679 227.098877 609.041396 224.251145 611.889128 211.908029 624.232245 191.59961 623.935974 178.891024 611.227385L40.825428 473.16179C28.11684 460.453206 27.820569 440.144784 40.163685 427.801668 52.506801 415.458551 72.815218 415.754827 85.523806 428.463411L165.238899 508.178506Z</Geometry>
	<Geometry o:Freeze="True" x:Key="RotateRightGeometry">M13.1117823382705,0.00108644926083379C18.7165758868546,0.0742913923738762 23.9197352191299,3.84162509632329 25.6893389483779,9.62980814885544 26.1165926715226,11.0273168346189 26.3185999652236,12.461670228202 26.296833302626,13.8899238456496L28.4974711200089,11.6892569876356C28.8483088275283,11.3384168617557 29.4089472552627,11.330238049977 29.7496950885147,11.6709881771838 30.0904429217666,12.0117402117628 30.0822642108291,12.572387459387 29.7314265033096,12.923229492639L25.9199488421768,16.7347560556155C25.5691111346572,17.0855980888674 25.0084688922257,17.0937769006462 24.6677210589736,16.7530248660672 24.5891077777236,16.674408708165 24.5290644427627,16.5840870073788 24.4875185748428,16.4873374624474L20.9957621356339,12.9955379708416C20.6550143023818,12.6547878436347 20.6631930133193,12.0941405960106 21.0140307208389,11.7432985627585 21.3648684283584,11.3924565295065 21.9255068560928,11.3842777177278 22.2662546893447,11.7250297523068L24.4968645831436,13.9556652415401C24.5284846087783,12.6830303030582 24.3545000811904,11.4030042974954 23.9728319903702,10.1546044295501 22.0890505572647,3.99295504901009 15.7152140399307,0.483677352708723 9.73950221742095,2.3106585349176 3.76379420960845,4.13763876344051 0.441986348280352,10.6112083411418 2.32576778138575,16.7728577216819 4.20954921449125,22.9345051948497 10.5833819171279,26.4437838448372 16.5590937396377,24.6168036163144 18.3326227923721,24.0745720467974 19.9086878558486,23.1123447593618 21.1902544757217,21.8133823630949 21.5398485919327,21.4590441166922 22.1090319415421,21.4627806587338 22.4615595599502,21.8217271162507 22.8140871783584,22.1806735737676 22.8164675494522,22.7589048852417 22.4668734332412,23.1132431316444 20.9798891803115,24.6204085496776 19.1496775409072,25.7378005615073 17.0939638873428,26.3663063881084 10.1663286944717,28.484321088751 2.78723170960845,24.4215726325395 0.609260823377952,17.2976520950044 -1.56871387754975,10.1737353722136 2.27700069154205,2.6791733248245 9.20463588441315,0.561156716809679 10.5035670062393,0.164028483596132 11.8183710833877,-0.0158071458708005 13.1117823382705,0.00108644926083379z</Geometry>
	<Geometry o:Freeze="True" x:Key="EnlargeGeometry">M750.3 198.7C598 46.4 351.1 46.4 198.7 198.7s-152.3 399.2 0 551.5C345.1 896.6 578.8 902.3 732 767.3l172.1 172.1 35.4-35.4-172.1-171.9c135-153.2 129.3-387-17.1-533.4z m39.3 403.8c-17.1 42.1-42.2 80-74.7 112.4-32.5 32.5-70.3 57.6-112.4 74.7-40.7 16.5-83.8 24.9-128 24.9s-87.2-8.4-128-24.9c-42.1-17.1-80-42.2-112.4-74.7s-57.6-70.3-74.7-112.4c-16.5-40.7-24.9-83.8-24.9-128s8.4-87.2 24.9-128c17.1-42.1 42.2-80 74.7-112.4s70.3-57.6 112.4-74.7c40.7-16.5 83.8-24.9 128-24.9s87.2 8.4 128 24.9c42.1 17.1 80 42.2 112.4 74.7 32.5 32.5 57.6 70.3 74.7 112.4 16.5 40.7 24.9 83.8 24.9 128s-8.4 87.3-24.9 128zM671 502H496v175h-50V502H271v-50h175V277h50v175h175v50z</Geometry>
	<Geometry o:Freeze="True" x:Key="ReduceGeometry">M750.3 198.7C598 46.4 351.1 46.4 198.7 198.7s-152.3 399.2 0 551.5C345.1 896.6 578.8 902.3 732 767.3l172.1 172.1 35.4-35.4-172.1-171.9c135-153.2 129.3-387-17.1-533.4z m39.3 403.8c-17.1 42.1-42.2 80-74.7 112.4-32.5 32.5-70.3 57.6-112.4 74.7-40.7 16.5-83.8 24.9-128 24.9s-87.2-8.4-128-24.9c-42.1-17.1-80-42.2-112.4-74.7s-57.6-70.3-74.7-112.4c-16.5-40.7-24.9-83.8-24.9-128s8.4-87.2 24.9-128c17.1-42.1 42.2-80 74.7-112.4s70.3-57.6 112.4-74.7c40.7-16.5 83.8-24.9 128-24.9s87.2 8.4 128 24.9c42.1 17.1 80 42.2 112.4 74.7 32.5 32.5 57.6 70.3 74.7 112.4 16.5 40.7 24.9 83.8 24.9 128s-8.4 87.3-24.9 128zM671 502H271v-50h400v50z</Geometry>
	<Geometry o:Freeze="True" x:Key="DownloadGeometry">M868.100096 742.600704l-0.049152 0L216.246272 742.600704l-0.049152 0c-13.98784 0-25.327616 11.33568-25.327616 25.352192 0 13.993984 11.360256 25.327616 25.327616 25.327616l0.049152 0 651.804672 0 0.049152 0c13.996032 0 25.33376-11.333632 25.33376-25.327616C893.431808 753.936384 882.096128 742.600704 868.100096 742.600704L868.100096 742.600704 868.100096 742.600704M523.15136 688.433152c4.728832 4.757504 11.237376 7.733248 18.47296 7.733248l0 0 0 0c7.231488 0 13.740032-2.951168 18.42176-7.757824l314.836992-314.83904c4.732928-4.704256 7.714816-11.214848 7.7312-18.395136 0-14.342144-11.712512-25.9584-25.972736-25.9584-7.213056-0.02048-13.694976 2.930688-18.376704 7.636992L567.578624 607.51872 567.578624 117.52448c-0.024576-0.026624-0.024576-0.026624-0.024576-0.0512 0.024576-14.344192-11.59168-25.980928-25.901056-25.980928-14.348288 0-25.960448 11.634688-25.960448 25.980928 0 0 0 0.024576 0.024576 0.0512l0 489.967616L245.055488 336.826368c-4.683776-4.704256-11.2128-7.6288-18.374656-7.60832-14.342144-0.02048-25.954304 11.614208-26.005504 25.9072 0 7.20896 2.951168 13.768704 7.684096 18.423808L523.15136 688.433152 523.15136 688.433152 523.15136 688.433152M523.15136 688.433152 523.15136 688.433152z</Geometry>
	<Geometry o:Freeze="True" x:Key="SaveGeometry">M608 320C625.664 320 640 305.696 640 288L640 160C640 142.304 625.664 128 608 128 590.336 128 576 142.304 576 160L576 288C576 305.696 590.336 320 608 320L608 320ZM960 896C960 931.328 931.328 960 896 960L128 960C92.672 960 64 931.328 64 896L64 128C64 92.672 92.672 64 128 64L192 64 192 384C192 419.328 220.672 448 256 448L768 448C803.328 448 832 419.328 832 384L832 64 896 64C931.328 64 960 92.672 960 128L960 896 960 896ZM256 64 768 64 768 352C768 369.696 753.664 384 736 384L288 384C270.336 384 256 369.696 256 352L256 64 256 64ZM896 0 128 0C57.312 0 0 57.312 0 128L0 896C0 966.688 57.312 1024 128 1024L896 1024C966.688 1024 1024 966.688 1024 896L1024 128C1024 57.312 966.688 0 896 0L896 0Z</Geometry>
	<Geometry o:Freeze="True" x:Key="WindowsGeometry">M426.276571 574.829714l0 372.004571-389.705143-53.686857 0-318.317714 389.705143 0zM426.276571 150.308571l0 376.539429-389.705143 0 0-322.852571zM987.428571 574.829714l0 449.170286-518.290286-71.460571 0-377.709714 518.290286 0zM987.428571 73.142857l0 453.705143-518.290286 0 0-382.317714z</Geometry>
	<Geometry o:Freeze="True" x:Key="FullScreenGeometry">M942 82v320h-50V167.4l-274 274-35.4-35.4 274-274H622V82h320zM406 582.6l-274 274V622H82v320h320v-50H167.4l274-274-35.4-35.4zM132 132h302V82H82v352h50V132z m760 760H590v50h352V590h-50v302z</Geometry>
	<Geometry o:Freeze="True" x:Key="FullScreenReturnGeometry">M94.186081,59.07 L100,59.07 100,100 59.07,100 59.07,94.186081 94.186081,94.186081 z M4.5814285,58.208999 L41.791,58.208999 41.791,95.418571 35.977005,95.418571 35.977005,68.139304 4.1163101,100 0,95.88369 31.860695,64.022995 4.5814285,64.022995 z M95.88369,0 L100,4.1163101 68.139304,35.977005 95.418571,35.977005 95.418571,41.791 58.208999,41.791 58.208999,4.5814285 64.022995,4.5814285 64.022995,31.860695 z M0,0 L40.929998,0 40.929998,5.8139191 5.8139191,5.8139191 5.8139191,40.929998 0,40.929998 z</Geometry>
	<Geometry o:Freeze="True" x:Key="SearchGeometry">M716.6003 213.800623c-138.851102-138.915088-364.020238-138.915088-502.935326 0s-138.915088 364.084225 0 502.935326a355.573996 355.573996 0 0 0 502.935326 0 355.573996 355.573996 0 0 0 0-502.935326z m-580.359212 580.359212a465.183184 465.183184 0 1 1 657.783099 0 465.183184 465.183184 0 0 1-657.783099 0z m868.939152 211.156054a63.474789 63.474789 0 0 1-89.837303 0l-89.773316-89.837303a63.410803 63.410803 0 1 1 89.773316-89.773316l89.837303 89.773316a63.346816 63.346816 0 0 1 0 89.837303z</Geometry>
	<Geometry o:Freeze="True" x:Key="UpDownGeometry">M454.464 143.68l-253.44 253.44c-12.032 12.032-12.032 31.36 0 43.392 11.968 11.968 31.36 11.968 43.328 0l237.376-237.376 237.376 237.376c11.968 11.968 31.36 11.968 43.328 0 12.032-12.032 12.032-31.36 0-43.392l-253.44-253.44C491.264 126.016 478.016 124.032 454.464 143.68zM507.968 947.648l252.48-253.376c11.968-11.968 11.968-31.36 0-43.392-11.968-11.968-31.296-11.968-43.264 0l-236.48 237.376L244.16 650.88c-11.968-11.968-31.296-11.968-43.264 0-11.968 12.032-11.968 31.424 0 43.392l252.48 253.376C465.984 960 491.136 964.48 507.968 947.648z</Geometry>
	<Geometry o:Freeze="True" x:Key="WindowMinGeometry">M0,4 L10,4 L10,5 L0,5 z</Geometry>
	<Geometry o:Freeze="True" x:Key="WindowRestoreGeometry">M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z</Geometry>
	<Geometry o:Freeze="True" x:Key="WindowMaxGeometry">M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z</Geometry>
	<Geometry o:Freeze="True" x:Key="CheckedGeometry">M 0,2 3,5 8,0</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignLeftGeometry">M0,8 L4,8 4,10 0,10 z M0,4 L8,4 8,6 0,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignRightGeometry">M8,8 L12,8 12,10 8,10 z M4,4 L12,4 12,6 4,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignHCenterGeometry">M4,8 L8,8 8,10 4,10 z M2,4 L10,4 10,6 2,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignHStretchGeometry">M0,8 L12,8 12,10 0,10 z M0,4 L12,4 12,6 0,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignTopGeometry">M8,0 L10,0 10,4 8,4 z M4,0 L6,0 6,8 4,8 z M0,0 L2,0 2,12 0,12 z</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignBottomGeometry">M8,8 L10,8 10,12 8,12 z M4,4 L6,4 6,12 4,12 z M0,0 L2,0 2,12 0,12 z</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignVCenterGeometry">M8,4 L10,4 10,8 8,8 z M4,2 L6,2 6,10 4,10 z M0,0 L2,0 2,12 0,12 z</Geometry>
	<Geometry o:Freeze="True" x:Key="AlignVStretchGeometry">M8,0 L10,0 10,12 8,12 z M4,0 L6,0 6,12 4,12 z M0,0 L2,0 2,12 0,12 z</Geometry>
	<Geometry o:Freeze="True" x:Key="PageModeGeometry">M1.0000002,12 L1.0000002,13 11,13 11,12 z M1.0000002,10 L1.0000002,11 11,11 11,10 z M1.0000002,8 L1.0000002,9 11,9 11,8 z M1.0000002,6 L1.0000002,7 11,7 11,6 z M1.0000002,4 L1.0000002,5 11,5 11,4 z M1.0000002,2 L1.0000002,3 11,3 11,2 z M0,0 L12,0 12,14 0,14 z</Geometry>
	<Geometry o:Freeze="True" x:Key="TwoPageModeGeometry">M8.99999988079071,12L8.99999988079071,13 13,13 13,12z M1,12L1,13 5,13 5,12z M9.00000011920929,10L9.00000011920929,11 13,11 13,10z M1,10L1,11 5,11 5,10z M9.00000011920929,8L9.00000011920929,9 13,9 13,8z M1,8L1,9 5,9 5,8z M9.00000011920929,6L9.00000011920929,7 13,7 13,6z M1,6L1,7 5,7 5,6z M9.00000011920929,4L9.00000011920929,5 13,5 13,4z M1,4L1,5 5,5 5,4z M8.99999988079071,2L8.99999988079071,3 13,3 13,2z M1,2L1,3 5,3 5,2z M7.99999994039536,0L14,0 14,14 7.99999994039536,14z M0,0L6,0 6,14 0,14z</Geometry>
	<Geometry o:Freeze="True" x:Key="ScrollModeGeometry">M1,12L1,13 8,13 8,12z M1,10L1,11 8,11 8,10z M1,8L1,9 8,9 8,8z M1,6L1,7 8,7 8,6z M11.0000002384186,5L11.0000002384186,9 13,9 13,5z M1,4L1,5 8,5 8,4z M1,2L1,3 8,3 8,2z M10.0000000298023,0L14,0 14,14 10.0000000298023,14z M0,0L9.00000011920929,0 9.00000011920929,14 0,14z</Geometry>
	<Geometry o:Freeze="True" x:Key="EyeOpenGeometry">M928 406.4c-100.8-137.6-249.6-224-416-224s-315.2 86.4-416 224c-44.8 60.8-44.8 150.4 0 211.2 102.4 137.6 251.2 224 416 224 166.4 0 315.2-86.4 416-224 46.4-60.8 46.4-150.4 0-211.2zM512 721.6c-115.2 0-209.6-94.4-209.6-209.6 0-115.2 94.4-209.6 209.6-209.6 115.2 0 209.6 94.4 209.6 209.6 1.6 115.2-92.8 209.6-209.6 209.6z m0-360c-83.2 0-150.4 67.2-150.4 150.4s67.2 150.4 150.4 150.4 150.4-67.2 150.4-150.4-67.2-150.4-150.4-150.4z m0 0</Geometry>
	<Geometry o:Freeze="True" x:Key="EyeCloseGeometry">M950.4 361.6c8-20.8 0-43.2-19.2-54.4-9.6-4.8-20.8-6.4-32-3.2s-19.2 11.2-24 22.4c-56 132.8-208 228.8-361.6 228.8-155.2 0-307.2-97.6-363.2-232-4.8-11.2-12.8-19.2-24-24-9.6-4.8-20.8-3.2-32 0-20.8 9.6-30.4 35.2-20.8 56 25.6 60.8 67.2 118.4 123.2 164.8l-67.2 70.4c-14.4 16-14.4 40 0 57.6 8 8 17.6 14.4 28.8 14.4s22.4-3.2 30.4-11.2l76.8-81.6c35.2 20.8 73.6 38.4 113.6 49.6l-28.8 83.2c-8 22.4 3.2 46.4 24 54.4 4.8 1.6 9.6 3.2 14.4 3.2 6.4 0 11.2-1.6 17.6-3.2 9.6-4.8 17.6-12.8 22.4-24l33.6-96c41.6 4.8 81.6 3.2 123.2-3.2l32 94.4c3.2 11.2 11.2 19.2 22.4 24 9.6 4.8 20.8 4.8 32 1.6 20.8-8 32-32 24-54.4l-28.8-84.8c30.4-9.6 59.2-22.4 86.4-38.4l62.4 65.6c14.4 16 43.2 16 57.6 0 16-16 16-43.2 0-60.8l-51.2-54.4c56-43.2 100.8-100.8 128-164.8z</Geometry>
	<Geometry o:Freeze="True" x:Key="AudioGeometry">M627.52666696 962L550.66666696 890.47999971c116.82-92.99999971 191.09999971-230.94 191.09999971-385.2 0-146.99999971-67.61999971-279-174.96-371.57999942L643.84666667 62C770.86666638 172.99999971 850.66666667 330.2 850.66666667 505.09999971c0 182.27999971-86.58 345.42-223.13999971 456.90000029zM405.64666638 782l-76.32-77.22a227.88 227.88 0 0 0 116.40000058-199.26A228.06 228.06 0 0 0 347.86666638 317.84000029L422.86666696 242A334.37999971 334.37999971 0 0 1 550.66666696 505.52 334.62 334.62 0 0 1 405.64666638 782zM205.66666638 596.6C164.26666638 596.6 130.66666667 562.51999971 130.66666667 520.64 130.66666667 478.76000029 164.26666638 444.79999971 205.66666638 444.79999971s74.99999971 33.95999971 75.00000058 75.90000058c0 41.87999971-33.59999971 75.84000029-75.00000058 75.83999942z</Geometry>
	<Geometry o:Freeze="True" x:Key="BubbleTailGeometry">M0,0L28,0 28,14.0000006258488 28,15.0010000765324 28.0151405334473,15.0010000765324 28.0455417633057,15.8010965883732C28.4084091186524,22.9596563875675,30.92209815979,29.5507589876652,34.9532623291016,34.9410597383976L34.9984359741211,34.9999815523624 34.0966339111328,34.9885679781437C15.1841707229614,34.5094191133976,2.0535663480814E-07,19.0279375612736,0,0z</Geometry>
	<Geometry o:Freeze="True" x:Key="StarGeometry">M535.9 165.2l96.5 195.4c3.9 7.9 11.4 13.3 20.1 14.6l215.7 31.3c21.9 3.2 30.6 30 14.8 45.5L726.8 604.1c-6.3 6.1-9.1 14.9-7.7 23.6L756 842.5c3.7 21.8-19.1 38.4-38.7 28.1L524.4 769.2c-7.8-4.1-17-4.1-24.8 0L306.7 870.6c-19.6 10.3-42.4-6.3-38.7-28.1l36.8-214.8c1.5-8.6-1.4-17.5-7.7-23.6L141.1 452c-15.8-15.4-7.1-42.3 14.8-45.5l215.7-31.3c8.7-1.3 16.2-6.7 20.1-14.6l96.5-195.4c9.7-19.9 37.9-19.9 47.7 0z</Geometry>
	<Geometry o:Freeze="True" x:Key="AddGeometry">M8,0 C8.5522847,0 9,0.44771525 9,1 L9,7 15,7 C15.552285,7 16,7.4477153 16,8 16,8.5522852 15.552285,9 15,9 L9,9 9,15 C9,15.552285 8.5522847,16 8,16 7.4477153,16 7,15.552285 7,15 L7,9 1,9 C0.44771528,9 0,8.5522852 0,8 0,7.4477153 0.44771528,7 1,7 L7,7 7,1 C7,0.44771525 7.4477153,0 8,0 z</Geometry>
	<Geometry o:Freeze="True" x:Key="RemoveGeometry">M10.899495,0 C11.155417,0 11.411339,0.097630501 11.606602,0.29289246 11.997126,0.68341732 11.997126,1.3165817 11.606602,1.7071066 L7.3639612,5.9497471 11.606602,10.192388 C11.997126,10.582912 11.997126,11.216077 11.606602,11.606601 11.216077,11.997126 10.582912,11.997126 10.192388,11.606601 L5.9497476,7.3639607 1.7071068,11.606601 C1.3165827,11.997126 0.68341756,11.997126 0.29289341,11.606601 -0.097630978,11.216077 -0.097630978,10.582912 0.29289341,10.192388 L4.5355338,5.9497471 0.29289341,1.7071066 C-0.097630978,1.3165817 -0.097630978,0.68341732 0.29289341,0.29289246 0.48815536,0.097630501 0.74407768,0 1,0 1.2559223,0 1.5118446,0.097630501 1.7071068,0.29289246 L5.9497476,4.5355334 10.192388,0.29289246 C10.38765,0.097630501 10.643572,0 10.899495,0 z</Geometry>
	<Geometry o:Freeze="True" x:Key="SubGeometry">M62.5797 488.9508c0.2632 42.5185 34.985 77.2116 77.5035 77.5035l743.0216-0.6728c42.5185 0.3215 76.7437-33.9333 76.4518-76.4805l0 0c-0.2918-42.5175-34.985-77.2106-77.5045-77.5035l-743.0216-0.087C96.513 411.4473 62.2879 446.4323 62.5797 488.9508L62.5797 488.9508z</Geometry>
	<Geometry o:Freeze="True" x:Key="WarningGeometry">M943.644188 827.215696l-351.176649-608.204749c-42.945473-74.36249-113.147387-74.36249-156.092861 0l-351.176649 608.204749c-42.946498 74.431167-7.811716 135.14955 78.012605 135.14955l702.420949 0C951.455904 962.36422 986.555836 901.645838 943.644188 827.215696zM466.187532 391.579035c12.621133-13.644108 28.66175-20.466675 48.233578-20.466675 19.580028 0 35.612444 6.75389 48.241778 20.194018 12.544256 13.473954 18.820484 30.325365 18.820484 50.587035 0 17.430551-26.19759 145.621205-34.929778 238.882082l-63.105666 0c-7.666162-93.259852-36.090106-221.450507-36.090106-238.882082C447.358847 421.938226 453.643275 405.155491 466.187532 391.579035zM561.76804 835.026386c-13.268949 12.928641-29.062535 19.375023-47.345906 19.375023-18.275171 0-34.076957-6.447407-47.346931-19.375023-13.235123-12.89379-19.818859-28.517221-19.818859-46.869269 0-18.249546 6.583736-34.043131 19.818859-47.278254 13.268949-13.235123 29.07176-19.852685 47.346931-19.852685 18.283371 0 34.076957 6.617562 47.345906 19.852685 13.235123 13.235123 19.827059 29.028709 19.827059 47.278254C581.595099 806.51019 575.003163 822.132597 561.76804 835.026386z</Geometry>
	<Geometry o:Freeze="True" x:Key="InfoGeometry">M505.6512 39.0144c-261.2224 3.4816-470.1184 218.112-466.6368 479.4368 3.4816 261.12 218.112 470.1184 479.3344 466.6368 261.2224-3.4816 470.1184-218.112 466.7392-479.3344C981.504 244.4288 766.8736 35.5328 505.6512 39.0144zM558.08 196.608c48.128 0 62.2592 27.9552 62.2592 59.8016 0 39.8336-31.9488 76.6976-86.3232 76.6976-45.568 0-67.1744-22.9376-65.9456-60.8256C468.0704 240.4352 494.7968 196.608 558.08 196.608zM434.7904 807.6288c-32.8704 0-56.9344-19.968-33.8944-107.6224l37.6832-155.5456c6.5536-24.8832 7.68-34.9184 0-34.9184-9.8304 0-52.5312 17.2032-77.7216 34.2016l-16.384-26.9312c79.9744-66.7648 171.8272-105.8816 211.2512-105.8816 32.8704 0 38.2976 38.912 21.9136 98.6112l-43.2128 163.5328c-7.68 28.8768-4.4032 38.912 3.2768 38.912 9.9328 0 42.1888-11.9808 73.9328-36.9664l18.6368 24.8832C552.5504 777.728 467.6608 807.6288 434.7904 807.6288z</Geometry>
	<Geometry o:Freeze="True" x:Key="ErrorGeometry">M495.469714 0C224.621714 0 0 224.621714 0 495.469714c0 270.884571 224.621714 495.506286 495.469714 495.506286 270.884571 0 495.506286-224.621714 495.506286-495.506286C990.976 224.621714 766.354286 0 495.469714 0z m211.419429 634.221714c19.821714 19.821714 19.821714 46.226286 0 66.048s-46.226286 19.821714-66.048 0l-138.752-138.715428-145.334857 145.334857a51.858286 51.858286 0 0 1-72.667429 0 51.858286 51.858286 0 0 1 0-72.667429l145.334857-145.334857-138.752-138.752c-19.821714-19.821714-19.821714-46.226286 0-66.048s46.262857-19.821714 66.084572 0l138.715428 138.715429 145.371429-145.334857a51.858286 51.858286 0 0 1 72.667428 0 51.858286 51.858286 0 0 1 0 72.667428l-145.371428 145.334857 138.752 138.752z</Geometry>
	<Geometry o:Freeze="True" x:Key="SuccessGeometry">M512.66048 64.64c-247.424 0-448 200.57728-448 448s200.576 448 448 448 448-200.57728 448-448c0-247.424-200.57728-448-448-448z m250.71232 334.86336L480.98176 681.89312c-15.49568 15.49696-40.61952 15.49696-56.11648 0l-162.9184-162.9184c-15.49568-15.49568-15.49568-40.61824 0-56.1152s40.61952-15.49568 56.11648 0l134.85952 134.85952L707.25504 343.3856c15.49568-15.49568 40.61952-15.49568 56.11648 0s15.49696 40.6208 0.00128 56.11776z</Geometry>
	<Geometry o:Freeze="True" x:Key="FatalGeometry">M716.8 375.466667l34.133333 34.133333c17.066667 17.066667 42.666667 17.066667 59.733334 0 17.066667-17.066667 17.066667-42.666667 0-59.733333l-34.133334-34.133334 34.133334-34.133333c17.066667-17.066667 17.066667-42.666667 0-59.733333-17.066667-17.066667-42.666667-17.066667-59.733334 0l-34.133333 34.133333-34.133333-34.133333c-17.066667-17.066667-42.666667-17.066667-59.733334 0-17.066667 17.066667-17.066667 42.666667 0 59.733333l34.133334 34.133333-34.133334 34.133334c-17.066667 17.066667-17.066667 42.666667 0 59.733333 17.066667 17.066667 42.666667 17.066667 59.733334 0l34.133333-34.133333z m-426.666667 0l34.133334 34.133333c17.066667 17.066667 42.666667 17.066667 59.733333 0 17.066667-17.066667 17.066667-42.666667 0-59.733333l-34.133333-34.133334 34.133333-34.133333c17.066667-17.066667 17.066667-42.666667 0-59.733333-17.066667-17.066667-42.666667-17.066667-59.733333 0l-34.133334 34.133333-34.133333-34.133333c-17.066667-17.066667-42.666667-17.066667-59.733333 0-17.066667 17.066667-17.066667 42.666667 0 59.733333l34.133333 34.133333-34.133333 34.133334c-17.066667 17.066667-17.066667 42.666667 0 59.733333 17.066667 17.066667 42.666667 17.066667 59.733333 0l34.133333-34.133333zM0 85.333333c0-51.2 42.666667-85.333333 85.333333-85.333333h853.333334c51.2 0 85.333333 42.666667 85.333333 85.333333v853.333334c0 51.2-42.666667 85.333333-85.333333 85.333333H85.333333c-51.2 0-85.333333-42.666667-85.333333-85.333333V85.333333z m512 469.333334c-136.533333 0-230.4 68.266667-290.133333 196.266666-8.533333 17.066667 0 42.666667 17.066666 59.733334s42.666667 0 59.733334-17.066667c51.2-93.866667 110.933333-145.066667 221.866666-145.066667 102.4 0 170.666667 51.2 221.866667 145.066667 8.533333 17.066667 34.133333 25.6 59.733333 17.066667 17.066667-8.533333 25.6-34.133333 17.066667-59.733334-76.8-128-170.666667-196.266667-307.2-196.266666z</Geometry>
	<Geometry o:Freeze="True" x:Key="AskGeometry">M512 0 30.11843 240.941297l0 542.117406 481.88157 240.941297 481.88157-240.941297L993.88157 240.941297 512 0zM575.776472 768.799969 460.188012 768.799969 460.188012 656.222073l115.588459 0L575.776472 768.799969zM623.335603 509.329685c-52.375829 36.723353-59.600363 55.988096-59.600363 84.885211l0 19.866447L468.616977 614.081343l0-26.489278c0-45.754021 13.846342-80.67124 61.406497-116.791866 46.957428-36.723353 57.79423-62.0082 57.79423-84.282484 0-25.284848-21.67258-54.181962-55.386393-54.181962-42.743457 0-70.436142 26.489278-82.477374 85.486914l-105.956088-21.67258c24.683144-111.976192 82.477374-157.127486 205.289345-157.127486 98.12985 0 157.72919 63.212631 157.72919 131.842639C707.017407 423.240044 688.956071 461.76953 623.335603 509.329685z</Geometry>
	<Geometry o:Freeze="True" x:Key="AllGeometry">M 721.005 638.949 C 758.74 638.949 789.333 669.56 789.333 707.312 C 789.333 745.047 758.74 775.657 721.005 775.657 C 683.253 775.657 652.66 745.047 652.66 707.312 C 652.66 669.56 683.253 638.949 721.005 638.949 Z M 512.017 638.949 C 549.77 638.949 580.38 669.56 580.38 707.312 C 580.38 745.047 549.77 775.657 512.017 775.657 C 474.265 775.657 443.672 745.047 443.672 707.312 C 443.672 669.56 474.265 638.949 512.017 638.949 Z M 303.029 638.949 C 340.781 638.949 371.392 669.56 371.392 707.312 C 371.392 745.047 340.781 775.657 303.029 775.657 C 265.277 775.657 234.667 745.047 234.667 707.312 C 234.667 669.56 265.277 638.949 303.029 638.949 Z M 721.005 443.655 C 758.74 443.655 789.333 474.265 789.333 512.017 C 789.333 549.769 758.74 580.363 721.005 580.363 C 683.253 580.363 652.66 549.769 652.66 512.017 C 652.66 474.265 683.253 443.655 721.005 443.655 Z M 512.017 443.655 C 549.77 443.655 580.38 474.265 580.38 512.017 C 580.38 549.769 549.77 580.363 512.017 580.363 C 474.265 580.363 443.672 549.769 443.672 512.017 C 443.672 474.265 474.265 443.655 512.017 443.655 Z M 303.029 443.655 C 340.781 443.655 371.392 474.265 371.392 512.017 C 371.392 549.769 340.781 580.363 303.029 580.363 C 265.277 580.363 234.667 549.769 234.667 512.017 C 234.667 474.265 265.277 443.655 303.029 443.655 Z M 721.005 248.343 C 758.74 248.343 789.333 278.953 789.333 316.688 C 789.333 354.44 758.74 385.051 721.005 385.051 C 683.253 385.051 652.66 354.44 652.66 316.688 C 652.66 278.953 683.253 248.343 721.005 248.343 Z M 512.017 248.343 C 549.77 248.343 580.38 278.953 580.38 316.688 C 580.38 354.44 549.77 385.051 512.017 385.051 C 474.265 385.051 443.672 354.44 443.672 316.688 C 443.672 278.953 474.265 248.343 512.017 248.343 Z M 303.029 248.343 C 340.781 248.343 371.392 278.953 371.392 316.688 C 371.392 354.44 340.781 385.051 303.029 385.051 C 265.277 385.051 234.667 354.44 234.667 316.688 C 234.667 278.953 265.277 248.343 303.029 248.343 Z</Geometry>
	<Geometry o:Freeze="True" x:Key="DragVerticalGeometry">M2,12 C3.1045694,12 4,12.895431 4,14 4,15.104569 3.1045694,16 2,16 0.89543051,16 0,15.104569 0,14 0,12.895431 0.89543051,12 2,12 z M2,6 C3.1045694,6 4,6.8954306 4,8 4,9.1045694 3.1045694,10 2,10 0.89543051,10 0,9.1045694 0,8 0,6.8954306 0.89543051,6 2,6 z M2,0 C3.1045694,0 4,0.89543056 4,2 4,3.1045694 3.1045694,4 2,4 0.89543051,4 0,3.1045694 0,2 0,0.89543056 0.89543051,0 2,0 z</Geometry>
	<Geometry o:Freeze="True" x:Key="DragHorizontalGeometry">M14,0 C15.104569,0 16,0.89543051 16,2 16,3.1045694 15.104569,4 14,4 12.895431,4 12,3.1045694 12,2 12,0.89543051 12.895431,0 14,0 z M8,0 C9.1045694,0 10,0.89543051 10,2 10,3.1045694 9.1045694,4 8,4 6.8954306,4 6,3.1045694 6,2 6,0.89543051 6.8954306,0 8,0 z M2,0 C3.1045694,0 4,0.89543051 4,2 4,3.1045694 3.1045694,4 2,4 0.89543056,4 0,3.1045694 0,2 0,0.89543051 0.89543056,0 2,0 z</Geometry>
	<Geometry o:Freeze="True" x:Key="DropperGeometry">M798.165333 97.834667a42.624 42.624 0 0 0-60.330666 0l-140.629334 140.629333-55.381333-55.296-60.330667 60.330667 55.381334 55.296-353.706667 353.706666a42.709333 42.709333 0 0 0-11.221333 19.84l-42.666667 170.666667a42.538667 42.538667 0 0 0 51.712 51.712l170.666667-42.666667c7.509333-1.877333 14.378667-5.76 19.84-11.221333l353.792-353.792 55.210666 55.125333 60.330667-60.330666-55.210667-55.125334 140.544-140.544a42.624 42.624 0 0 0 0-60.330666l-128-128zM319.488 772.138667l-90.197333 22.570666 22.570666-90.197333 345.386667-345.386667 67.669333 67.584-345.429333 345.429334z</Geometry>
	<Style x:Key="PathBaseStyle" TargetType="Path">
		<Setter Property="Stretch" Value="Uniform" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="FlowDirection" Value="LeftToRight" />
	</Style>
	<system:Double x:Key="DefaultControlHeight">30</system:Double>
	<Thickness x:Key="DefaultControlPadding">10,6</Thickness>
	<Thickness x:Key="DefaultInputPadding">8,6</Thickness>
	<CornerRadius x:Key="DefaultCornerRadius">4</CornerRadius>
	<system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">30</system:Double>
	<interactivity:FluidMoveBehavior x:Key="BehaviorXY200" x:Shared="False" AppliesTo="Children" Duration="0:0:.2">
		<interactivity:FluidMoveBehavior.EaseX>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseX>
		<interactivity:FluidMoveBehavior.EaseY>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseY>
	</interactivity:FluidMoveBehavior>
	<interactivity:FluidMoveBehavior x:Key="BehaviorX200" x:Shared="False" AppliesTo="Children" Duration="0:0:.2">
		<interactivity:FluidMoveBehavior.EaseX>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseX>
	</interactivity:FluidMoveBehavior>
	<interactivity:FluidMoveBehavior x:Key="BehaviorY200" x:Shared="False" AppliesTo="Children" Duration="0:0:.2">
		<interactivity:FluidMoveBehavior.EaseY>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseY>
	</interactivity:FluidMoveBehavior>
	<interactivity:FluidMoveBehavior x:Key="BehaviorXY400" x:Shared="False" AppliesTo="Children" Duration="0:0:.4">
		<interactivity:FluidMoveBehavior.EaseX>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseX>
		<interactivity:FluidMoveBehavior.EaseY>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseY>
	</interactivity:FluidMoveBehavior>
	<interactivity:FluidMoveBehavior x:Key="BehaviorX400" x:Shared="False" AppliesTo="Children" Duration="0:0:.4">
		<interactivity:FluidMoveBehavior.EaseX>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseX>
	</interactivity:FluidMoveBehavior>
	<interactivity:FluidMoveBehavior x:Key="BehaviorY400" x:Shared="False" AppliesTo="Children" Duration="0:0:.4">
		<interactivity:FluidMoveBehavior.EaseY>
			<PowerEase />
		</interactivity:FluidMoveBehavior.EaseY>
	</interactivity:FluidMoveBehavior>
	<Style TargetType="hc:BlendEffectBox">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:BlendEffectBox">
					<ContentPresenter ContentSource="ActualContent" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="BorderCircular" TargetType="Border">
		<Setter Property="hc:BorderElement.Circular" Value="True" />
	</Style>
	<Style TargetType="hc:Col">
		<Setter Property="Focusable" Value="False" />
	</Style>
	<Style TargetType="ContentControl">
		<Setter Property="Focusable" Value="False" />
	</Style>
	<Style TargetType="hc:FlipClock">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:FlipClock">
					<StackPanel Orientation="Horizontal">
						<hc:FlipNumber Margin="-20" Number="{Binding NumberList[0],RelativeSource={RelativeSource TemplatedParent}}" />
						<hc:FlipNumber Margin="-20" Number="{Binding NumberList[1],RelativeSource={RelativeSource TemplatedParent}}" />
						<hc:FlipNumber Margin="0,-20,-20,-20" Number="{Binding NumberList[2],RelativeSource={RelativeSource TemplatedParent}}" />
						<hc:FlipNumber Margin="-20" Number="{Binding NumberList[3],RelativeSource={RelativeSource TemplatedParent}}" />
						<hc:FlipNumber Margin="0,-20,-20,-20" Number="{Binding NumberList[4],RelativeSource={RelativeSource TemplatedParent}}" />
						<hc:FlipNumber Margin="-20" Number="{Binding NumberList[5],RelativeSource={RelativeSource TemplatedParent}}" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="hc:FloatingBlock">
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:FloatingBlock">
					<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="GridSplitter">
		<Setter Property="Focusable" Value="False" />
	</Style>
	<Style TargetType="hc:Notification">
		<Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
		<Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
		<Setter Property="SizeToContent" Value="WidthAndHeight" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="ShowActivated" Value="False" />
		<Setter Property="ShowInTaskbar" Value="False" />
		<Setter Property="Topmost" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Notification">
					<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RectangleCircular" TargetType="Rectangle">
		<Setter Property="hc:RectangleAttach.Circular" Value="True" />
	</Style>
	<Style x:Key="SnapRect4ScreenshotStyle" TargetType="Rectangle">
		<Setter Property="Height" Value="5" />
		<Setter Property="Width" Value="5" />
		<Setter Property="Fill" Value="DodgerBlue" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Visibility" Value="Collapsed" />
		<Style.Triggers>
			<Trigger Property="hc:TipElement.Placement" Value="LeftTop">
				<Setter Property="Margin" Value="-3, -3, 0, 0" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Top" />
			</Trigger>
			<Trigger Property="hc:TipElement.Placement" Value="Top">
				<Setter Property="Margin" Value="0, -3, 0, 0" />
				<Setter Property="HorizontalAlignment" Value="Center" />
				<Setter Property="VerticalAlignment" Value="Top" />
			</Trigger>
			<Trigger Property="hc:TipElement.Placement" Value="RightTop">
				<Setter Property="Margin" Value="0, -3, -3, 0" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="VerticalAlignment" Value="Top" />
			</Trigger>
			<Trigger Property="hc:TipElement.Placement" Value="Right">
				<Setter Property="Margin" Value="0, 0, -3, 0" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Trigger>
			<Trigger Property="hc:TipElement.Placement" Value="RightBottom">
				<Setter Property="Margin" Value="0, 0, -3, -3" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="VerticalAlignment" Value="Bottom" />
			</Trigger>
			<Trigger Property="hc:TipElement.Placement" Value="Bottom">
				<Setter Property="Margin" Value="0, 0, 0, -3" />
				<Setter Property="HorizontalAlignment" Value="Center" />
				<Setter Property="VerticalAlignment" Value="Bottom" />
			</Trigger>
			<Trigger Property="hc:TipElement.Placement" Value="LeftBottom">
				<Setter Property="Margin" Value="-3, 0, 0, -3" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Bottom" />
			</Trigger>
			<Trigger Property="hc:TipElement.Placement" Value="Left">
				<Setter Property="Margin" Value="-3, 0, 0, 0" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Trigger>
			<DataTrigger Binding="{Binding IsSelecting}" Value="True">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding IsDrawing}" Value="True">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TargetArea4ScreenshotStyle" TargetType="Border">
		<Setter Property="IsHitTestVisible" Value="False" />
		<Setter Property="BorderThickness" Value="5" />
		<Setter Property="BorderBrush" Value="DodgerBlue" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding IsSelecting}" Value="True">
				<Setter Property="BorderThickness" Value="1" />
			</DataTrigger>
			<DataTrigger Binding="{Binding IsDrawing}" Value="True">
				<Setter Property="IsHitTestVisible" Value="True" />
				<Setter Property="BorderThickness" Value="1" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="hc:SimpleItemsControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SimpleItemsControl">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<StackPanel x:Name="PART_Panel" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="hc:Sprite">
		<Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
		<Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
		<Setter Property="SizeToContent" Value="WidthAndHeight" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="ShowActivated" Value="False" />
		<Setter Property="ShowInTaskbar" Value="False" />
		<Setter Property="Topmost" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Sprite">
					<ContentPresenter Margin="{TemplateBinding Padding}" hc:WindowAttach.IsDragElement="True" HorizontalAlignment="Center" VerticalAlignment="Center" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Storyboard x:Key="Right2LeftTransition" x:Shared="False">
		<DoubleAnimation From="50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="Left2RightTransition" x:Shared="False">
		<DoubleAnimation From="-50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="Bottom2TopTransition" x:Shared="False">
		<DoubleAnimation From="50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="Top2BottomTransition" x:Shared="False">
		<DoubleAnimation From="-50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="Right2LeftWithFadeTransition" x:Shared="False">
		<DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)" />
		<DoubleAnimation From="50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="Left2RightWithFadeTransition" x:Shared="False">
		<DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)" />
		<DoubleAnimation From="-50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="Bottom2TopWithFadeTransition" x:Shared="False">
		<DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)" />
		<DoubleAnimation From="50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="Top2BottomWithFadeTransition" x:Shared="False">
		<DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)" />
		<DoubleAnimation From="-50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
			<DoubleAnimation.EasingFunction>
				<CubicEase EasingMode="EaseOut" />
			</DoubleAnimation.EasingFunction>
		</DoubleAnimation>
	</Storyboard>
	<Storyboard x:Key="FadeTransition" x:Shared="False">
		<DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)" />
	</Storyboard>
	<Style TargetType="hc:TransitioningContentControl">
		<Setter Property="Focusable" Value="False" />
	</Style>
	<Style x:Key="SliderRepeatButtonHorizontalStyle" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
						<Rectangle StrokeThickness="0" Fill="{TemplateBinding Background}" Height="2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SliderRepeatButtonVerticalStyle" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
						<Rectangle StrokeThickness="0" Fill="{TemplateBinding Background}" Width="2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CompareSliderRepeatButtonTransparent" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<ContentPresenter Content="{TemplateBinding Content}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PreviewSliderRepeatButtonHorizontalStyle" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
						<Rectangle Fill="{TemplateBinding Background}" Height="2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PreviewSliderRepeatButtonVerticalStyle" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
						<Rectangle Fill="{TemplateBinding Background}" Width="2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarBaseRepeatButton" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToggleBlockBaseStyle" TargetType="hc:ToggleBlock">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ToggleBlock">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<hc:SimplePanel Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
							<ContentPresenter Name="ContentPresenterChecked" ContentSource="CheckedContent" Visibility="Collapsed" />
							<ContentPresenter Name="ContentPresenterUnChecked" ContentSource="UnCheckedContent" />
							<ContentPresenter Name="ContentPresenterIndeterminate" ContentSource="IndeterminateContent" Visibility="Collapsed" />
						</hc:SimplePanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="ContentPresenterChecked" Property="Visibility" Value="Visible" />
							<Setter TargetName="ContentPresenterUnChecked" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="ContentPresenterIndeterminate" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="ContentPresenterChecked" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="ContentPresenterUnChecked" Property="Visibility" Value="Visible" />
							<Setter TargetName="ContentPresenterIndeterminate" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="ContentPresenterChecked" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="ContentPresenterUnChecked" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="ContentPresenterIndeterminate" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="GroupBoxBaseTopTemplate" TargetType="GroupBox">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" MinHeight="30" />
				<RowDefinition />
			</Grid.RowDefinitions>
			<Border MinHeight="30" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,6">
				<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="10,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
			<Border Grid.Row="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
				<ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="GroupBoxBaseLeftTemplate" TargetType="GroupBox">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" MinWidth="30" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<Border MinWidth="30" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="False" BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,6,0">
				<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="0,10" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RenderTransformOrigin="0.5,0.5">
					<ContentPresenter.LayoutTransform>
						<TransformGroup>
							<RotateTransform Angle="-90" />
						</TransformGroup>
					</ContentPresenter.LayoutTransform>
				</ContentPresenter>
			</Border>
			<Border Grid.Column="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
				<ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="GroupBoxTabTopTemplate" TargetType="GroupBox">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" MinHeight="30" />
				<RowDefinition />
			</Grid.RowDefinitions>
			<Border Grid.Row="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='0,0,1,1'}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
				<ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
			<Border Grid.Row="0" MinHeight="30" BorderThickness="{Binding BorderThickness,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ThicknessSplitConverter},ConverterParameter='1,1,1,0'}" BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='1,1,0,0'}">
				<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="10,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="GroupBoxTabLeftTemplate" TargetType="GroupBox">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" MinWidth="30" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<Border Grid.Column="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='0,1,1,0'}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
				<ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
			<Border Grid.Column="0" MinWidth="30" BorderThickness="{Binding BorderThickness,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ThicknessSplitConverter},ConverterParameter='1,1,0,1'}" BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='1,0,0,1'}">
				<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="0,10" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
					<ContentPresenter.LayoutTransform>
						<TransformGroup>
							<RotateTransform Angle="-90" />
						</TransformGroup>
					</ContentPresenter.LayoutTransform>
				</ContentPresenter>
			</Border>
		</Grid>
	</ControlTemplate>
	<ItemsPanelTemplate x:Key="ButtonGroupHorizontalItemsPanelTemplate">
		<UniformGrid FocusVisualStyle="{x:Null}" Rows="1" />
	</ItemsPanelTemplate>
	<ItemsPanelTemplate x:Key="ButtonGroupVerticalItemsPanelTemplate">
		<UniformGrid FocusVisualStyle="{x:Null}" Columns="1" />
	</ItemsPanelTemplate>
	<tools:ButtonGroupItemStyleSelector x:Key="ButtonGroupItemStyleSelector" />
	<LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Color="#00FFFFFF" Offset="0" />
		<GradientStop Color="#60FFFFFF" Offset="0.4" />
		<GradientStop Color="#60FFFFFF" Offset="0.6" />
		<GradientStop Color="#00FFFFFF" Offset="1" />
	</LinearGradientBrush>
	<ControlTemplate x:Key="CircleProgressBarTemplate" TargetType="hc:CircleProgressBar">
		<hc:SimplePanel x:Name="TemplateRoot">
			<shapes:Arc ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" EndAngle="360" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="0" />
			<shapes:Arc ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" Width="{TemplateBinding ActualWidth}" StrokeThickness="0" Height="{TemplateBinding ActualHeight}" x:Name="PART_Indicator" Fill="{TemplateBinding Foreground}" />
			<TextBlock Visibility="{Binding ShowText,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}" />
		</hc:SimplePanel>
	</ControlTemplate>
	<LinearGradientBrush x:Key="ResizeGripperForeground" EndPoint="1,0.75" StartPoint="0,0.25">
		<GradientStop Color="#FFFFFF" Offset="0.3" />
		<GradientStop Color="#BBC5D7" Offset="0.75" />
		<GradientStop Color="#6D83A9" Offset="1" />
	</LinearGradientBrush>
	<SineEase x:Key="SineEaseOut" EasingMode="EaseOut" />
	<ControlTemplate x:Key="BadgeDotTemplate" TargetType="hc:Badge">
		<hc:SimplePanel>
			<ContentPresenter />
			<Border Visibility="{TemplateBinding ShowBadge,Converter={StaticResource Boolean2VisibilityConverter}}" Margin="{TemplateBinding BadgeMargin}" Width="10" Height="10" CornerRadius="5" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
		</hc:SimplePanel>
	</ControlTemplate>
	<Style x:Key="ColorPickerSliderRepeatButtonBaseStyle" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ColorPickerSliderThumbTemplate" TargetType="Thumb">
		<Border Width="13" Height="13" Background="White" CornerRadius="6.5" />
	</ControlTemplate>
	<LinearGradientBrush x:Key="ColorPickerRainbowBrush">
		<GradientStop Color="#ff0000" />
		<GradientStop Color="#ff00ff" Offset="0.167" />
		<GradientStop Color="#0000ff" Offset="0.334" />
		<GradientStop Color="#00ffff" Offset="0.501" />
		<GradientStop Color="#00ff00" Offset="0.668" />
		<GradientStop Color="#ffff00" Offset="0.835" />
		<GradientStop Color="#ff0000" Offset="1" />
	</LinearGradientBrush>
	<DrawingBrush x:Key="ColorPickerOpacityBrush" Viewport="0,0,12,11" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<GeometryDrawing Brush="#d0cec7">
					<GeometryDrawing.Geometry>
						<GeometryGroup>
							<RectangleGeometry Rect="0,0,6,5" />
							<RectangleGeometry Rect="6,6,6,5" />
						</GeometryGroup>
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
				<GeometryDrawing Brush="#e7e7e2">
					<GeometryDrawing.Geometry>
						<RectangleGeometry Rect="0,5,12,1" />
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>
	<Style x:Key="CoverFlowBaseStyle" TargetType="hc:CoverFlow">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:CoverFlow">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Viewport3D x:Name="PART_Viewport3D">
							<Viewport3D.Camera>
								<PerspectiveCamera x:Name="PART_Camera" Position="0,0,3" UpDirection="0,1,0" LookDirection="0,0,-1" FieldOfView="90" />
							</Viewport3D.Camera>
							<Viewport3D.Children>
								<ModelVisual3D>
									<ModelVisual3D.Content>
										<DirectionalLight Color="White" Direction="1,0,-4" />
									</ModelVisual3D.Content>
								</ModelVisual3D>
								<ModelVisual3D>
									<ModelVisual3D.Content>
										<DirectionalLight Color="White" Direction="-1,0,-4" />
									</ModelVisual3D.Content>
								</ModelVisual3D>
								<ModelVisual3D x:Name="PART_VisualParent" />
							</Viewport3D.Children>
						</Viewport3D>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CoverViewItemBaseStyle" TargetType="hc:CoverViewItem">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:CoverViewItem">
					<Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Margin="{TemplateBinding Padding}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<DrawingBrush x:Key="SortByCategoryDrawingBrush" o:Freeze="True">
		<DrawingBrush.Drawing>
			<DrawingGroup o:Freeze="True">
				<GeometryDrawing o:Freeze="True" Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
				<GeometryDrawing o:Freeze="True" Brush="#FFF6F6F6" Geometry="F1M0.9999,-0.000199999999999534L0.9999,15.9998 10.9999,15.9998 10.9999,13.4148 11.9999,14.4138 15.9999,10.4138 15.9999,5.5858 14.0009,7.5858 14.0009,3.0008 10.9999,3.0008 10.9999,-0.000199999999999534z" />
				<GeometryDrawing o:Freeze="True" Brush="#FF424242" Geometry="F1M10,12.4141L10,15.0001 2,15.0001 2,1.0001 10,1.0001 10,3.0001 10,7.5861 8.414,6.0001 9,6.0001 9,3.0001 3,3.0001 3,6.0001 8,6.0001 8,7.0001 3,7.0001 3,10.0001 8,10.0001 8,10.4141 8.586,11.0001 3,11.0001 3,14.0001 9,14.0001 9,11.4141z" />
				<GeometryDrawing o:Freeze="True" Brush="#FFEFEFF0" Geometry="F1M8.5859,11L2.9999,11 2.9999,14 8.9999,14 8.9999,11.414z M7.9999,7L2.9999,7 2.9999,10 7.9999,10z M7.9999,6L2.9999,6 2.9999,3 8.9999,3 8.9999,6 8.4139,6 7.9999,5.586z" />
				<GeometryDrawing o:Freeze="True" Brush="#FF00529C" Geometry="F1M13,10L13,4 11,4 11,10 9,8 9,10 12,13 15,10 15,8z" />
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>
	<DrawingBrush x:Key="SortByNameDrawingBrush" o:Freeze="True">
		<DrawingBrush.Drawing>
			<DrawingGroup o:Freeze="True">
				<GeometryDrawing o:Freeze="True" Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
				<GeometryDrawing o:Freeze="True" Brush="#FFF6F6F6" Geometry="F1M0,-0.000199999999999534L0,8.9998 1,8.9998 1,12.0008 2.586,12.0008 1,13.5858 1,15.9998 8,15.9998 8,13.0008 6.449,13.0008 8,12.0008 8,10.9998 12,14.9998 16,10.9998 16,4.9998 14,6.9998 14,3.0008 10,3.0008 10,6.9998 9,5.9998 9,-0.000199999999999534z" />
				<GeometryDrawing o:Freeze="True" Brush="#FF424242" Geometry="F1M7,7L5,2 4,2 2,7 3,7 3.399,6 5.601,6 6,7z M8,8L1,8 1,1 8,1z M4.5,3.25L5.2,5 3.8,5z M2,11L5,11 2,14 2,15 7,15 7,14 4.013,14 7,11.051 6.952,11 7,11 7,10 2,10z" />
				<GeometryDrawing o:Freeze="True" Brush="#FFEFEFF0" Geometry="F1M3.7998,5L4.4998,3.25 5.1998,5z M5.9998,7L6.9998,7 4.9998,2 3.9998,2 1.9998,7 2.9998,7 3.3998,6 5.6008,6z" />
				<GeometryDrawing o:Freeze="True" Brush="#FF00529C" Geometry="F1M15,8L15,10 12,13 9,10 9,8 11,10 11,4 13,4 13,10z" />
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>
	<ItemsPanelTemplate x:Key="StepBarHorizontalItemsPanelTemplate">
		<UniformGrid Rows="1" />
	</ItemsPanelTemplate>
	<ItemsPanelTemplate x:Key="StepBarVerticalItemsPanelTemplate">
		<UniformGrid Columns="1" />
	</ItemsPanelTemplate>
	<Style x:Key="ToolBarTrayBaseStyle" TargetType="ToolBarTray">
		<Setter Property="Background" Value="Transparent" />
	</Style>
	<PathGeometry x:Key="TreeArrow" Figures="M508.893248 762.931659a65.039498 65.039498 0 0 1-46.420659-19.485839L97.125746 371.004022c-25.143018-25.634319-24.752868-66.816849 0.881451-91.959868 25.648769-25.164693 66.809624-24.745643 91.959867 0.881451l318.933409 325.125238 318.933408-325.125238a65.025048 65.025048 0 0 1 92.841318 91.078417L555.313907 743.44582a65.025048 65.025048 0 0 1-46.420659 19.485839z" />
	<Style x:Key="CarouselItemBaseStyle" TargetType="hc:CarouselItem">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:CarouselItem">
					<Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplate="{Binding ItemTemplate,RelativeSource={RelativeSource AncestorType=hc:Carousel}}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RowHeaderGripperStyle" TargetType="Thumb">
		<Setter Property="Height" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Cursor" Value="SizeNS" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ColumnHeaderGripperStyle" TargetType="Thumb">
		<Setter Property="Width" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Cursor" Value="SizeWE" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TextBlockComboBoxStyle" TargetType="ComboBox">
		<Setter Property="Focusable" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<TextBlock IsHitTestVisible="False" Text="{TemplateBinding Text}" TextTrimming="CharacterEllipsis" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DataGridTextColumnStyle" TargetType="TextBlock">
		<Setter Property="TextTrimming" Value="CharacterEllipsis" />
	</Style>
	<Style TargetType="hc:GrowlWindow">
		<Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
		<Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
		<Setter Property="Width" Value="340" />
		<Setter Property="MaxWidth" Value="340" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="ShowActivated" Value="False" />
		<Setter Property="ShowInTaskbar" Value="False" />
		<Setter Property="Topmost" Value="True" />
	</Style>
	<Style x:Key="ListBoxItemCustom" TargetType="ListBoxItem">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ItemsPanelTemplate x:Key="WrapPanelHorizontalItemsPanelTemplate">
		<WrapPanel FocusVisualStyle="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" />
	</ItemsPanelTemplate>
	<ItemsPanelTemplate x:Key="WrapPanelVerticalItemsPanelTemplate">
		<WrapPanel FocusVisualStyle="{x:Null}" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center" />
	</ItemsPanelTemplate>
	<ItemsPanelTemplate x:Key="StackPanelHorizontalItemsPanelTemplate">
		<StackPanel FocusVisualStyle="{x:Null}" Orientation="Horizontal" />
	</ItemsPanelTemplate>
	<ItemsPanelTemplate x:Key="StackPanelVerticalItemsPanelTemplate">
		<StackPanel FocusVisualStyle="{x:Null}" HorizontalAlignment="Stretch" />
	</ItemsPanelTemplate>
	<Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
		<Setter Property="Canvas.Right" Value="-9" />
		<Setter Property="Width" Value="18" />
		<Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border Background="Transparent" Padding="{TemplateBinding Padding}">
						<Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Center" Width="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ItemsPanelTemplate x:Key="ComboBoxCapsuleItemsPanelTemplate">
		<UniformGrid FocusVisualStyle="{x:Null}" Rows="1" />
	</ItemsPanelTemplate>
	<tools:ComboBoxItemCapsuleStyleSelector x:Key="ComboBoxItemCapsuleStyleSelector" />
	<hc:HorizontalAlignmentPathTemplateSelector x:Key="HorizontalAlignmentPathTemplateSelector" />
	<hc:VerticalAlignmentPathTemplateSelector x:Key="VerticalAlignmentPathTemplateSelector" />
	<ContextMenu x:Key="TabItemMenu" x:Shared="False">
		<MenuItem Command="interactivity:ControlCommands.Close" Header="{x:Static langs:Lang.Close}" />
		<MenuItem Command="interactivity:ControlCommands.CloseAll" Header="{x:Static langs:Lang.CloseAll}" />
		<MenuItem Command="interactivity:ControlCommands.CloseOther" Header="{x:Static langs:Lang.CloseOther}" />
	</ContextMenu>
	<SolidColorBrush o:Freeze="True" x:Key="LightPrimaryBrush" Color="{DynamicResource LightPrimaryColor}" />
	<LinearGradientBrush o:Freeze="True" x:Key="PrimaryBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop o:Freeze="True" Color="{DynamicResource PrimaryColor}" Offset="0" />
		<GradientStop o:Freeze="True" Color="{DynamicResource DarkPrimaryColor}" Offset="1" />
	</LinearGradientBrush>
	<SolidColorBrush o:Freeze="True" x:Key="DarkPrimaryBrush" Color="{DynamicResource DarkPrimaryColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="PrimaryTextBrush" Color="{DynamicResource PrimaryTextColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="SecondaryTextBrush" Color="{DynamicResource SecondaryTextColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="ThirdlyTextBrush" Color="{DynamicResource ThirdlyTextColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="ReverseTextBrush" Color="{DynamicResource ReverseTextColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="TextIconBrush" Color="{DynamicResource TextIconColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="BorderBrush" Color="{DynamicResource BorderColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="SecondaryBorderBrush" Color="{DynamicResource SecondaryBorderColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="BackgroundBrush" Color="{DynamicResource BackgroundColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="RegionBrush" Color="{DynamicResource RegionColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="SecondaryRegionBrush" Color="{DynamicResource SecondaryRegionColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="ThirdlyRegionBrush" Color="{DynamicResource ThirdlyRegionColor}" />
	<LinearGradientBrush o:Freeze="True" x:Key="TitleBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop o:Freeze="True" Color="{DynamicResource TitleColor}" Offset="0" />
		<GradientStop o:Freeze="True" Color="{DynamicResource SecondaryTitleColor}" Offset="1" />
	</LinearGradientBrush>
	<SolidColorBrush o:Freeze="True" x:Key="DefaultBrush" Color="{DynamicResource DefaultColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="DarkDefaultBrush" Color="{DynamicResource DarkDefaultColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="LightDangerBrush" Color="{DynamicResource LightDangerColor}" />
	<LinearGradientBrush o:Freeze="True" x:Key="DangerBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop o:Freeze="True" Color="{DynamicResource DangerColor}" Offset="0" />
		<GradientStop o:Freeze="True" Color="{DynamicResource DarkDangerColor}" Offset="1" />
	</LinearGradientBrush>
	<SolidColorBrush o:Freeze="True" x:Key="DarkDangerBrush" Color="{DynamicResource DarkDangerColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="LightWarningBrush" Color="{DynamicResource LightWarningColor}" />
	<LinearGradientBrush o:Freeze="True" x:Key="WarningBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop o:Freeze="True" Color="{DynamicResource WarningColor}" Offset="0" />
		<GradientStop o:Freeze="True" Color="{DynamicResource DarkWarningColor}" Offset="1" />
	</LinearGradientBrush>
	<SolidColorBrush o:Freeze="True" x:Key="DarkWarningBrush" Color="{DynamicResource DarkWarningColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="LightInfoBrush" Color="{DynamicResource LightInfoColor}" />
	<LinearGradientBrush o:Freeze="True" x:Key="InfoBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop o:Freeze="True" Color="{DynamicResource InfoColor}" Offset="0" />
		<GradientStop o:Freeze="True" Color="{DynamicResource DarkInfoColor}" Offset="1" />
	</LinearGradientBrush>
	<SolidColorBrush o:Freeze="True" x:Key="DarkInfoBrush" Color="{DynamicResource DarkInfoColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="LightSuccessBrush" Color="{DynamicResource LightSuccessColor}" />
	<LinearGradientBrush o:Freeze="True" x:Key="SuccessBrush" EndPoint="1,0" StartPoint="0,0">
		<GradientStop o:Freeze="True" Color="{DynamicResource SuccessColor}" Offset="0" />
		<GradientStop o:Freeze="True" Color="{DynamicResource DarkSuccessColor}" Offset="1" />
	</LinearGradientBrush>
	<SolidColorBrush o:Freeze="True" x:Key="DarkSuccessBrush" Color="{DynamicResource DarkSuccessColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="AccentBrush" Color="{DynamicResource AccentColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="DarkAccentBrush" Color="{DynamicResource DarkAccentColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="DarkMaskBrush" Color="{DynamicResource DarkMaskColor}" />
	<SolidColorBrush o:Freeze="True" x:Key="DarkOpacityBrush" Color="{DynamicResource DarkOpacityColor}" />
	<DropShadowEffect x:Key="EffectShadow1" BlurRadius="5" ShadowDepth="1" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" o:Freeze="True" />
	<DropShadowEffect x:Key="EffectShadow2" BlurRadius="8" ShadowDepth="1.5" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" o:Freeze="True" />
	<DropShadowEffect x:Key="EffectShadow3" BlurRadius="14" ShadowDepth="4.5" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" o:Freeze="True" />
	<DropShadowEffect x:Key="EffectShadow4" BlurRadius="25" ShadowDepth="8" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" o:Freeze="True" />
	<DropShadowEffect x:Key="EffectShadow5" BlurRadius="35" ShadowDepth="13" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" o:Freeze="True" />
	<Style x:Key="SearchPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource SearchGeometry}" />
	</Style>
	<Style x:Key="FullScreenReturnPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource FullScreenReturnGeometry}" />
	</Style>
	<Style x:Key="FullScreenPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource FullScreenGeometry}" />
	</Style>
	<Style x:Key="WindowsPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource WindowsGeometry}" />
	</Style>
	<Style x:Key="SavePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource SaveGeometry}" />
	</Style>
	<Style x:Key="DownloadPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource DownloadGeometry}" />
	</Style>
	<Style x:Key="EnlargePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource EnlargeGeometry}" />
	</Style>
	<Style x:Key="ReducePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource ReduceGeometry}" />
	</Style>
	<Style x:Key="RotatePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource RotateLeftGeometry}" />
	</Style>
	<Style x:Key="CalendarPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource CalendarGeometry}" />
	</Style>
	<Style x:Key="DeletePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource DeleteGeometry}" />
	</Style>
	<Style x:Key="ClosePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource CloseGeometry}" />
	</Style>
	<Style x:Key="DownPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource DownGeometry}" />
	</Style>
	<Style x:Key="ClockPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource ClockGeometry}" />
	</Style>
	<Style x:Key="LeftPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource LeftGeometry}" />
	</Style>
	<Style x:Key="RightPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
		<Setter Property="RenderTransform">
			<Setter.Value>
				<TransformGroup>
					<ScaleTransform ScaleY="1" ScaleX="-1" />
					<SkewTransform AngleY="0" AngleX="0" />
					<RotateTransform Angle="0" />
					<TranslateTransform />
				</TransformGroup>
			</Setter.Value>
		</Setter>
		<Setter Property="Data" Value="{StaticResource LeftGeometry}" />
	</Style>
	<Style x:Key="UpDownPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="Path">
		<Setter Property="Data" Value="{StaticResource UpDownGeometry}" />
	</Style>
	<Style x:Key="BorderRegion" TargetType="Border">
		<Setter Property="CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
	</Style>
	<Style x:Key="BorderTipBaseStyle" TargetType="Border">
		<Setter Property="CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="BorderThickness" Value="5,0,0,0" />
	</Style>
	<Style x:Key="BorderTipPrimary" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="Border">
		<Setter Property="Background" Value="{DynamicResource LightPrimaryBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="BorderTipDanger" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="Border">
		<Setter Property="Background" Value="{DynamicResource LightDangerBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="BorderTipWarning" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="Border">
		<Setter Property="Background" Value="{DynamicResource LightWarningBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="BorderTipInfo" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="Border">
		<Setter Property="Background" Value="{DynamicResource LightInfoBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="BorderTipSuccess" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="Border">
		<Setter Property="Background" Value="{DynamicResource LightSuccessBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="BorderVerticallySplitter" TargetType="Border">
		<Setter Property="Width" Value="1" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Background" Value="{DynamicResource ThirdlyTextBrush}" />
	</Style>
	<Style x:Key="BorderHorizontallySplitter" TargetType="Border">
		<Setter Property="Height" Value="1" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Background" Value="{DynamicResource ThirdlyTextBrush}" />
	</Style>
	<Style x:Key="BorderClip" TargetType="Border">
		<Setter Property="Clip">
			<Setter.Value>
				<MultiBinding Converter="{StaticResource BorderClipConverter}">
					<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
					<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
					<Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
				</MultiBinding>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="BorderCircularClip" BasedOn="{StaticResource BorderCircular}" TargetType="Border">
		<Setter Property="Clip">
			<Setter.Value>
				<MultiBinding Converter="{StaticResource BorderCircularClipConverter}">
					<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
					<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
					<Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
				</MultiBinding>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="hc:FlipNumber">
		<Setter Property="FontSize" Value="70" />
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="Background" Value="{DynamicResource TitleBrush}" />
		<Setter Property="Width" Value="120" />
		<Setter Property="Height" Value="180" />
		<Setter Property="Camera">
			<Setter.Value>
				<PerspectiveCamera Position="0 0 120" LookDirection="0 0 -1" />
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RectangleFocusVisual" TargetType="Rectangle">
		<Setter Property="Margin" Value="-2" />
		<Setter Property="Opacity" Value=".6" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}" />
		<Setter Property="StrokeThickness" Value="2" />
		<Setter Property="StrokeDashArray" Value="1 1" />
	</Style>
	<Style x:Key="RectangleFocusVisualCircular" BasedOn="{StaticResource RectangleFocusVisual}" TargetType="Rectangle">
		<Setter Property="hc:RectangleAttach.Circular" Value="True" />
	</Style>
	<Style x:Key="TextBoxBaseBaseStyle" TargetType="TextBoxBase">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Padding" Value="2,7" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBoxBase">
					<Border x:Name="border" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Focusable="false" HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}}" VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="border" Value="0.4" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RichTextBoxBaseStyle" BasedOn="{StaticResource TextBoxBaseBaseStyle}" TargetType="RichTextBox">
		<Setter Property="MinWidth" Value="10" />
	</Style>
	<Style BasedOn="{StaticResource RichTextBoxBaseStyle}" TargetType="RichTextBox" />
	<Style x:Key="MaskRect4ScreenshotStyle" TargetType="Rectangle">
		<Setter Property="IsHitTestVisible" Value="False" />
		<Setter Property="Fill" Value="{DynamicResource DarkOpacityBrush}" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
	</Style>
	<Style x:Key="Window4ScreenshotStyle" TargetType="hc:ScreenshotWindow">
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="WindowStyle" Value="None" />
		<Setter Property="WindowState" Value="Maximized" />
		<Setter Property="Topmost" Value="True" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
		<Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ScreenshotWindow">
					<AdornerDecorator>
						<hc:SimplePanel>
							<InkCanvas EditingMode="None" Name="PART_Canvas" Background="Transparent" />
							<Rectangle Name="PART_MaskAreaLeft" Style="{StaticResource MaskRect4ScreenshotStyle}" />
							<Rectangle Name="PART_MaskAreaTop" Style="{StaticResource MaskRect4ScreenshotStyle}" />
							<Rectangle Name="PART_MaskAreaRight" Style="{StaticResource MaskRect4ScreenshotStyle}" />
							<Rectangle Name="PART_MaskAreaBottom" Style="{StaticResource MaskRect4ScreenshotStyle}" />
							<Border Name="PART_TargetArea" Style="{StaticResource TargetArea4ScreenshotStyle}">
								<hc:SimplePanel>
									<Rectangle hc:TipElement.Placement="LeftTop" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<Rectangle hc:TipElement.Placement="Top" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<Rectangle hc:TipElement.Placement="RightTop" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<Rectangle hc:TipElement.Placement="Right" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<Rectangle hc:TipElement.Placement="RightBottom" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<Rectangle hc:TipElement.Placement="Bottom" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<Rectangle hc:TipElement.Placement="LeftBottom" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<Rectangle hc:TipElement.Placement="Left" Style="{StaticResource SnapRect4ScreenshotStyle}" />
									<TextBlock Text="{TemplateBinding SizeStr}" Background="#CC212121" Foreground="White" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="8,2" />
								</hc:SimplePanel>
							</Border>
							<Border x:Name="PART_Magnifier" IsHitTestVisible="False" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top" Width="122" Height="122" BorderThickness="1" BorderBrush="#FF333333" CornerRadius="1">
								<Border.Effect>
									<DropShadowEffect BlurRadius="2" Opacity=".2" Direction="-45" RenderingBias="Performance" ShadowDepth="3" />
								</Border.Effect>
								<hc:SimplePanel>
									<Border Margin="0,0,0,32" Background="{TemplateBinding PreviewBrush}" BorderThickness="2" BorderBrush="White">
										<hc:SimplePanel>
											<Path Data="M56,0 L60,0 60,40 116,40 116,44 60,44 60,84 56,84 56,44 0,44 0,40 56,40 z" Fill="#CC4CC6FF" />
										</hc:SimplePanel>
									</Border>
									<Border Height="32" VerticalAlignment="Bottom" Background="#CC000000">
										<StackPanel VerticalAlignment="Center" Margin="5,0,0,0">
											<TextBlock Foreground="White" Text="{TemplateBinding SizeStr}" />
										</StackPanel>
									</Border>
								</hc:SimplePanel>
							</Border>
						</hc:SimplePanel>
					</AdornerDecorator>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Style="{StaticResource RectangleFocusVisual}" RadiusX="4" RadiusY="4" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FocusVisualRadius0">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Style="{StaticResource RectangleFocusVisual}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FocusVisualMargin0">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FocusVisualRadius0Margin0">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="BaseStyle" TargetType="Control">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="FontSize" Value="{StaticResource TextFontSize}" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
	</Style>
	<Style x:Key="ButtonBaseBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="ButtonBase">
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<Style x:Key="ButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<hc:SimplePanel>
						<Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
						<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
								<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
								<ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</StackPanel>
						</Border>
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="ContentPresenterMain" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" Value=".9" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Opacity" Value=".6" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ButtonDashedBaseStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<hc:DashedBorder BorderDashArray="3,2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
							<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
							<ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</StackPanel>
					</hc:DashedBorder>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="ContentPresenterMain" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ButtonGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="Margin" Value="-1,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border x:Name="BorderRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
							<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
							<ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="contentPresenter" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
			<DataTrigger Binding="{Binding Orientation,RelativeSource={RelativeSource  AncestorType=hc:ButtonGroup}}" Value="Vertical">
				<Setter Property="Margin" Value="0,-1,0,0" />
			</DataTrigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TextBlockBaseStyle" TargetType="TextBlock">
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
	</Style>
	<Style x:Key="TextBlockBoldBaseStyle" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="FontWeight" Value="Bold" />
	</Style>
	<Style x:Key="LabelBaseStyle" TargetType="Label">
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Label">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="SliderThumb" TargetType="Thumb">
		<hc:AxleCanvas>
			<Border Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="CompareSliderThumbHorizontal" TargetType="Thumb">
		<ControlTemplate.Resources>
			<Storyboard x:Key="Storyboard1">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="PathLeft">
					<EasingDoubleKeyFrame KeyTime="0" Value="-2" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="PathRight">
					<EasingDoubleKeyFrame KeyTime="0" Value="2" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="Storyboard2">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="PathLeft">
					<EasingDoubleKeyFrame KeyTime="0" Value="0" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="PathRight">
					<EasingDoubleKeyFrame KeyTime="0" Value="0" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<hc:SimplePanel>
			<Border Width="1" HorizontalAlignment="Center">
				<Border.Background>
					<DrawingBrush RenderOptions.CachingHint="Cache" Viewport="0,0,1,8" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
						<DrawingBrush.Drawing>
							<DrawingGroup>
								<GeometryDrawing Brush="{DynamicResource BorderBrush}">
									<GeometryDrawing.Geometry>
										<GeometryGroup>
											<RectangleGeometry Rect="0,0,1,4" />
										</GeometryGroup>
									</GeometryDrawing.Geometry>
								</GeometryDrawing>
							</DrawingGroup>
						</DrawingBrush.Drawing>
					</DrawingBrush>
				</Border.Background>
			</Border>
			<Border x:Name="grip" Width="30" Height="30" CornerRadius="15" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="White">
				<hc:SimplePanel Width="30" Height="30" Margin="-1,-1,0,0">
					<Path x:Name="PathLeft" Data="{StaticResource LeftGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="6,8" HorizontalAlignment="Left" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
						<Path.RenderTransform>
							<TransformGroup>
								<TranslateTransform />
							</TransformGroup>
						</Path.RenderTransform>
					</Path>
					<Path x:Name="PathRight" Data="{StaticResource RightGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="6,8" HorizontalAlignment="Right" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
						<Path.RenderTransform>
							<TransformGroup>
								<TranslateTransform />
							</TransformGroup>
						</Path.RenderTransform>
					</Path>
				</hc:SimplePanel>
			</Border>
		</hc:SimplePanel>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" TargetName="grip" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Stroke" TargetName="PathLeft" Value="White" />
				<Setter Property="Stroke" TargetName="PathRight" Value="White" />
			</Trigger>
			<Trigger Property="IsDragging" Value="true">
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="CompareSliderHorizontal" TargetType="hc:CompareSlider">
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
			<hc:CompareTrack Margin="-14,0,-15,0" x:Name="PART_Track">
				<Track.DecreaseRepeatButton>
					<RepeatButton Margin="14,0,-15,0" Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
						<RepeatButton.Content>
							<Border HorizontalAlignment="Left" Width="{TemplateBinding Width}">
								<ContentPresenter Content="{TemplateBinding TargetContent}" />
							</Border>
						</RepeatButton.Content>
					</RepeatButton>
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Margin="-15,0,15,0" Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
						<RepeatButton.Content>
							<Border HorizontalAlignment="Right" Width="{TemplateBinding ActualWidth}">
								<ContentPresenter Content="{TemplateBinding SourceContent}" />
							</Border>
						</RepeatButton.Content>
					</RepeatButton>
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="Thumb" Focusable="False" OverridesDefaultStyle="True" Template="{StaticResource CompareSliderThumbHorizontal}" Width="30" Margin="0,0,0,0" />
				</Track.Thumb>
			</hc:CompareTrack>
		</Border>
	</ControlTemplate>
	<ControlTemplate x:Key="CompareSliderThumbVertical" TargetType="Thumb">
		<ControlTemplate.Resources>
			<Storyboard x:Key="Storyboard1">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="PathUp">
					<EasingDoubleKeyFrame KeyTime="0" Value="-2" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="PathDown">
					<EasingDoubleKeyFrame KeyTime="0" Value="2" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="Storyboard2">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="PathUp">
					<EasingDoubleKeyFrame KeyTime="0" Value="0" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="PathDown">
					<EasingDoubleKeyFrame KeyTime="0" Value="0" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<hc:SimplePanel>
			<Border Height="1" VerticalAlignment="Center">
				<Border.Background>
					<DrawingBrush RenderOptions.CachingHint="Cache" Viewport="0,0,8,1" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
						<DrawingBrush.Drawing>
							<DrawingGroup>
								<GeometryDrawing Brush="{DynamicResource BorderBrush}">
									<GeometryDrawing.Geometry>
										<GeometryGroup>
											<RectangleGeometry Rect="0,0,4,1" />
										</GeometryGroup>
									</GeometryDrawing.Geometry>
								</GeometryDrawing>
							</DrawingGroup>
						</DrawingBrush.Drawing>
					</DrawingBrush>
				</Border.Background>
			</Border>
			<Border x:Name="grip" Width="30" Height="30" CornerRadius="15" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="White">
				<hc:SimplePanel Width="30" Height="30" Margin="-1,-1,0,0">
					<Path x:Name="PathUp" Data="{StaticResource UpGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="9,6" VerticalAlignment="Top" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
						<Path.RenderTransform>
							<TransformGroup>
								<TranslateTransform />
							</TransformGroup>
						</Path.RenderTransform>
					</Path>
					<Path x:Name="PathDown" Data="{StaticResource DownGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="9,6" VerticalAlignment="Bottom" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
						<Path.RenderTransform>
							<TransformGroup>
								<TranslateTransform />
							</TransformGroup>
						</Path.RenderTransform>
					</Path>
				</hc:SimplePanel>
			</Border>
		</hc:SimplePanel>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true" SourceName="grip">
				<Setter Property="Background" TargetName="grip" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Stroke" TargetName="PathUp" Value="White" />
				<Setter Property="Stroke" TargetName="PathDown" Value="White" />
			</Trigger>
			<Trigger Property="IsDragging" Value="true">
				<Setter Property="Background" TargetName="grip" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Stroke" TargetName="PathUp" Value="White" />
				<Setter Property="Stroke" TargetName="PathDown" Value="White" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="CompareSliderVertical" TargetType="hc:CompareSlider">
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
			<hc:CompareTrack Margin="0,-14,0,-15" x:Name="PART_Track">
				<Track.DecreaseRepeatButton>
					<RepeatButton Margin="0,-15,0,15" Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
						<RepeatButton.Content>
							<Border VerticalAlignment="Bottom" Height="{TemplateBinding Height}">
								<ContentPresenter Content="{TemplateBinding TargetContent}" />
							</Border>
						</RepeatButton.Content>
					</RepeatButton>
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Margin="0,14,0,-15" Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
						<RepeatButton.Content>
							<Border VerticalAlignment="Top" Height="{TemplateBinding Height}">
								<ContentPresenter Content="{TemplateBinding SourceContent}" />
							</Border>
						</RepeatButton.Content>
					</RepeatButton>
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="Thumb" Focusable="False" Height="30" OverridesDefaultStyle="True" Template="{StaticResource CompareSliderThumbVertical}" VerticalAlignment="Top" />
				</Track.Thumb>
			</hc:CompareTrack>
		</Border>
	</ControlTemplate>
	<Style x:Key="CompareSliderBaseStyle" TargetType="hc:CompareSlider">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="MinWidth" Value="30" />
		<Setter Property="MinHeight" Value="30" />
		<Setter Property="Template" Value="{StaticResource CompareSliderHorizontal}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{StaticResource CompareSliderVertical}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="PreviewSliderThumb" TargetType="Thumb">
		<Border Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="PreviewSliderHorizontal" TargetType="hc:PreviewSlider">
		<hc:SimplePanel>
			<Border x:Name="TrackBackground" Background="{TemplateBinding Background}" Height="2" VerticalAlignment="center" Margin="9,0" />
			<Track Margin="9,0" x:Name="PART_Track">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}" Style="{StaticResource PreviewSliderRepeatButtonHorizontalStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource PreviewSliderRepeatButtonHorizontalStyle}" />
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb Margin="-9,0" x:Name="PART_Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource PreviewSliderThumb}" VerticalAlignment="Center" Width="18" />
				</Track.Thumb>
			</Track>
		</hc:SimplePanel>
	</ControlTemplate>
	<ControlTemplate x:Key="PreviewSliderVertical" TargetType="hc:PreviewSlider">
		<hc:SimplePanel>
			<Border x:Name="TrackBackground" Background="{TemplateBinding Background}" Width="2" HorizontalAlignment="center" Margin="0,9" />
			<Track Margin="0,9" x:Name="PART_Track">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}" Style="{StaticResource PreviewSliderRepeatButtonVerticalStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource PreviewSliderRepeatButtonVerticalStyle}" />
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb Margin="0,-9" x:Name="PART_Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource PreviewSliderThumb}" HorizontalAlignment="Center" Width="18" />
				</Track.Thumb>
			</Track>
		</hc:SimplePanel>
	</ControlTemplate>
	<Style x:Key="PreviewSliderBaseStyle" TargetType="hc:PreviewSlider">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="IsMoveToPointEnabled" Value="True" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template" Value="{StaticResource PreviewSliderHorizontal}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{StaticResource PreviewSliderVertical}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="RangeSliderThumb" TargetType="hc:RangeThumb">
		<Border Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ToggleButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="ToggleButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<hc:SimplePanel>
						<Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
						<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
								<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
								<ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</StackPanel>
						</Border>
						<Border Margin="-1" Visibility="Collapsed" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="BorderChecked" BorderThickness="4" BorderBrush="{DynamicResource DarkMaskBrush}" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="BorderChecked" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="ContentPresenterMain" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" Value=".9" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Opacity" Value=".6" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ToggleButtonSwitchBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="ToggleButton">
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="6,0,0,0" />
		<Setter Property="Width" Value="36" />
		<Setter Property="Height" Value="22" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<ControlTemplate.Resources>
						<Storyboard x:Key="StoryboardChecked">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="thumb">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="14">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="lightBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="innerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="innerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="StoryboardUnChecked">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="thumb">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="lightBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="innerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="innerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Viewbox>
						<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Border Height="22" Width="36" x:Name="backBorder" Background="{DynamicResource BorderBrush}" CornerRadius="11" />
							<Border Grid.Column="0" Height="22" Width="36" Opacity="0" x:Name="lightBorder" Background="{DynamicResource PrimaryBrush}" CornerRadius="11" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
							<Border Grid.Column="0" Height="20" Margin="1" Background="{TemplateBinding Background}" CornerRadius="11" Name="innerBorder" RenderTransformOrigin=".8,0.5">
								<Border.RenderTransform>
									<TransformGroup>
										<ScaleTransform />
									</TransformGroup>
								</Border.RenderTransform>
							</Border>
							<hc:SimplePanel Grid.Column="0" Margin="1">
								<Border HorizontalAlignment="Left" CornerRadius="10" Name="thumb" Effect="{StaticResource EffectShadow2}" Background="White" Width="20" Height="20" RenderTransformOrigin="0.5,0.5">
									<Border.RenderTransform>
										<TransformGroup>
											<TranslateTransform />
										</TransformGroup>
									</Border.RenderTransform>
								</Border>
							</hc:SimplePanel>
							<ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Grid>
					</Viewbox>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="Visibility" TargetName="contentPresenter" Value="Visible" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardChecked}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}" />
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToggleButtonIconBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="ToggleButton">
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="Width" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="8" />
		<Setter Property="hc:IconSwitchElement.Geometry" Value="{x:Null}" />
		<Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{x:Null}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<hc:SimplePanel>
						<Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
						<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
								<Path x:Name="PathIcon" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconSwitchElement.Geometry}" />
							</ContentControl>
						</Border>
						<Border Visibility="Collapsed" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="BorderChecked" BorderThickness="4" BorderBrush="{TemplateBinding BorderBrush}" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="PathIcon" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" Value=".9" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Opacity" Value=".6" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ToggleButtonGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="Margin" Value="-1,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border x:Name="BorderRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
							<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
							<ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="BorderBrush" Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="Background" Value="{Binding Path=(hc:VisualElement.HighlightBackground),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="TextElement.Foreground" Value="{Binding Path=(hc:VisualElement.HighlightForeground),RelativeSource={RelativeSource TemplatedParent}}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="contentPresenter" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
			</Trigger>
			<DataTrigger Binding="{Binding Orientation,RelativeSource={RelativeSource  AncestorType=hc:ButtonGroup}}" Value="Vertical">
				<Setter Property="Margin" Value="0,-1,0,0" />
			</DataTrigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ScrollBarBaseThumbVertical" TargetType="Thumb">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<ControlTemplate.Resources>
						<Storyboard x:Key="Storyboard1">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="8" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="Storyboard2">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="2" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="-2" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border Width="{TemplateBinding Width}" Background="Transparent">
						<Rectangle x:Name="rectangle" RadiusX="1" RadiusY="1" HorizontalAlignment="Right" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="2" Fill="{TemplateBinding Background}">
							<Rectangle.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="-2" />
								</TransformGroup>
							</Rectangle.RenderTransform>
						</Rectangle>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}" />
						</Trigger>
						<Trigger Property="IsDragging" Value="true">
							<Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}" />
						</Trigger>
						<EventTrigger RoutedEvent="MouseEnter">
							<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
						</EventTrigger>
						<EventTrigger RoutedEvent="MouseLeave">
							<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarBaseThumbHorizontal" TargetType="Thumb">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<ControlTemplate.Resources>
						<Storyboard x:Key="Storyboard1">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="8" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="Storyboard2">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="2" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="-2" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border Height="{TemplateBinding Height}" Background="Transparent">
						<Rectangle x:Name="rectangle" RadiusX="4" RadiusY="4" VerticalAlignment="Bottom" Height="2" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" Fill="{TemplateBinding Background}">
							<Rectangle.RenderTransform>
								<TransformGroup>
									<TranslateTransform Y="-2" />
								</TransformGroup>
							</Rectangle.RenderTransform>
						</Rectangle>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}" />
						</Trigger>
						<Trigger Property="IsDragging" Value="true">
							<Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}" />
						</Trigger>
						<EventTrigger RoutedEvent="MouseEnter">
							<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
						</EventTrigger>
						<EventTrigger RoutedEvent="MouseLeave">
							<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarBaseStyle" TargetType="ScrollBar">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="false" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Width" Value="8" />
		<Setter Property="MinWidth" Value="8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ScrollBar">
					<hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="true">
						<Border Background="{TemplateBinding Background}" />
						<Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}" />
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}" />
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Background="{TemplateBinding Foreground}" Style="{StaticResource ScrollBarBaseThumbVertical}" />
							</Track.Thumb>
						</Track>
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto" />
				<Setter Property="MinWidth" Value="0" />
				<Setter Property="Height" Value="8" />
				<Setter Property="MinHeight" Value="8" />
				<Setter Property="BorderThickness" Value="0,1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ScrollBar">
							<hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="true">
								<Border Background="{TemplateBinding Background}" />
								<Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}" />
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}" />
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Background="{TemplateBinding Foreground}" Style="{StaticResource ScrollBarBaseThumbHorizontal}" />
									</Track.Thumb>
								</Track>
							</hc:SimplePanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="ScrollViewerNativeBaseControlTemplate" TargetType="ScrollViewer">
		<ControlTemplate.Resources>
			<Storyboard x:Key="Storyboard1">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="Storyboard2">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="Grid" Background="{TemplateBinding Background}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="*" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
			<ScrollBar x:Name="PART_VerticalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" />
			<ScrollBar x:Name="PART_HorizontalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ScrollViewerNativeBaseStyle" TargetType="ScrollViewer">
		<Setter Property="VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template" Value="{StaticResource ScrollViewerNativeBaseControlTemplate}" />
	</Style>
	<ControlTemplate x:Key="ScrollViewerBaseControlTemplate" TargetType="hc:ScrollViewer">
		<ControlTemplate.Resources>
			<Storyboard x:Key="Storyboard1">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="Storyboard2">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
					<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="Grid" Background="{TemplateBinding Background}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="*" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
			<ScrollBar x:Name="PART_VerticalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" />
			<ScrollBar x:Name="PART_HorizontalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ScrollViewerBaseStyle" TargetType="hc:ScrollViewer">
		<Setter Property="VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template" Value="{StaticResource ScrollViewerBaseControlTemplate}" />
	</Style>
	<Style x:Key="RepeatButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<hc:SimplePanel>
						<Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
						<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
								<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
								<ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</StackPanel>
						</Border>
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="ContentPresenterMain" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" Value=".9" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Opacity" Value=".6" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="RepeatButtonDashedBaseStyle" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<hc:DashedBorder BorderDashArray="3,2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
							<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
							<ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</StackPanel>
					</hc:DashedBorder>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="ContentPresenterMain" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="GroupBoxBaseStyle" TargetType="GroupBox">
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="hc:TitleElement.Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="hc:TitleElement.TitlePlacement" Value="Top" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="4" />
		<Setter Property="Template" Value="{StaticResource GroupBoxBaseTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource GroupBoxBaseLeftTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="GroupBoxOriginalTopTemplate" TargetType="GroupBox">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
			</Grid.RowDefinitions>
			<StackPanel Orientation="Horizontal" Margin="8,6">
				<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="1,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Row="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
				<ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="GroupBoxOriginalLeftTemplate" TargetType="GroupBox">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,8,6,8">
				<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Column="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
				<ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
		</Grid>
	</ControlTemplate>
	<Style x:Key="GroupBoxOriginalBaseStyle" BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="GroupBox">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template" Value="{StaticResource GroupBoxOriginalTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource GroupBoxOriginalLeftTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="GroupBoxTabBaseStyle" BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="GroupBox">
		<Setter Property="Template" Value="{StaticResource GroupBoxTabTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource GroupBoxTabLeftTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ButtonGroupBaseStyle" TargetType="hc:ButtonGroup">
		<Setter Property="ItemContainerStyleSelector" Value="{StaticResource ButtonGroupItemStyleSelector}" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ItemsPanel" Value="{StaticResource ButtonGroupHorizontalItemsPanelTemplate}" />
		<Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource RegionBrush}" />
		<Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource PrimaryBrush}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="ItemsPanel" Value="{StaticResource ButtonGroupVerticalItemsPanelTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ProgressBarBaseStyle" TargetType="ProgressBar">
		<Setter Property="hc:VisualElement.Text">
			<Setter.Value>
				<MultiBinding Converter="{StaticResource Number2PercentageConverter}" StringFormat="{}{0:F0} %">
					<Binding Path="Value" RelativeSource="{RelativeSource Self}" />
					<Binding Path="Maximum" RelativeSource="{RelativeSource Self}" />
				</MultiBinding>
			</Setter.Value>
		</Setter>
		<Setter Property="Height" Value="20" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ProgressBar">
					<ControlTemplate.Resources>
						<Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
								<EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
								<EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
							</DoubleAnimationUsingKeyFrames>
							<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
								<EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
								<EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
								<EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
							</PointAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border x:Name="TemplateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<hc:SimplePanel>
							<Rectangle x:Name="PART_Track" />
							<TextBlock Visibility="{Binding Visibility,ElementName=PART_GlowRect}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{Binding Path=(hc:VisualElement.Text),RelativeSource={RelativeSource TemplatedParent}}" />
							<Border Style="{StaticResource BorderClip}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="PART_Indicator" HorizontalAlignment="Left">
								<hc:SimplePanel>
									<Border x:Name="Indicator" Background="{TemplateBinding Foreground}">
										<Border Width="{Binding ActualWidth,ElementName=TemplateRoot}">
											<TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{DynamicResource TextIconBrush}" Text="{Binding Path=(hc:VisualElement.Text),RelativeSource={RelativeSource TemplatedParent}}" />
										</Border>
									</Border>
									<Rectangle x:Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100" />
									<Rectangle x:Name="Animation" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
										<Rectangle.RenderTransform>
											<TransformGroup>
												<ScaleTransform />
											</TransformGroup>
										</Rectangle.RenderTransform>
									</Rectangle>
								</hc:SimplePanel>
							</Border>
						</hc:SimplePanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Height" Value="{x:Static system:Double.NaN}" />
							<Setter Property="LayoutTransform" TargetName="TemplateRoot">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
							</Trigger.EnterActions>
							<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
							<Setter Property="Visibility" TargetName="PART_GlowRect" Value="Collapsed" />
							<Setter Property="Visibility" TargetName="Animation" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ProgressBarStripeBaseStyle" TargetType="ProgressBar">
		<Setter Property="Height" Value="20" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ProgressBar">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnLoaded">
							<DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(Border.Background).(Brush.Transform).(TransformGroup.Children)[1].(TranslateTransform.X)" Storyboard.TargetName="Indicator">
								<LinearDoubleKeyFrame KeyTime="0" Value="0" />
								<LinearDoubleKeyFrame KeyTime="0:0:.25" Value="21" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<hc:SimplePanel x:Name="TemplateRoot" SnapsToDevicePixels="true">
						<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
						<Rectangle x:Name="PART_Track" />
						<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
							<Border x:Name="Indicator" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Foreground}" />
						</Decorator>
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Height" Value="{x:Static system:Double.NaN}" />
							<Setter Property="LayoutTransform" TargetName="TemplateRoot">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="Indicator">
							<BeginStoryboard Storyboard="{StaticResource OnLoaded}" />
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="CircleProgressBarIndeterminateTemplate" TargetType="hc:CircleProgressBar">
		<ControlTemplate.Resources>
			<Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
				<DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" Storyboard.TargetName="TemplateRoot">
					<LinearDoubleKeyFrame KeyTime="0:0:1.568" Value="360" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" Storyboard.TargetName="arc">
					<SplineDoubleKeyFrame KeyTime="0" Value="0" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="135" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="270" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.999" Value="405" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:2.666" Value="540" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:3.333" Value="675" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:3.999" Value="810" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:4.666" Value="945" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:5.332" Value="1080" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(shapes:Arc.StartAngle)" Storyboard.TargetName="arc">
					<SplineDoubleKeyFrame KeyTime="0" Value="-5" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="-130" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="-5" />
				</DoubleAnimationUsingKeyFrames>
				<DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(shapes:Arc.EndAngle)" Storyboard.TargetName="arc">
					<SplineDoubleKeyFrame KeyTime="0" Value="5" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="130" />
					<SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="5" />
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<hc:SimplePanel x:Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
			<hc:SimplePanel.RenderTransform>
				<TransformGroup>
					<RotateTransform />
				</TransformGroup>
			</hc:SimplePanel.RenderTransform>
			<shapes:Arc ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" EndAngle="360" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="0" />
			<shapes:Arc RenderTransformOrigin="0.5,0.5" StartAngle="-5" EndAngle="5" ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" Width="{TemplateBinding ActualWidth}" StrokeThickness="0" Height="{TemplateBinding ActualHeight}" x:Name="arc" Fill="{TemplateBinding Foreground}">
				<shapes:Arc.RenderTransform>
					<TransformGroup>
						<RotateTransform />
					</TransformGroup>
				</shapes:Arc.RenderTransform>
			</shapes:Arc>
		</hc:SimplePanel>
		<ControlTemplate.Triggers>
			<Trigger Property="IsIndeterminate" Value="true">
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
				</Trigger.EnterActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ProgressBarCircleBaseStyle" TargetType="hc:CircleProgressBar">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Height" Value="100" />
		<Setter Property="Width" Value="100" />
		<Setter Property="ArcThickness" Value="4" />
		<Setter Property="Text" Value="{Binding Value,RelativeSource={RelativeSource Self},StringFormat={}{0:F0} %}" />
		<Setter Property="Template" Value="{StaticResource CircleProgressBarTemplate}" />
		<Style.Triggers>
			<Trigger Property="IsIndeterminate" Value="True">
				<Setter Property="Template" Value="{StaticResource CircleProgressBarIndeterminateTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ProgressBarWaveBaseStyle" TargetType="hc:WaveProgressBar">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="Width" Value="100" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Text" Value="{Binding Value,RelativeSource={RelativeSource Self},StringFormat={}{0:F0} %}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:WaveProgressBar">
					<ControlTemplate.Resources>
						<Storyboard x:Key="StoryboardOnLoaded" RepeatBehavior="Forever">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="PART_Wave">
								<EasingDoubleKeyFrame KeyTime="0:0:2" Value="-400" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<StackPanel>
						<Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
							<Viewbox>
								<Border x:Name="PART_Clip" Style="{StaticResource BorderCircularClip}" CornerRadius="100" Width="200" Height="200">
									<Path x:Name="PART_Wave" Stroke="{TemplateBinding WaveStroke}" StrokeThickness="{TemplateBinding WaveThickness}" HorizontalAlignment="Left" VerticalAlignment="Top" Width="600" Height="250" Fill="{TemplateBinding WaveFill}" Stretch="Fill" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False" Margin="0,0,-400,-20">
										<Path.Data>
											<PathGeometry>
												<PathFigure StartPoint="0,1">
													<PolyBezierSegment Points="0.5,1 0.5,0 1,0" />
													<PolyBezierSegment Points="1.5,0 1.5,1 2,1" />
													<PolyBezierSegment Points="2.5,1 2.5,0 3,0" />
													<PolyLineSegment Points="3,0 3,10, 0,10 0,1" />
												</PathFigure>
											</PathGeometry>
										</Path.Data>
									</Path>
								</Border>
							</Viewbox>
						</Border>
						<TextBlock Margin="0,10,0,0" Visibility="{Binding ShowText,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="PART_Wave">
							<BeginStoryboard Name="BeginStoryboardWave" Storyboard="{StaticResource StoryboardOnLoaded}" />
						</EventTrigger>
						<EventTrigger RoutedEvent="FrameworkElement.Unloaded" SourceName="PART_Wave">
							<StopStoryboard BeginStoryboardName="BeginStoryboardWave" />
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CheckBoxBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="CheckBox">
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="-4" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="6,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CheckBox">
					<ControlTemplate.Resources>
						<Storyboard x:Key="StoryboardCheckedTrue">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.StrokeDashOffset)" Storyboard.TargetName="path">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="StoryboardCheckedFalse">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.StrokeDashOffset)" Storyboard.TargetName="path">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="8" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border Height="18" Width="18" x:Name="checkBoxBorder" Background="{TemplateBinding Background}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
						<hc:SimplePanel Grid.Column="0" Height="18" Width="18" x:Name="markGrid">
							<Path FlowDirection="LeftToRight" UseLayoutRounding="True" x:Name="path" StrokeDashOffset="8" StrokeDashArray="8,8" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
							<Rectangle x:Name="indeterminateMark" RadiusX="2" RadiusY="2" Fill="{DynamicResource PrimaryBrush}" Margin="2" Opacity="0" />
						</hc:SimplePanel>
						<ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="Visibility" TargetName="contentPresenter" Value="Visible" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="true" />
								<Condition Property="IsPressed" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Opacity" Value=".8" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="false" />
								<Condition Property="IsPressed" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</MultiTrigger>
						<Trigger Property="IsChecked" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}" />
							</Trigger.ExitActions>
							<Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
							<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
							<Setter Property="BorderBrush" Value="{DynamicResource DarkPrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Stroke" Value="{DynamicResource BorderBrush}" TargetName="path" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RadioButtonBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="RadioButton">
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="-4" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="6,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<ControlTemplate.Resources>
						<Storyboard x:Key="StoryboardCheckedTrue">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="StoryboardCheckedFalse">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border Height="18" Width="18" x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Ellipse x:Name="optionMark" Fill="White" MinWidth="6" MinHeight="6" RenderTransformOrigin="0.5,0.5">
								<Ellipse.RenderTransform>
									<TransformGroup>
										<ScaleTransform />
									</TransformGroup>
								</Ellipse.RenderTransform>
							</Ellipse>
						</Border>
						<ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="Visibility" TargetName="contentPresenter" Value="Visible" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="true" />
								<Condition Property="IsPressed" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Opacity" Value=".8" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="false" />
								<Condition Property="IsPressed" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</MultiTrigger>
						<Trigger Property="IsChecked" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}" />
							</Trigger.ExitActions>
							<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
							<Setter Property="BorderBrush" Value="{DynamicResource DarkPrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RadioButtonIconBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="RadioButton">
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualRadius0}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="hc:VisualElement.HighlightBrush" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="hc:IconElement.Width" Value="16" />
		<Setter Property="hc:IconElement.Height" Value="16" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<Border Name="BorderHighlight" BorderThickness="3,0,0,0" BorderBrush="Transparent">
							<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
								<Path x:Name="PathMain" Height="{Binding Path=(hc:IconElement.Height),RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Path=(hc:IconElement.Width),RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
								<ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</StackPanel>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="BorderBrush" Value="{Binding Path=(hc:VisualElement.HighlightBrush),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderHighlight" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" Value=".9" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Opacity" Value=".6" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="RadioGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="RadioButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="Margin" Value="-1,0,0,0" />
		<Setter Property="hc:IconElement.Width" Value="16" />
		<Setter Property="hc:IconElement.Height" Value="16" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<Border x:Name="BorderRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
							<Path x:Name="PathMain" Height="{Binding Path=(hc:IconElement.Height),RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Path=(hc:IconElement.Width),RelativeSource={RelativeSource TemplatedParent}}" Fill="{Binding Path=(TextElement.Foreground),ElementName=contentPresenter}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
							<ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="BorderBrush" Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="Background" Value="{Binding Path=(hc:VisualElement.HighlightBackground),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="TextElement.Foreground" Value="{Binding Path=(hc:VisualElement.HighlightForeground),RelativeSource={RelativeSource TemplatedParent}}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="contentPresenter" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
			</Trigger>
			<DataTrigger Binding="{Binding Orientation,RelativeSource={RelativeSource  AncestorType=hc:ButtonGroup}}" Value="Vertical">
				<Setter Property="Margin" Value="0,-1,0,0" />
			</DataTrigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ButtonDefault" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource ButtonDefault}" TargetType="Button" />
	<Style x:Key="ButtonPrimary" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="ButtonSuccess" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ButtonInfo" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ButtonWarning" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ButtonDanger" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="ButtonIcon" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Data="{TemplateBinding hc:IconElement.Geometry}" />
						</ContentControl>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ButtonIconCircular" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Width" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Data="{TemplateBinding hc:IconElement.Geometry}" />
						</ContentControl>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ButtonDashed" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ButtonDashedPrimary" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="ButtonDashedSuccess" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ButtonDashedInfo" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ButtonDashedWarning" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ButtonDashedDanger" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="ButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="Button">
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border x:Name="Chrome" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value=".9" />
							<Setter Property="Background" TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseHoverBackground),RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" Value=".6" />
							<Setter Property="Background" TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseDownBackground),RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ButtonGroupItemDefault" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="Button" />
	<Style x:Key="ButtonGroupItemHorizontalFirst" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="Button">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="ButtonGroupItemHorizontalLast" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="Button">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
	</Style>
	<Style x:Key="ButtonGroupItemSingle" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="Button">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
	</Style>
	<Style x:Key="ButtonGroupItemVerticalFirst" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="Button">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="ButtonGroupItemVerticalLast" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="Button">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
	</Style>
	<Style x:Key="TextBlockDefault" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock" />
	<Style x:Key="TextBlockDefaultAccent" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
	</Style>
	<Style x:Key="TextBlockDefaultPrimary" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="TextBlockDefaultDanger" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="TextBlockDefaultWarning" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="TextBlockDefaultInfo" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="TextBlockDefaultSuccess" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="TextBlockDefaultSecLight" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
	</Style>
	<Style x:Key="TextBlockDefaultThiLight" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
	</Style>
	<Style x:Key="TextBlockLarge" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
	</Style>
	<Style x:Key="TextBlockTitle" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="FontSize" Value="{StaticResource HeadFontSize}" />
	</Style>
	<Style x:Key="TextBlockSubTitle" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock">
		<Setter Property="FontSize" Value="{StaticResource SubHeadFontSize}" />
	</Style>
	<Style x:Key="TextBlockLargeBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="TextBlock">
		<Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
	</Style>
	<Style x:Key="TextBlockTitleBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="TextBlock">
		<Setter Property="FontSize" Value="{StaticResource HeadFontSize}" />
	</Style>
	<Style x:Key="TextBlockSubTitleBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="TextBlock">
		<Setter Property="FontSize" Value="{StaticResource SubHeadFontSize}" />
	</Style>
	<Style x:Key="TextBlockDefaultBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="TextBlock" />
	<Style BasedOn="{StaticResource LabelBaseStyle}" TargetType="Label">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
	</Style>
	<Style x:Key="LabelPrimary" BasedOn="{StaticResource LabelBaseStyle}" TargetType="Label">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="LabelSuccess" BasedOn="{StaticResource LabelBaseStyle}" TargetType="Label">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="LabelInfo" BasedOn="{StaticResource LabelBaseStyle}" TargetType="Label">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="LabelWarning" BasedOn="{StaticResource LabelBaseStyle}" TargetType="Label">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="LabelDanger" BasedOn="{StaticResource LabelBaseStyle}" TargetType="Label">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style BasedOn="{StaticResource CompareSliderBaseStyle}" TargetType="hc:CompareSlider" />
	<Style BasedOn="{StaticResource PreviewSliderBaseStyle}" TargetType="hc:PreviewSlider" />
	<Style x:Key="ToggleButtonDefault" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource ToggleButtonDefault}" TargetType="ToggleButton" />
	<Style x:Key="ToggleButtonPrimary" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="ToggleButtonSuccess" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ToggleButtonInfo" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ToggleButtonWarning" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ToggleButtonDanger" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="ToggleButtonIcon" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ToggleButtonIconPrimary" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="ToggleButtonIconSuccess" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ToggleButtonIconInfo" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ToggleButtonIconWarning" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ToggleButtonIconDanger" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="ToggleButtonIconTransparent" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentControl Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Path x:Name="PathIcon" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconSwitchElement.Geometry}" />
						</ContentControl>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="PathIcon" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToggleButtonSwitch" BasedOn="{StaticResource ToggleButtonSwitchBaseStyle}" TargetType="ToggleButton" />
	<Style x:Key="ToggleButtonFlip" BasedOn="{StaticResource BaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Height" Value="30" />
		<Setter Property="Width" Value="30" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<ControlTemplate.Resources>
						<Storyboard x:Key="StoryboardChecked">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="CheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="UnCheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="UnCheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="StoryboardUnChecked">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="CheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="UnCheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="UnCheckedElement">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
									<EasingDoubleKeyFrame.EasingFunction>
										<PowerEase EasingMode="EaseOut" />
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Viewbox>
						<hc:SimplePanel Height="28" Width="28">
							<Border Name="UnCheckedElement" Style="{StaticResource BorderCircularClip}" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
								<Border.RenderTransform>
									<TransformGroup>
										<ScaleTransform ScaleX="1" />
									</TransformGroup>
								</Border.RenderTransform>
								<ContentPresenter Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
							<Border Name="CheckedElement" Style="{StaticResource BorderCircularClip}" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
								<Border.RenderTransform>
									<TransformGroup>
										<ScaleTransform ScaleX="0" />
									</TransformGroup>
								</Border.RenderTransform>
								<ContentPresenter Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement),RelativeSource={RelativeSource TemplatedParent}}" />
							</Border>
						</hc:SimplePanel>
					</Viewbox>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value=".9" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" Value=".6" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardChecked}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}" />
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToggleButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border x:Name="Chrome" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<hc:SimplePanel>
							<ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement),RelativeSource={RelativeSource TemplatedParent}}" />
						</hc:SimplePanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value=".9" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" Value=".6" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="CheckedElement" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True" />
								<Condition Property="IsChecked" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" Value="Collapsed" TargetName="UnCheckedElement" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToggleButtonGroupItemDefault" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="ToggleButton" />
	<Style x:Key="ToggleButtonGroupItemHorizontalFirst" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="ToggleButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="ToggleButtonGroupItemHorizontalLast" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="ToggleButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
	</Style>
	<Style x:Key="ToggleButtonGroupItemSingle" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="ToggleButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
	</Style>
	<Style x:Key="ToggleButtonGroupItemVerticalFirst" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="ToggleButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="ToggleButtonGroupItemVerticalLast" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="ToggleButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
	</Style>
	<Style x:Key="ToggleButtonLoadingPrimary" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border x:Name="Chrome" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
							<hc:SimplePanel>
								<ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement),RelativeSource={RelativeSource TemplatedParent}}" />
							</hc:SimplePanel>
							<Viewbox Margin="0,4">
								<hc:LoadingCircle x:Name="Loading" Width="22" Height="22" Foreground="{TemplateBinding Foreground}" DotDiameter="3" IsRunning="{TemplateBinding IsChecked}" Visibility="Collapsed" />
							</Viewbox>
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value=".9" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" Value=".6" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="Loading" />
							<Setter Property="Visibility" Value="Visible" TargetName="CheckedElement" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True" />
								<Condition Property="IsChecked" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" Value="Collapsed" TargetName="UnCheckedElement" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToggleButtonLoading" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ToggleButtonLoadingSuccess" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ToggleButtonLoadingInfo" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ToggleButtonLoadingWarning" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ToggleButtonLoadingDanger" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="RepeatButtonDefault" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource RepeatButtonDefault}" TargetType="RepeatButton" />
	<Style x:Key="RepeatButtonPrimary" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="RepeatButtonSuccess" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="RepeatButtonInfo" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="RepeatButtonWarning" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="RepeatButtonDanger" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="RepeatButtonIcon" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Data="{TemplateBinding hc:IconElement.Geometry}" />
						</ContentControl>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RepeatButtonIconCircular" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Width" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Data="{TemplateBinding hc:IconElement.Geometry}" />
						</ContentControl>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RepeatButtonDashed" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="RepeatButtonDashedPrimary" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="RepeatButtonDashedSuccess" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="RepeatButtonDashedInfo" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="RepeatButtonDashedWarning" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="RepeatButtonDashedDanger" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="RepeatButton">
		<Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="RepeatButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border x:Name="Chrome" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value=".9" />
							<Setter Property="Background" TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseHoverBackground),RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" Value=".6" />
							<Setter Property="Background" TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseDownBackground),RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ScrollViewerNativeBaseStyle}" TargetType="ScrollViewer" />
	<Style BasedOn="{StaticResource ScrollViewerBaseStyle}" TargetType="hc:ScrollViewer" />
	<Style x:Key="ScrollViewerUpDownRepeatButtonStyle" BasedOn="{StaticResource RepeatButtonIcon}" TargetType="RepeatButton">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="Height" Value="10" />
		<Setter Property="Padding" Value="0,2" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="ClickMode" Value="Hover" />
	</Style>
	<ControlTemplate x:Key="ScrollViewerUpDownControlTemplate" TargetType="ScrollViewer">
		<Grid x:Name="Grid" Background="{TemplateBinding Background}">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<RepeatButton Style="{StaticResource ScrollViewerUpDownRepeatButtonStyle}" hc:IconElement.Geometry="{StaticResource UpGeometry}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineUpCommand}">
				<RepeatButton.Visibility>
					<MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
					</MultiBinding>
				</RepeatButton.Visibility>
			</RepeatButton>
			<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="1" />
			<RepeatButton Style="{StaticResource ScrollViewerUpDownRepeatButtonStyle}" hc:IconElement.Geometry="{StaticResource DownGeometry}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}">
				<RepeatButton.Visibility>
					<MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
						<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
					</MultiBinding>
				</RepeatButton.Visibility>
			</RepeatButton>
		</Grid>
	</ControlTemplate>
	<Style x:Key="ScrollViewerUpDown" TargetType="ScrollViewer">
		<Setter Property="VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template" Value="{StaticResource ScrollViewerUpDownControlTemplate}" />
	</Style>
	<Style x:Key="CalendarButtonStyle" TargetType="CalendarButton">
		<Setter Property="MinWidth" Value="10" />
		<Setter Property="MinHeight" Value="10" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Width" Value="40" />
		<Setter Property="Height" Value="32" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CalendarButton">
					<hc:SimplePanel>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimation Duration="0:0:.2" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground" />
										<ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ActiveStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Active" />
								<VisualState x:Name="Inactive">
									<Storyboard>
										<ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Rectangle x:Name="SelectedBackground" Fill="{DynamicResource DangerBrush}" Opacity="0" RadiusY="16" RadiusX="16" />
						<Rectangle x:Name="Background" Fill="{TemplateBinding Background}" Opacity="0" RadiusY="16" RadiusX="16" />
						<ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<TextElement.Foreground>
								<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
							</TextElement.Foreground>
						</ContentPresenter>
						<Rectangle x:Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusY="16" RadiusX="16" Stroke="{DynamicResource PrimaryBrush}" Visibility="Collapsed" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Visibility" TargetName="CalendarButtonFocusVisual" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CalendarDayButtonStyle" BasedOn="{StaticResource BaseStyle}" TargetType="CalendarDayButton">
		<Setter Property="MinWidth" Value="10" />
		<Setter Property="MinHeight" Value="10" />
		<Setter Property="Width" Value="32" />
		<Setter Property="Height" Value="32" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CalendarDayButton">
					<hc:SimplePanel>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Duration="0" To=".35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimation Duration="0:0:.2" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground" />
										<ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ActiveStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Active" />
								<VisualState x:Name="Inactive">
									<Storyboard>
										<ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DayStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="RegularDay" />
								<VisualState x:Name="Today">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="TodayBackground" />
										<ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Rectangle RadiusX="16" RadiusY="16" x:Name="TodayBackground" Fill="{DynamicResource DangerBrush}" Opacity="0" />
						<Rectangle x:Name="SelectedBackground" Fill="{DynamicResource PrimaryBrush}" Opacity="0" RadiusY="16" RadiusX="16" />
						<ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<TextElement.Foreground>
								<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
							</TextElement.Foreground>
						</ContentPresenter>
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="CalendarItem">
		<Setter Property="Margin" Value="0" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CalendarItem">
					<ControlTemplate.Resources>
						<DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
							<TextBlock Foreground="{DynamicResource PrimaryTextBrush}" FontWeight="Bold" HorizontalAlignment="Center" Margin="0,6,0,6" Text="{Binding}" VerticalAlignment="Center" />
						</DataTemplate>
					</ControlTemplate.Resources>
					<hc:SimplePanel x:Name="PART_Root">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" Grid.ColumnSpan="3" />
							<Button x:Name="PART_PreviousButton" Width="50" HorizontalAlignment="Left" Grid.Column="0" Height="50" Padding="16" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource LeftGeometry}" />
							<Button x:Name="PART_HeaderButton" Focusable="False" Foreground="White" Grid.Column="1" FontSize="20" HorizontalAlignment="Center" Grid.Row="0" Style="{StaticResource ButtonCustom}" />
							<Button x:Name="PART_NextButton" Width="50" HorizontalAlignment="Right" Height="50" Padding="16" Grid.Column="2" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource RightGeometry}" />
							<Grid Width="240" Height="240" x:Name="PART_MonthView" Margin="10" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Visibility="Visible">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
								</Grid.RowDefinitions>
							</Grid>
							<Grid Width="240" Height="240" x:Name="PART_YearView" Margin="10" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Visibility="Hidden">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
								</Grid.RowDefinitions>
							</Grid>
						</Grid>
						<Rectangle x:Name="PART_DisabledVisual" Visibility="Collapsed" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource  AncestorType=Calendar}}" Value="Year">
							<Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
							<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource  AncestorType=Calendar}}" Value="Decade">
							<Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
							<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CalendarBaseStyle" TargetType="Calendar">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Language" Value="{Binding Lang,Source={x:Static tools:ConfigHelper.Instance}}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Margin" Value="8,0,8,8" />
		<Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}" />
		<Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}" />
		<Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Calendar">
					<hc:SimplePanel>
						<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" />
						<CalendarItem x:Name="PART_CalendarItem" />
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="Calendar" BasedOn="{StaticResource CalendarBaseStyle}" />
	<Style BasedOn="{StaticResource ToggleBlockBaseStyle}" TargetType="hc:ToggleBlock" />
	<Style x:Key="ToggleBlockIcon" BasedOn="{StaticResource ToggleBlockBaseStyle}" TargetType="hc:ToggleBlock">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ToggleBlock">
					<ContentControl Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Path x:Name="PathIcon" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconSwitchElement.Geometry}" />
					</ContentControl>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="PathIcon" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="GroupBox" />
	<Style x:Key="GroupBoxOriginal" BasedOn="{StaticResource GroupBoxOriginalBaseStyle}" TargetType="GroupBox" />
	<Style x:Key="GroupBoxTab" BasedOn="{StaticResource GroupBoxTabBaseStyle}" TargetType="GroupBox" />
	<Style BasedOn="{StaticResource ButtonGroupBaseStyle}" TargetType="hc:ButtonGroup" />
	<Style x:Key="ButtonGroupSolid" BasedOn="{StaticResource ButtonGroupBaseStyle}" TargetType="hc:ButtonGroup">
		<Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource TextIconBrush}" />
	</Style>
	<Style BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="ProgressBarSuccess" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ProgressBarInfo" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ProgressBarWarning" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ProgressBarDanger" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style x:Key="ProgressBarPrimaryStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground">
			<Setter.Value>
				<DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
					<DrawingBrush.Transform>
						<TransformGroup>
							<RotateTransform Angle="20" />
							<TranslateTransform x:Name="MyTransform" X="0" />
						</TransformGroup>
					</DrawingBrush.Transform>
					<DrawingBrush.Drawing>
						<GeometryDrawing>
							<GeometryDrawing.Brush>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="{DynamicResource DarkPrimaryColor}" Offset="0" />
									<GradientStop Color="{DynamicResource DarkPrimaryColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
								</LinearGradientBrush>
							</GeometryDrawing.Brush>
							<GeometryDrawing.Geometry>
								<RectangleGeometry Rect="0,0,20,32" />
							</GeometryDrawing.Geometry>
						</GeometryDrawing>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ProgressBarSuccessStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground">
			<Setter.Value>
				<DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
					<DrawingBrush.Transform>
						<TransformGroup>
							<RotateTransform Angle="20" />
							<TranslateTransform x:Name="MyTransform" X="0" />
						</TransformGroup>
					</DrawingBrush.Transform>
					<DrawingBrush.Drawing>
						<GeometryDrawing>
							<GeometryDrawing.Brush>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="{DynamicResource DarkSuccessColor}" Offset="0" />
									<GradientStop Color="{DynamicResource DarkSuccessColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
								</LinearGradientBrush>
							</GeometryDrawing.Brush>
							<GeometryDrawing.Geometry>
								<RectangleGeometry Rect="0,0,20,32" />
							</GeometryDrawing.Geometry>
						</GeometryDrawing>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ProgressBarInfoStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground">
			<Setter.Value>
				<DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
					<DrawingBrush.Transform>
						<TransformGroup>
							<RotateTransform Angle="20" />
							<TranslateTransform x:Name="MyTransform" X="0" />
						</TransformGroup>
					</DrawingBrush.Transform>
					<DrawingBrush.Drawing>
						<GeometryDrawing>
							<GeometryDrawing.Brush>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="{DynamicResource DarkInfoColor}" Offset="0" />
									<GradientStop Color="{DynamicResource DarkInfoColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
								</LinearGradientBrush>
							</GeometryDrawing.Brush>
							<GeometryDrawing.Geometry>
								<RectangleGeometry Rect="0,0,20,32" />
							</GeometryDrawing.Geometry>
						</GeometryDrawing>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ProgressBarWarningStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground">
			<Setter.Value>
				<DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
					<DrawingBrush.Transform>
						<TransformGroup>
							<RotateTransform Angle="20" />
							<TranslateTransform x:Name="MyTransform" X="0" />
						</TransformGroup>
					</DrawingBrush.Transform>
					<DrawingBrush.Drawing>
						<GeometryDrawing>
							<GeometryDrawing.Brush>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="{DynamicResource DarkWarningColor}" Offset="0" />
									<GradientStop Color="{DynamicResource DarkWarningColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
								</LinearGradientBrush>
							</GeometryDrawing.Brush>
							<GeometryDrawing.Geometry>
								<RectangleGeometry Rect="0,0,20,32" />
							</GeometryDrawing.Geometry>
						</GeometryDrawing>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ProgressBarDangerStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="ProgressBar">
		<Setter Property="Foreground">
			<Setter.Value>
				<DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
					<DrawingBrush.Transform>
						<TransformGroup>
							<RotateTransform Angle="20" />
							<TranslateTransform x:Name="MyTransform" X="0" />
						</TransformGroup>
					</DrawingBrush.Transform>
					<DrawingBrush.Drawing>
						<GeometryDrawing>
							<GeometryDrawing.Brush>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="{DynamicResource DarkDangerColor}" Offset="0" />
									<GradientStop Color="{DynamicResource DarkDangerColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
									<GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
								</LinearGradientBrush>
							</GeometryDrawing.Brush>
							<GeometryDrawing.Geometry>
								<RectangleGeometry Rect="0,0,20,32" />
							</GeometryDrawing.Geometry>
						</GeometryDrawing>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="hc:CircleProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="ProgressBarSuccessCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="hc:CircleProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ProgressBarInfoCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="hc:CircleProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ProgressBarWarningCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="hc:CircleProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ProgressBarDangerCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="hc:CircleProgressBar">
		<Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="hc:WaveProgressBar">
		<Setter Property="WaveFill" Value="{DynamicResource DarkPrimaryBrush}" />
	</Style>
	<Style x:Key="ProgressBarSuccessWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="hc:WaveProgressBar">
		<Setter Property="WaveFill" Value="{DynamicResource DarkSuccessBrush}" />
	</Style>
	<Style x:Key="ProgressBarInfoWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="hc:WaveProgressBar">
		<Setter Property="WaveFill" Value="{DynamicResource DarkInfoBrush}" />
	</Style>
	<Style x:Key="ProgressBarWarningWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="hc:WaveProgressBar">
		<Setter Property="WaveFill" Value="{DynamicResource DarkWarningBrush}" />
	</Style>
	<Style x:Key="ProgressBarDangerWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="hc:WaveProgressBar">
		<Setter Property="WaveFill" Value="{DynamicResource DarkDangerBrush}" />
	</Style>
	<Style x:Key="ProgressBarFlat" TargetType="ProgressBar">
		<Setter Property="Height" Value="4" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ProgressBar">
					<ControlTemplate.Resources>
						<Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
								<EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
								<EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
							</DoubleAnimationUsingKeyFrames>
							<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
								<EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
								<EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
								<EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
							</PointAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<hc:SimplePanel x:Name="TemplateRoot" SnapsToDevicePixels="true" ClipToBounds="True">
						<Rectangle x:Name="PART_Track" Fill="{TemplateBinding Background}" StrokeThickness="0" Stroke="{TemplateBinding BorderBrush}" />
						<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
							<Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
						</Decorator>
						<Rectangle x:Name="Animation" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
							<Rectangle.RenderTransform>
								<TransformGroup>
									<ScaleTransform />
								</TransformGroup>
							</Rectangle.RenderTransform>
						</Rectangle>
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsIndeterminate" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
							</Trigger.EnterActions>
							<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
							<Setter Property="Visibility" TargetName="Animation" Value="Visible" />
						</Trigger>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Height" Value="{x:Static system:Double.NaN}" />
							<Setter Property="LayoutTransform" TargetName="TemplateRoot">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource CheckBoxBaseStyle}" TargetType="CheckBox" />
	<Style BasedOn="{StaticResource RadioButtonBaseStyle}" TargetType="RadioButton" />
	<Style x:Key="RadioButtonIcon" BasedOn="{StaticResource RadioButtonIconBaseStyle}" TargetType="RadioButton" />
	<Style x:Key="RadioGroupItemDefault" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="RadioButton" />
	<Style x:Key="RadioGroupItemHorizontalFirst" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="RadioButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="RadioGroupItemHorizontalLast" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="RadioButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
	</Style>
	<Style x:Key="RadioGroupItemSingle" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="RadioButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
	</Style>
	<Style x:Key="RadioGroupItemVerticalFirst" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="RadioButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="RadioGroupItemVerticalLast" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="RadioButton">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
	</Style>
	<Style TargetType="ResizeGrip">
		<Setter Property="MinWidth" Value="11" />
		<Setter Property="MinHeight" Value="11" />
		<Setter Property="Width" Value="11" />
		<Setter Property="Height" Value="11" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ResizeGrip">
					<hc:SimplePanel Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<Path Width="11" Height="11" Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z" HorizontalAlignment="Right" VerticalAlignment="Bottom">
							<Path.Fill>
								<DrawingBrush TileMode="Tile" Viewbox="0,0,3,3" Viewport="0,0,3,3" ViewportUnits="Absolute" ViewboxUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="{StaticResource ResizeGripperForeground}">
												<GeometryDrawing.Geometry>
													<RectangleGeometry Rect="0,0,2,2" />
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Path.Fill>
						</Path>
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="Window">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="UseLayoutRounding" Value="True" />
	</Style>
	<Style x:Key="WindowWin10" TargetType="hc:Window">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="#262e2f" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="NonClientAreaBackground" Value="{DynamicResource RegionBrush}" />
		<Setter Property="NonClientAreaForeground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="CloseButtonBackground" Value="Transparent" />
		<Setter Property="CloseButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="CloseButtonHoverBackground" Value="#e81123" />
		<Setter Property="CloseButtonHoverForeground" Value="White" />
		<Setter Property="OtherButtonBackground" Value="Transparent" />
		<Setter Property="OtherButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="OtherButtonHoverBackground" Value="{DynamicResource DarkMaskBrush}" />
		<Setter Property="OtherButtonHoverForeground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Window">
					<Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<Grid Margin="{TemplateBinding Padding}">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid Background="{TemplateBinding NonClientAreaBackground}" Name="PART_NonClientArea" TextElement.Foreground="{TemplateBinding NonClientAreaForeground}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<StackPanel Name="ButtonPanel" WindowChrome.IsHitTestVisibleInChrome="True" UseLayoutRounding="True" VerticalAlignment="Top" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
									<Button Background="{TemplateBinding OtherButtonBackground}" Foreground="{TemplateBinding OtherButtonForeground}" Command="SystemCommands.MinimizeWindowCommand" IsTabStop="False" Name="ButtonMin" Height="29" Style="{StaticResource ButtonIcon}" Width="45" hc:IconElement.Geometry="{StaticResource WindowMinGeometry}" BorderThickness="1,0,1,0" hc:IconElement.Width="10" hc:IconElement.Height="10" />
									<Button Background="{TemplateBinding OtherButtonBackground}" Foreground="{TemplateBinding OtherButtonForeground}" Command="SystemCommands.MaximizeWindowCommand" IsTabStop="False" Name="ButtonMax" Height="29" Style="{StaticResource ButtonIcon}" Width="46" hc:IconElement.Geometry="{StaticResource WindowMaxGeometry}" BorderThickness="1,0,1,0" hc:IconElement.Width="10" hc:IconElement.Height="10" />
									<Button Background="{TemplateBinding OtherButtonBackground}" Foreground="{TemplateBinding OtherButtonForeground}" Command="SystemCommands.RestoreWindowCommand" IsTabStop="False" Name="ButtonRestore" Height="29" Style="{StaticResource ButtonIcon}" Width="46" hc:IconElement.Geometry="{StaticResource WindowRestoreGeometry}" BorderThickness="1,0,1,0" hc:IconElement.Width="10" hc:IconElement.Height="10" />
									<Button Background="{TemplateBinding CloseButtonBackground}" Foreground="{TemplateBinding CloseButtonForeground}" Command="SystemCommands.CloseWindowCommand" IsTabStop="False" Name="ButtonClose" Height="29" Style="{StaticResource ButtonIcon}" Width="46" hc:IconElement.Geometry="{StaticResource CloseGeometry}" BorderThickness="1,0,0,0" hc:IconElement.Width="10" hc:IconElement.Height="10" />
								</StackPanel>
								<Grid Grid.Column="0">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<Button Name="ButtonIcon" Visibility="{TemplateBinding Icon,Converter={StaticResource Object2VisibilityConverter}}" Command="{x:Static SystemCommands.ShowSystemMenuCommand}" Background="Transparent" Margin="10,0,0,0" WindowChrome.IsHitTestVisibleInChrome="True" Style="{StaticResource ButtonCustom}" VerticalAlignment="Center">
										<interactivity:Interaction.Triggers>
											<interactivity:EventTrigger EventName="MouseDoubleClick">
												<interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}" />
											</interactivity:EventTrigger>
										</interactivity:Interaction.Triggers>
										<Image IsHitTestVisible="False" Source="{TemplateBinding Icon}" VerticalAlignment="Center" Width="16" Height="16" />
									</Button>
									<TextBlock Grid.Column="1" Text="{TemplateBinding Title}" Padding="10,0,0,0" VerticalAlignment="Center">
										<TextBlock.Visibility>
											<MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
												<MultiBinding.Bindings>
													<Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}" />
													<Binding Path="Title" RelativeSource="{RelativeSource TemplatedParent}" Converter="{StaticResource Object2BooleanConverter}" />
												</MultiBinding.Bindings>
											</MultiBinding>
										</TextBlock.Visibility>
									</TextBlock>
									<ContentPresenter WindowChrome.IsHitTestVisibleInChrome="True" Grid.Column="2" x:Name="ContentPresenterMain" Content="{TemplateBinding NonClientAreaContent}" />
								</Grid>
							</Grid>
							<AdornerDecorator Grid.Row="1">
								<ContentPresenter ClipToBounds="True" />
							</AdornerDecorator>
							<ResizeGrip Width="10" Height="10" x:Name="ResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" Grid.Row="1" IsTabStop="False" Visibility="Collapsed" WindowChrome.ResizeGripDirection="BottomRight" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsActive" Value="False">
							<Setter Property="Opacity" Value=".8" TargetName="ContentPresenterMain" />
							<Setter Property="Opacity" Value=".8" TargetName="ButtonPanel" />
						</Trigger>
						<Trigger Property="WindowState" Value="Maximized">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMax" />
							<Setter Property="Visibility" Value="Visible" TargetName="ButtonRestore" />
						</Trigger>
						<Trigger Property="WindowState" Value="Normal">
							<Setter Property="Visibility" Value="Visible" TargetName="ButtonMax" />
							<Setter Property="Visibility" Value="Collapsed" TargetName="ButtonRestore" />
						</Trigger>
						<Trigger Property="ResizeMode" Value="NoResize">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMin" />
							<Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMax" />
							<Setter Property="Visibility" Value="Collapsed" TargetName="ButtonRestore" />
						</Trigger>
						<Trigger Property="ResizeMode" Value="CanMinimize">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMax" />
							<Setter Property="Visibility" Value="Collapsed" TargetName="ButtonRestore" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True" SourceName="ButtonClose">
							<Setter Property="Background" TargetName="ButtonClose" Value="{Binding CloseButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Foreground" TargetName="ButtonClose" Value="{Binding CloseButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True" SourceName="ButtonMax">
							<Setter Property="Background" TargetName="ButtonMax" Value="{Binding OtherButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Foreground" TargetName="ButtonMax" Value="{Binding OtherButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True" SourceName="ButtonRestore">
							<Setter Property="Background" TargetName="ButtonRestore" Value="{Binding OtherButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Foreground" TargetName="ButtonRestore" Value="{Binding OtherButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True" SourceName="ButtonMin">
							<Setter Property="Background" TargetName="ButtonMin" Value="{Binding OtherButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Foreground" TargetName="ButtonMin" Value="{Binding OtherButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger Property="WindowStyle" Value="None">
							<Setter Property="ShowNonClientArea" Value="False" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ResizeMode" Value="CanResizeWithGrip" />
								<Condition Property="WindowState" Value="Normal" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="WindowBlur" BasedOn="{StaticResource WindowWin10}" TargetType="hc:BlurWindow">
		<Setter Property="Background" Value="Transparent" />
	</Style>
	<Style x:Key="WindowGlow" BasedOn="{StaticResource WindowWin10}" TargetType="hc:GlowWindow">
		<Setter Property="ActiveGlowColor" Value="#262e2f" />
		<Setter Property="InactiveGlowColor" Value="{DynamicResource BorderColor}" />
		<Setter Property="BorderThickness" Value="0" />
	</Style>
	<Style TargetType="hc:ImageBrowser">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinWidth" Value="400" />
		<Setter Property="MinHeight" Value="250" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="Black" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ImageBrowser">
					<ControlTemplate.Resources>
						<Storyboard x:Key="Storyboard1">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_PanelTop">
								<EasingDoubleKeyFrame KeyTime="0:0:.1" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="Storyboard2">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_PanelTop">
								<EasingDoubleKeyFrame KeyTime="0:0:.4" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<hc:ImageViewer x:Name="PART_ImageViewer" ShowImgMap="True" BorderThickness="0" Background="#dd000000" />
						<hc:SimplePanel x:Name="PART_PanelTop" Opacity="0" Background="{DynamicResource DarkOpacityBrush}" VerticalAlignment="Top" Grid.Row="0">
							<StackPanel HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal">
								<TextBlock Text="{Binding ImgPath,ElementName=PART_ImageViewer}" Foreground="White" Margin="10,0,0,0" />
								<TextBlock Text="{Binding ImgSize,ElementName=PART_ImageViewer,Converter={StaticResource Long2FileSizeConverter}}" Foreground="White" Margin="30,0,0,0" />
							</StackPanel>
							<Button Command="interactivity:ControlCommands.Close" WindowChrome.IsHitTestVisibleInChrome="True" Background="Red" Padding="14" hc:IconElement.Geometry="{StaticResource DeleteGeometry}" Style="{StaticResource ButtonIcon}" HorizontalAlignment="Right" VerticalAlignment="Top" Width="40" Height="40" />
						</hc:SimplePanel>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_ImageViewer" Property="ShowCloseButton" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsFullScreen" Value="True">
				<Setter Property="WindowState" Value="Maximized" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TagBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:Tag">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Tag">
					<Border Style="{StaticResource BorderCircular}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Border Visibility="{Binding HasHeader,RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Width="{Binding ActualHeight,RelativeSource={RelativeSource Self}}" Style="{StaticResource BorderCircularClip}" BorderBrush="{Binding Path=(hc:TitleElement.BorderBrush),RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}">
								<ContentPresenter TextElement.Foreground="{Binding Path=(hc:TitleElement.Foreground),RelativeSource={RelativeSource TemplatedParent}}" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" VerticalAlignment="Center" HorizontalAlignment="Center" />
							</Border>
							<ContentPresenter Margin="{TemplateBinding Padding}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							<Button Focusable="False" Name="ButtonClose" Visibility="{TemplateBinding ShowCloseButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Close" Margin="0,0,6,0" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0,11" hc:IconElement.Geometry="{StaticResource DeleteGeometry}" Foreground="{TemplateBinding Foreground}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True" SourceName="ButtonClose">
							<Setter Property="hc:IconElement.Geometry" Value="{StaticResource DeleteFillCircleGeometry}" TargetName="ButtonClose" />
							<Setter Property="Padding" Value="0,6" TargetName="ButtonClose" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource DarkMaskBrush}" />
			</Trigger>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TagContainerBaseStyle" TargetType="hc:TagContainer" BasedOn="{StaticResource BaseStyle}">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource TagBaseStyle}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel hc:PanelElement.FluidMoveBehavior="{StaticResource BehaviorXY200}" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:TagContainer">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<hc:ScrollViewer Focusable="false">
							<ItemsPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</hc:ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<Border Margin="0,0,6,0" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" SnapsToDevicePixels="true" Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
							<Path Width="16" Height="9" x:Name="arrow" Data="{StaticResource DownGeometry}" Stretch="Uniform" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Data" TargetName="arrow" Value="{StaticResource UpGeometry}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value=".4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ComboBoxWatermarkToggleButton" TargetType="ToggleButton">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="30" />
						</Grid.ColumnDefinitions>
						<Border Grid.ColumnSpan="2" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" />
						<Path Grid.Column="1" x:Name="arrow" Data="{StaticResource DownGeometry}" Stretch="Uniform" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" Margin="7" VerticalAlignment="Center" />
						<Border Margin="1" Grid.Column="0" Visibility="{Binding Text,RelativeSource={RelativeSource AncestorType=ComboBox},Converter={StaticResource String2VisibilityReConverter}}">
							<ContentPresenter Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Data" TargetName="arrow" Value="{StaticResource UpGeometry}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value=".4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxTemplate" TargetType="ComboBox">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{Binding Background,RelativeSource={RelativeSource TemplatedParent}}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}" />
			<Border Grid.Column="0" Margin="1,0">
				<ContentPresenter Margin="{TemplateBinding Padding}" x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxTopTemplate" TargetType="ComboBox">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Row="1" Grid.Column="0" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Row="1" Grid.Column="0" Margin="1,0">
				<ContentPresenter Margin="{TemplateBinding Padding}" x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="contentPresenter" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxLeftTemplate" TargetType="ComboBox">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Column="1" Margin="1,0">
				<ContentPresenter Margin="{TemplateBinding Padding}" x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="contentPresenter" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ComboBoxEditableTextBox" TargetType="TextBox">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<ScrollViewer Padding="{TemplateBinding Padding}" x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="ComboBox">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}" />
			<Border Grid.Column="0" Margin="-1,1">
				<TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxEditableTopTemplate" TargetType="ComboBox">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="0" Grid.Row="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Row="1" Grid.Column="0" x:Name="border" Margin="-1,1">
				<TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxEditableLeftTemplate" TargetType="ComboBox">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Column="1" x:Name="border" Background="Transparent" Margin="-1,1">
				<TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ComboBoxItemBaseStyle" TargetType="ComboBoxItem">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBoxItem">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource PrimaryBrush}" />
							<Setter Property="Foreground" Value="White" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ComboBoxBaseStyle" TargetType="ComboBox">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemBaseStyle}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<Setter Property="IsTabStop" Value="false" />
				<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ComboBoxExtendBaseStyle" BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="ComboBox">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Template" Value="{StaticResource ComboBoxTopTemplate}" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="False" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxLeftTemplate}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="True" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Top" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxEditableTopTemplate}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="True" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxEditableLeftTemplate}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="ComboBoxPlusTopTemplate" TargetType="hc:ComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Row="1" Grid.Column="0" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="0" Grid.ColumnSpan="2" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
			<ToggleButton Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Row="1" Grid.Column="0" Margin="1,0">
				<ContentPresenter Margin="{TemplateBinding Padding}" x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
			<Button Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="contentPresenter" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxPlusLeftTemplate" TargetType="hc:ComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="1" Grid.ColumnSpan="2" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<ToggleButton Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Column="1" Margin="1,0">
				<ContentPresenter Margin="{TemplateBinding Padding}" x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
			<Button Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="contentPresenter" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxPlusEditableTopTemplate" TargetType="hc:ComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="0" Grid.Row="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="0" Grid.ColumnSpan="2" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
			<ToggleButton Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Row="1" Grid.Column="0" x:Name="border" Margin="-1,1">
				<TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
			<Button Grid.Column="1" Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="true" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxPlusEditableTopAutoCompleteTemplate" TargetType="hc:ComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="0" Grid.Row="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<Popup Grid.Column="0" Grid.Row="1" x:Name="PART_Popup_AutoComplete" PlacementTarget="{Binding ElementName=toggleButton}" StaysOpen="False" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder_AutoComplete" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<StackPanel Name="PART_AutoCompletePanel" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="0" Grid.ColumnSpan="2" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
			<ToggleButton Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Row="1" Grid.Column="0" x:Name="border" Margin="-1,1">
				<TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
			<Button Grid.Column="1" Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
				<Setter Property="Height" TargetName="dropDownBorder_AutoComplete" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MaxWidth" TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
				<Setter Property="MaxWidth" TargetName="dropDownBorder_AutoComplete" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="true" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxPlusEditableLeftTemplate" TargetType="hc:ComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="1" Grid.ColumnSpan="2" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<ToggleButton Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Column="1" x:Name="border" Background="Transparent" Margin="-1,1">
				<TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
			<Button Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="true" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxPlusEditableLeftAutoCompleteTemplate" TargetType="hc:ComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<Popup Grid.Column="1" x:Name="PART_Popup_AutoComplete" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder_AutoComplete" MinWidth="{Binding ActualWidth, ElementName=toggleButton}" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<ScrollViewer Margin="0,4">
								<StackPanel Name="PART_AutoCompletePanel" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="1" Grid.ColumnSpan="2" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<ToggleButton Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxWatermarkToggleButton}" />
			<Border Grid.Column="1" x:Name="border" Background="Transparent" Margin="-1,1">
				<TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
			<Button Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
				<Setter Property="Height" TargetName="dropDownBorder_AutoComplete" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MaxWidth" TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=toggleButton}" />
				<Setter Property="MaxWidth" TargetName="dropDownBorder_AutoComplete" Value="{x:Static system:Double.MaxValue}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualHeight, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsFocused" Value="false" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsFocused" Value="true" SourceName="PART_EditableTextBox" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="border" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ComboBoxPlusBaseStyle" BasedOn="{StaticResource ComboBoxExtendBaseStyle}" TargetType="hc:ComboBox">
		<Setter Property="Template" Value="{StaticResource ComboBoxPlusTopTemplate}" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="False" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxPlusLeftTemplate}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="True" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Top" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableTopTemplate}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="True" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Top" />
					<Condition Property="AutoComplete" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableTopAutoCompleteTemplate}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="True" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableLeftTemplate}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEditable" Value="True" />
					<Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
					<Condition Property="AutoComplete" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableLeftAutoCompleteTemplate}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="MenuItemBaseStyle" TargetType="MenuItem">
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="hc:ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="MenuItem">
					<Border x:Name="Bd" MinWidth="240" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="26" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="30" />
								<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
								<ColumnDefinition Width="20" />
							</Grid.ColumnDefinitions>
							<ContentPresenter Margin="0,0,10,0" x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Right" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
							<Border Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" x:Name="GlyphPanel" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Hidden" VerticalAlignment="Center" Width="16">
								<Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
							</Border>
							<ContentPresenter Grid.Column="1" x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentSource="Header" Margin="0,3" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<TextBlock x:Name="InputGestureText" Margin="0,0,10,0" Grid.Column="3" VerticalAlignment="Center" HorizontalAlignment="Left" Text="{TemplateBinding InputGestureText}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
						</Trigger>
						<Trigger Property="Icon" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Role" Value="TopLevelHeader">
				<Setter Property="Margin" Value="0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="MenuItem">
							<Border MinWidth="44" x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
								<Grid VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<ContentPresenter Margin="0,0,10,0" x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Right" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
									<Border Margin="0,0,10,0" Grid.Column="0" x:Name="GlyphPanel" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Collapsed" VerticalAlignment="Center" Width="16">
										<Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
									</Border>
									<ContentPresenter x:Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									<Popup Grid.Column="0" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=templateRoot}" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom">
										<hc:SimplePanel Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8">
											<Border CornerRadius="0,0,2,2" x:Name="SubMenuBorder" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
												<ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="0,6">
													<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
												</ScrollViewer>
											</Border>
											<Border hc:MenuTopLineAttach.Popup="{Binding ElementName=PART_Popup}" Height="1" Background="{DynamicResource RegionBrush}" VerticalAlignment="Top" BorderThickness="1,0" BorderBrush="{DynamicResource BorderBrush}" HorizontalAlignment="Left" />
										</hc:SimplePanel>
									</Popup>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="Icon" Value="{x:Null}">
									<Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
								</Trigger>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
									<Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
								</Trigger>
								<Trigger Property="IsHighlighted" Value="True">
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource SecondaryRegionBrush}" />
									<Setter Property="TextElement.Foreground" TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" />
								</Trigger>
								<Trigger Property="IsSubmenuOpen" Value="True">
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource BorderBrush}" />
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource RegionBrush}" />
									<Setter Property="TextElement.Foreground" TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Role" Value="TopLevelItem">
				<Setter Property="Margin" Value="0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="MenuItem">
							<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
								<Grid Margin="{TemplateBinding Padding}">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<ContentPresenter Margin="0,0,10,0" x:Name="Icon" HorizontalAlignment="Left" ContentSource="Icon" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
									<Border Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" x:Name="GlyphPanel" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Collapsed" VerticalAlignment="Center" Width="16">
										<Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
									</Border>
									<ContentPresenter x:Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="Icon" Value="{x:Null}">
									<Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
								</Trigger>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
									<Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
								</Trigger>
								<Trigger Property="IsHighlighted" Value="True">
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource SecondaryRegionBrush}" />
									<Setter Property="TextElement.Foreground" TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" />
								</Trigger>
								<Trigger Property="IsSubmenuOpen" Value="True">
									<Setter Property="Background" TargetName="templateRoot" Value="White" />
									<Setter Property="TextElement.Foreground" TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsHighlighted" Value="True" />
										<Condition Property="IsEnabled" Value="False" />
									</MultiTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="#0A000000" />
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="#21000000" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Role" Value="SubmenuHeader">
				<Setter Property="DockPanel.Dock" Value="Top" />
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="MenuItem">
							<Border x:Name="Bd" MinWidth="240" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
								<Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="26" />
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="30" />
										<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
										<ColumnDefinition Width="20" />
									</Grid.ColumnDefinitions>
									<ContentPresenter Margin="0,0,10,0" x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Right" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
									<Border Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" x:Name="GlyphPanel" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Hidden" VerticalAlignment="Center" Width="16">
										<Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
									</Border>
									<ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="0,3" x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									<Path x:Name="Path" Grid.Column="4" Width="10" Height="10" HorizontalAlignment="Left" Data="{StaticResource RightGeometry}" Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" />
									<Popup Grid.Column="1" x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" VerticalOffset="-13" HorizontalOffset="10">
										<Border Effect="{StaticResource EffectShadow2}" Margin="8" CornerRadius="2" x:Name="SubMenuBorder" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
											<ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="0,6">
												<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
											</ScrollViewer>
										</Border>
									</Popup>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="MenuBaseStyle" TargetType="Menu">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="FontStyle" Value="Normal" />
		<Setter Property="FontWeight" Value="Normal" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource MenuItemBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Menu">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="WatermarkTextBoxBaseStyle" TargetType="hc:WatermarkTextBox">
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="CaretBrush" Value="{Binding Foreground,RelativeSource={RelativeSource Self}}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:WatermarkTextBox">
					<hc:SimplePanel x:Name="WatermarkContent">
						<TextBlock Text="{TemplateBinding Watermark}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{DynamicResource ThirdlyTextBrush}" Margin="{TemplateBinding Padding}" x:Name="PART_Watermark" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" />
						<ScrollViewer Padding="{TemplateBinding Padding}" Margin="-2,0,-1,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TextBoxBaseStyle" TargetType="TextBox">
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Border x:Name="border" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ScrollViewer Padding="{TemplateBinding Padding}" Margin="-2,0,-1,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="border" Value="0.4" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="TextBoxExtendTopTemplate" TargetType="TextBox">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment),RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}">
				<ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
				<TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
			</DockPanel>
			<Border x:Name="border" Grid.Row="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<TextBlock x:Name="Placeholder" Padding="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Row="1" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" />
			<ScrollViewer Padding="{TemplateBinding Padding}" Margin="-1,1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Row="1" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="border" Value="0.4" />
				<Setter Property="Opacity" TargetName="PART_ContentHost" Value="0.4" />
				<Setter Property="Opacity" TargetName="Placeholder" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="PART_ContentHost">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TextBoxExtendLeftTemplate" TargetType="TextBox">
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment),RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment),RelativeSource={RelativeSource TemplatedParent}}" Margin="0,7,6,7">
				<ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
				<TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
			</DockPanel>
			<Border x:Name="border" Grid.Column="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<TextBlock x:Name="Placeholder" Padding="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Column="1" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" />
			<ScrollViewer Padding="{TemplateBinding Padding}" Margin="-1,1" Grid.Column="1" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="border" Value="0.4" />
				<Setter Property="Opacity" TargetName="PART_ContentHost" Value="0.4" />
				<Setter Property="Opacity" TargetName="Placeholder" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="PART_ContentHost">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="TextBoxExtendBaseStyle" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="TextBox">
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Template" Value="{StaticResource TextBoxExtendTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource TextBoxExtendLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="TextBoxPlusTopTemplate" TargetType="hc:TextBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
			<DockPanel LastChildFill="True" Grid.Row="0" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment),RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}">
				<ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
				<TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
			</DockPanel>
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
				<Grid SnapsToDevicePixels="true">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" />
					<ScrollViewer Margin="-2,0,-1,0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="templateRoot">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TextBoxPlusLeftTemplate" TargetType="hc:TextBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
			<DockPanel LastChildFill="True" Grid.Column="0" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment),RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment),RelativeSource={RelativeSource TemplatedParent}}" Margin="0,7,6,7">
				<ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
				<TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
			</DockPanel>
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
				<Grid SnapsToDevicePixels="true">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" />
					<ScrollViewer Grid.Column="0" Margin="-2,0,-1,0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="templateRoot">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="TextBoxPlusBaseStyle" BasedOn="{StaticResource TextBoxExtendBaseStyle}" TargetType="hc:TextBox">
		<Setter Property="Template" Value="{StaticResource TextBoxPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource TextBoxPlusLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="SearchBarBaseStyle" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="hc:SearchBar">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SearchBar">
					<Border x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="30" />
							</Grid.ColumnDefinitions>
							<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
							<ScrollViewer Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="SearchBarExtendTopTemplate" TargetType="hc:SearchBar">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<TextBlock HorizontalAlignment="Stretch" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" />
					<ScrollViewer Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SearchBarExtendLeftTemplate" TargetType="hc:SearchBar">
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<TextBlock HorizontalAlignment="Stretch" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" />
					<ScrollViewer Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="SearchBarExtendBaseStyle" BasedOn="{StaticResource SearchBarBaseStyle}" TargetType="hc:SearchBar">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Template" Value="{StaticResource SearchBarExtendTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource SearchBarExtendLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="SearchBarPlusTopTemplate" TargetType="hc:SearchBar">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock Grid.Row="1" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<TextBlock HorizontalAlignment="Stretch" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" />
					<ScrollViewer Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SearchBarPlusLeftTemplate" TargetType="hc:SearchBar">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<TextBlock HorizontalAlignment="Stretch" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" />
					<ScrollViewer Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="SearchBarPlusBaseStyle" BasedOn="{StaticResource SearchBarExtendBaseStyle}" TargetType="hc:SearchBar">
		<Setter Property="Template" Value="{StaticResource SearchBarPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource SearchBarPlusLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource TagBaseStyle}" TargetType="hc:Tag" />
	<Style BasedOn="{StaticResource TagContainerBaseStyle}" TargetType="hc:TagContainer" />
	<Style BasedOn="{StaticResource SearchBarBaseStyle}" TargetType="hc:SearchBar" />
	<Style x:Key="SearchBarExtend" BasedOn="{StaticResource SearchBarExtendBaseStyle}" TargetType="hc:SearchBar" />
	<Style x:Key="SearchBarPlus" BasedOn="{StaticResource SearchBarPlusBaseStyle}" TargetType="hc:SearchBar" />
	<Style BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="ComboBox" />
	<Style x:Key="ComboBoxExtend" BasedOn="{StaticResource ComboBoxExtendBaseStyle}" TargetType="ComboBox" />
	<Style BasedOn="{StaticResource ComboBoxPlusBaseStyle}" TargetType="hc:ComboBox" />
	<Style BasedOn="{StaticResource WatermarkTextBoxBaseStyle}" TargetType="hc:WatermarkTextBox" />
	<Style BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="TextBox" />
	<Style x:Key="TextBoxExtend" BasedOn="{StaticResource TextBoxExtendBaseStyle}" TargetType="TextBox" />
	<Style BasedOn="{StaticResource TextBoxPlusBaseStyle}" TargetType="hc:TextBox" />
	<Style BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="MenuItem" />
	<Style BasedOn="{StaticResource MenuBaseStyle}" TargetType="Menu" />
	<ControlTemplate x:Key="BadgeTextTemplate" TargetType="hc:Badge">
		<hc:SimplePanel>
			<ContentPresenter />
			<Border x:Name="Border" Visibility="{TemplateBinding ShowBadge,Converter={StaticResource Boolean2VisibilityConverter}}" RenderTransformOrigin="0.5 0.5" Style="{StaticResource BorderCircular}" Margin="{TemplateBinding BadgeMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
				<Border.RenderTransform>
					<ScaleTransform />
				</Border.RenderTransform>
				<ContentPresenter ContentSource="Text" Margin="{TemplateBinding Padding}" />
			</Border>
		</hc:SimplePanel>
		<ControlTemplate.Triggers>
			<EventTrigger RoutedEvent="hc:Badge.ValueChanged">
				<BeginStoryboard>
					<Storyboard AutoReverse="True">
						<DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0" Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}" />
						<DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0" Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}" />
					</Storyboard>
				</BeginStoryboard>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="BadgeProcessingTemplate" TargetType="hc:Badge">
		<hc:SimplePanel>
			<ContentPresenter />
			<Ellipse Visibility="{TemplateBinding ShowBadge,Converter={StaticResource Boolean2VisibilityConverter}}" Height="10" Width="10" Fill="{TemplateBinding Background}" RenderTransformOrigin="0.5 0.5" Margin="{TemplateBinding BadgeMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<Ellipse.OpacityMask>
					<RadialGradientBrush>
						<GradientStop Offset="0" Color="Transparent" />
						<GradientStop Offset="1" Color="Black" />
					</RadialGradientBrush>
				</Ellipse.OpacityMask>
				<Ellipse.RenderTransform>
					<ScaleTransform />
				</Ellipse.RenderTransform>
				<Ellipse.Triggers>
					<EventTrigger RoutedEvent="Loaded">
						<BeginStoryboard>
							<Storyboard RepeatBehavior="Forever" DesiredFrameRate="20">
								<DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
								<DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
								<DoubleAnimation Storyboard.TargetProperty="Opacity" BeginTime="0" Duration="0:0:1" From="1" To="0" EasingFunction="{StaticResource SineEaseOut}" />
							</Storyboard>
						</BeginStoryboard>
					</EventTrigger>
				</Ellipse.Triggers>
			</Ellipse>
			<Border Visibility="{TemplateBinding ShowBadge,Converter={StaticResource Boolean2VisibilityConverter}}" Margin="{TemplateBinding BadgeMargin}" Width="10" Height="10" CornerRadius="5" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
		</hc:SimplePanel>
	</ControlTemplate>
	<Style x:Key="BadgeBaseStyle" TargetType="hc:Badge">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource RegionBrush}" />
		<Setter Property="Padding" Value="6,2" />
		<Setter Property="Template" Value="{StaticResource BadgeTextTemplate}" />
		<Setter Property="HorizontalContentAlignment" Value="Right" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="BadgeMargin" Value="0,-10,-10,0" />
		<Style.Triggers>
			<Trigger Property="Status" Value="Dot">
				<Setter Property="Template" Value="{StaticResource BadgeDotTemplate}" />
				<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
				<Setter Property="BadgeMargin" Value="0,-5,-5,0" />
			</Trigger>
			<Trigger Property="Status" Value="Processing">
				<Setter Property="Template" Value="{StaticResource BadgeProcessingTemplate}" />
				<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
				<Setter Property="BadgeMargin" Value="0,-5,-5,0" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="CardBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:Card">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Card">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<Border BorderThickness="0,0,0,1" Visibility="{TemplateBinding Header, Converter={StaticResource Object2VisibilityConverter}}" BorderBrush="{TemplateBinding BorderBrush}">
								<ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" />
							</Border>
							<ContentPresenter Grid.Row="1" />
							<Border Grid.Row="2" BorderThickness="0,1,0,0" Visibility="{TemplateBinding Footer, Converter={StaticResource Object2VisibilityConverter}}" BorderBrush="{TemplateBinding BorderBrush}">
								<ContentPresenter ContentSource="Footer" ContentTemplate="{TemplateBinding FooterTemplate}" ContentTemplateSelector="{TemplateBinding FooterTemplateSelector}" ContentStringFormat="{TemplateBinding FooterStringFormat}" />
							</Border>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ChatBubbleStringBaseTemplate" TargetType="hc:ChatBubble">
		<hc:SimplePanel>
			<Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
			<Border Name="Body" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
				<TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
			</Border>
		</hc:SimplePanel>
		<ControlTemplate.Triggers>
			<Trigger Property="Role" Value="Receiver">
				<Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
				<Setter TargetName="Tail" Property="RenderTransform">
					<Setter.Value>
						<TransformGroup>
							<ScaleTransform ScaleY="1" ScaleX="-1" />
						</TransformGroup>
					</Setter.Value>
				</Setter>
				<Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ChatBubbleImageBaseTemplate" TargetType="hc:ChatBubble">
		<hc:SimplePanel>
			<Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
			<Border Name="Body" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
				<hc:SimplePanel>
					<Image Margin="{TemplateBinding Padding}" VerticalAlignment="Center" Source="{TemplateBinding Content}" />
					<Border BorderThickness="{TemplateBinding Padding}" BorderBrush="{TemplateBinding Background}" Background="{x:Null}" CornerRadius="15" />
				</hc:SimplePanel>
			</Border>
		</hc:SimplePanel>
		<ControlTemplate.Triggers>
			<Trigger Property="Role" Value="Receiver">
				<Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
				<Setter TargetName="Tail" Property="RenderTransform">
					<Setter.Value>
						<TransformGroup>
							<ScaleTransform ScaleY="1" ScaleX="-1" />
						</TransformGroup>
					</Setter.Value>
				</Setter>
				<Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ChatBubbleAudioBaseTemplate" TargetType="hc:ChatBubble">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="12" Name="Definition1" />
				<ColumnDefinition Name="Definition2" />
			</Grid.ColumnDefinitions>
			<Ellipse Name="Dot" VerticalAlignment="Top" Fill="{DynamicResource DangerBrush}" Width="6" Height="6" Visibility="{TemplateBinding IsRead,Converter={StaticResource Boolean2VisibilityReConverter}}" Margin="0,0,6,0" />
			<Path Name="Tail" Grid.Column="1" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
			<Border Name="Body" Grid.Column="1" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
				<Grid VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<ContentPresenter Name="Presenter" VerticalAlignment="Center" />
					<Path Name="Audio" Grid.Column="1" Data="{StaticResource AudioGeometry}" Fill="{TemplateBinding Foreground}" Width="16" Height="16" Margin="6,0,0,0" RenderTransformOrigin="0.5,0.5">
						<Path.RenderTransform>
							<TransformGroup>
								<ScaleTransform ScaleY="1" ScaleX="-1" />
							</TransformGroup>
						</Path.RenderTransform>
					</Path>
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="Role" Value="Receiver">
				<Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
				<Setter TargetName="Tail" Property="RenderTransform">
					<Setter.Value>
						<TransformGroup>
							<ScaleTransform ScaleY="1" ScaleX="-1" />
						</TransformGroup>
					</Setter.Value>
				</Setter>
				<Setter TargetName="Tail" Property="Grid.Column" Value="0" />
				<Setter TargetName="Dot" Property="Grid.Column" Value="1" />
				<Setter TargetName="Dot" Property="Margin" Value="6,0,0,0" />
				<Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
				<Setter TargetName="Body" Property="Grid.Column" Value="0" />
				<Setter TargetName="Definition1" Property="Width" Value="Auto" />
				<Setter TargetName="Definition2" Property="Width" Value="12" />
				<Setter TargetName="Audio" Property="Grid.Column" Value="0" />
				<Setter TargetName="Audio" Property="Margin" Value="0,0,6,0" />
				<Setter TargetName="Audio" Property="RenderTransform">
					<Setter.Value>
						<TransformGroup>
							<ScaleTransform ScaleY="1" ScaleX="1" />
						</TransformGroup>
					</Setter.Value>
				</Setter>
				<Setter TargetName="Presenter" Property="Grid.Column" Value="1" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ChatBubbleCustomBaseTemplate" TargetType="hc:ChatBubble">
		<hc:SimplePanel>
			<Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
			<Border Name="Body" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
				<ContentPresenter VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
			</Border>
		</hc:SimplePanel>
		<ControlTemplate.Triggers>
			<Trigger Property="Role" Value="Receiver">
				<Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
				<Setter TargetName="Tail" Property="RenderTransform">
					<Setter.Value>
						<TransformGroup>
							<ScaleTransform ScaleY="1" ScaleX="-1" />
						</TransformGroup>
					</Setter.Value>
				</Setter>
				<Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ChatBubbleBaseStyle" TargetType="hc:ChatBubble">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="Background" Value="{DynamicResource DarkPrimaryBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Margin" Value="10" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Template" Value="{StaticResource ChatBubbleStringBaseTemplate}" />
		<Setter Property="IsRead" Value="{Binding IsSelected,RelativeSource={RelativeSource Self}}" />
		<Setter Property="MaxWidth" Value="280" />
		<Style.Triggers>
			<Trigger Property="Role" Value="Receiver">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
				<Setter Property="HorizontalAlignment" Value="Left" />
			</Trigger>
			<Trigger Property="Type" Value="Image">
				<Setter Property="Template" Value="{StaticResource ChatBubbleImageBaseTemplate}" />
				<Setter Property="MaxHeight" Value="280" />
			</Trigger>
			<Trigger Property="Type" Value="Audio">
				<Setter Property="Template" Value="{StaticResource ChatBubbleAudioBaseTemplate}" />
			</Trigger>
			<Trigger Property="Type" Value="Custom">
				<Setter Property="Template" Value="{StaticResource ChatBubbleCustomBaseTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="Tag4CheckComboBoxStyle" BasedOn="{StaticResource TagBaseStyle}" TargetType="hc:Tag">
		<Setter Property="Margin" Value="0,3,3,0" />
		<Setter Property="Padding" Value="6,3,4,3" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Tag">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							<Button Focusable="False" Name="ButtonClose" Visibility="{TemplateBinding ShowCloseButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Close" Margin="10,0,0,0" Width="16" Height="16" Padding="0,4" Grid.Column="1" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource CloseGeometry}" Foreground="{TemplateBinding Foreground}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True" SourceName="ButtonClose">
							<Setter Property="hc:IconElement.Geometry" Value="{StaticResource DeleteFillCircleGeometry}" TargetName="ButtonClose" />
							<Setter Property="Padding" Value="0" TargetName="ButtonClose" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CheckComboBoxToggleButton" BasedOn="{StaticResource ComboBoxToggleButton}" TargetType="ToggleButton">
		<Setter Property="ClickMode" Value="Release" />
	</Style>
	<Style x:Key="CheckComboBoxWatermarkToggleButton" BasedOn="{StaticResource ComboBoxWatermarkToggleButton}" TargetType="ToggleButton">
		<Setter Property="ClickMode" Value="Release" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="30" />
						</Grid.ColumnDefinitions>
						<Border Grid.ColumnSpan="2" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" />
						<Path Grid.Column="1" x:Name="arrow" Data="{StaticResource DownGeometry}" Stretch="Uniform" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" Margin="7" VerticalAlignment="Center" />
						<Border Margin="1" Grid.Column="0" Visibility="{Binding SelectedItem,RelativeSource={RelativeSource AncestorType=hc:CheckComboBox},Converter={StaticResource Object2VisibilityReConverter}}">
							<ContentPresenter Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Data" TargetName="arrow" Value="{StaticResource UpGeometry}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value=".4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CheckComboBoxItemBaseStyle" TargetType="hc:CheckComboBoxItem">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:CheckComboBoxItem">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{Binding Padding,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ThicknessSplitConverter},ConverterParameter='1,0,1,0'}" SnapsToDevicePixels="true">
						<CheckBox Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Stretch" MinHeight="{TemplateBinding MinHeight}" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</CheckBox>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="CheckComboBoxTemplate" TargetType="hc:CheckComboBox">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" StaysOpen="False" IsOpen="{Binding IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<Grid Margin="0,4" ClipToBounds="False">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" Visibility="{Binding ShowSelectAllButton,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" HorizontalContentAlignment="Stretch" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
								<ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Grid>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" Style="{StaticResource CheckComboBoxToggleButton}" />
			<Border Grid.Column="0" Margin="-1,1">
				<WrapPanel Name="PART_Panel" Margin="5,0,5,3" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="PART_Panel" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="CheckComboBoxBaseStyle" TargetType="hc:CheckComboBox">
		<Setter Property="TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle}" />
		<Setter Property="SelectionMode" Value="Multiple" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource CheckComboBoxItemBaseStyle}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="Template" Value="{StaticResource CheckComboBoxTemplate}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<ControlTemplate x:Key="CheckComboBoxExtendTopTemplate" TargetType="hc:CheckComboBox">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup x:Name="PART_Popup" Grid.Row="1" Grid.Column="0" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" IsOpen="{Binding IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<Grid Margin="0,4" ClipToBounds="False">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" Visibility="{Binding ShowSelectAllButton,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" HorizontalContentAlignment="Stretch" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
								<ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Grid>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" />
			<Border Grid.Row="1" Grid.Column="0" Margin="1,0">
				<WrapPanel Name="PART_Panel" Margin="3,1,3,4" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="PART_Panel" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="CheckComboBoxExtendLeftTemplate" TargetType="hc:CheckComboBox">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="30" />
			</Grid.ColumnDefinitions>
			<StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<Grid Margin="0,4" ClipToBounds="False">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" Visibility="{Binding ShowSelectAllButton,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" HorizontalContentAlignment="Stretch" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
								<ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Grid>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<ToggleButton Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" />
			<Border Grid.Column="1" Margin="1,0">
				<WrapPanel Name="PART_Panel" Margin="3,1,3,4" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="PART_Panel" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="CheckComboBoxExtendBaseStyle" BasedOn="{StaticResource CheckComboBoxBaseStyle}" TargetType="hc:CheckComboBox">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Template" Value="{StaticResource CheckComboBoxExtendTopTemplate}" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource CheckComboBoxExtendLeftTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="CheckComboBoxPlusTopTemplate" TargetType="hc:CheckComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Row="1" Grid.Column="0" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<Grid Margin="0,4" ClipToBounds="False">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" Visibility="{Binding ShowSelectAllButton,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" HorizontalContentAlignment="Stretch" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
								<ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Grid>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="0" Grid.ColumnSpan="2" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
			<ToggleButton Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" />
			<Border Grid.Row="1" Grid.Column="0" Margin="1,0">
				<WrapPanel Name="PART_Panel" Margin="3,1,3,4" />
			</Border>
			<Button Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="PART_Panel" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="CheckComboBoxPlusLeftTemplate" TargetType="hc:CheckComboBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" MinWidth="30" />
			</Grid.ColumnDefinitions>
			<StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Popup Grid.Column="1" x:Name="PART_Popup" PlacementTarget="{Binding ElementName=toggleButton}" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Border Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="8,0,8,8" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
					<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
						<hc:ToggleBlock.CheckedContent>
							<Grid Margin="0,4" ClipToBounds="False">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" Visibility="{Binding ShowSelectAllButton,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" HorizontalContentAlignment="Stretch" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
								<ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Grid>
						</hc:ToggleBlock.CheckedContent>
						<hc:ToggleBlock.UnCheckedContent>
							<hc:Empty />
						</hc:ToggleBlock.UnCheckedContent>
					</hc:ToggleBlock>
				</Border>
			</Popup>
			<TextBlock Grid.Column="1" Grid.ColumnSpan="2" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<ToggleButton Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Content="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" />
			<Border Grid.Column="1" Margin="1,0">
				<WrapPanel Name="PART_Panel" Margin="3,1,3,4" />
			</Border>
			<Button Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95" />
			</Trigger>
			<Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
				<Setter Property="MaxWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
				<Setter Property="MinWidth" TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=toggleButton}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="toggleButton" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="ButtonClear" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="toggleButton" />
				<Setter Property="Opacity" Value="0.4" TargetName="PART_Panel" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="CheckComboBoxPlusBaseStyle" BasedOn="{StaticResource CheckComboBoxExtendBaseStyle}" TargetType="hc:CheckComboBox">
		<Setter Property="Template" Value="{StaticResource CheckComboBoxPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource CheckComboBoxPlusLeftTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="ColorPickerSliderHorizontal" TargetType="Slider">
		<hc:SimplePanel>
			<Border Margin="7,0" Background="{TemplateBinding Background}" MaxHeight="11" CornerRadius="2" />
			<Border Margin="7,0" Background="{TemplateBinding Foreground}" MaxHeight="11" CornerRadius="2">
				<Border.OpacityMask>
					<LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
						<GradientStop Color="Transparent" Offset="1" />
						<GradientStop Color="White" Offset="0" />
					</LinearGradientBrush>
				</Border.OpacityMask>
			</Border>
			<Track x:Name="PART_Track">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}" />
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="Thumb" Focusable="False" Height="13" Width="13" OverridesDefaultStyle="True" Template="{StaticResource ColorPickerSliderThumbTemplate}" VerticalAlignment="Center">
						<Thumb.Effect>
							<DropShadowEffect ShadowDepth="0" Opacity=".6" />
						</Thumb.Effect>
					</Thumb>
				</Track.Thumb>
			</Track>
		</hc:SimplePanel>
	</ControlTemplate>
	<ControlTemplate x:Key="ColorPickerSliderVertical" TargetType="Slider">
		<hc:SimplePanel>
			<Border Margin="0,7" CornerRadius="2" MaxWidth="11" Background="{TemplateBinding Background}" />
			<Border Margin="0,7" CornerRadius="2" MaxWidth="11" Background="{TemplateBinding Foreground}">
				<Border.OpacityMask>
					<LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
						<GradientStop Color="Transparent" Offset="1" />
						<GradientStop Color="White" Offset="0" />
					</LinearGradientBrush>
				</Border.OpacityMask>
			</Border>
			<Track x:Name="PART_Track">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}" />
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="Thumb" Focusable="False" Height="13" OverridesDefaultStyle="True" Template="{StaticResource ColorPickerSliderThumbTemplate}" VerticalAlignment="Top" Width="13">
						<Thumb.Effect>
							<DropShadowEffect ShadowDepth="0" Opacity=".6" />
						</Thumb.Effect>
					</Thumb>
				</Track.Thumb>
			</Track>
		</hc:SimplePanel>
	</ControlTemplate>
	<Style x:Key="ColorPickerSlider" BasedOn="{StaticResource BaseStyle}" TargetType="Slider">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="Transparent" />
		<Setter Property="Template" Value="{StaticResource ColorPickerSliderHorizontal}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{StaticResource ColorPickerSliderVertical}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ColorPickerBaseStyle" TargetType="hc:ColorPicker">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Width" Value="230" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ColorPicker">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="122" />
							<RowDefinition Height="110" />
							<RowDefinition Height="62" />
							<RowDefinition Height="62" />
						</Grid.RowDefinitions>
						<Border BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Grid.RowSpan="4" Background="{TemplateBinding Background}" />
						<hc:SimplePanel Margin="1" Grid.Row="0">
							<Border Background="{TemplateBinding BackColor}" />
							<Border>
								<Border.Background>
									<LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
										<GradientStop Color="White" Offset="1" />
										<GradientStop Color="#80ffffff" Offset=".5" />
										<GradientStop Color="#00ffffff" />
									</LinearGradientBrush>
								</Border.Background>
							</Border>
							<Border>
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="Black" Offset="1" />
										<GradientStop Color="#80000000" Offset=".5" />
										<GradientStop Color="#00000000" />
									</LinearGradientBrush>
								</Border.Background>
							</Border>
						</hc:SimplePanel>
						<Border Name="PART_BorderColor" Grid.Row="0" CornerRadius="2,2,0,0" ClipToBounds="True">
							<Canvas Margin="-6">
								<Border Name="PART_BorderPicker" Background="Transparent" Height="12" CornerRadius="6" Width="12" BorderThickness="1" BorderBrush="White">
									<Border.Effect>
										<DropShadowEffect ShadowDepth="0" Opacity=".4" />
									</Border.Effect>
								</Border>
							</Canvas>
						</Border>
						<Border Grid.Row="0" Background="Transparent" Name="PART_BorderDrag" />
						<Grid Margin="16,16,10,0" Grid.Row="1">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition />
								<ColumnDefinition Width="28" />
							</Grid.ColumnDefinitions>
							<ToggleButton Name="PART_ButtonDropper" Width="16" Height="16" Margin="0,0,10,0" Style="{StaticResource ToggleButtonCustom}" hc:StatusSwitchElement.HideUncheckedElement="True">
								<Path Stretch="Uniform" Data="{StaticResource DropperGeometry}" Fill="{DynamicResource PrimaryTextBrush}" />
								<hc:StatusSwitchElement.CheckedElement>
									<Path Stretch="Uniform" Data="{StaticResource DropperGeometry}" Fill="{DynamicResource DarkPrimaryBrush}" />
								</hc:StatusSwitchElement.CheckedElement>
							</ToggleButton>
							<Border Grid.Row="0" Grid.Column="1" Width="32" Height="32" CornerRadius="16" Background="{StaticResource ColorPickerOpacityBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" />
							<Border Grid.Row="0" Grid.Column="1" Width="32" Height="32" CornerRadius="16" Background="{TemplateBinding SelectedBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" />
							<Slider Name="PART_SliderColor" LargeChange="0.01" SmallChange="0.01" Grid.ColumnSpan="2" Value="6" Maximum="6" Background="{StaticResource ColorPickerRainbowBrush}" Margin="2,1,0,0" Grid.Row="0" Grid.Column="2" VerticalAlignment="Top" Style="{StaticResource ColorPickerSlider}" IsMoveToPointEnabled="True" />
							<Slider Name="PART_SliderOpacity" Grid.ColumnSpan="2" IsSnapToTickEnabled="True" Value="{Binding ChannelA,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" Maximum="255" SmallChange="1" Foreground="{TemplateBinding SelectedBrushWithoutOpacity}" Background="{StaticResource ColorPickerOpacityBrush}" Margin="2,0,0,0" Grid.Row="0" Grid.Column="2" VerticalAlignment="Bottom" Style="{StaticResource ColorPickerSlider}" IsMoveToPointEnabled="True" />
							<StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="0,14,0,0" VerticalAlignment="Top" Visibility="{Binding ShowList[0],RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}">
								<TextBox Padding="0" HorizontalContentAlignment="Center" Width="176" Text="{Binding SelectedBrush,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay,Converter={StaticResource Color2HexStringConverter},UpdateSourceTrigger=LostFocus}" FontSize="10" MaxLength="10" Height="24" />
								<TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="HEX" HorizontalAlignment="Center" />
							</StackPanel>
							<UniformGrid Name="PART_PanelRgb" Visibility="{Binding ShowList[1],RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" Rows="1" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="-2,14,-2,0" VerticalAlignment="Top">
								<StackPanel Margin="2,0">
									<hc:NumericUpDown HorizontalContentAlignment="Center" Padding="2,0" Tag="R" Value="{Binding ChannelR,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" />
									<TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="R" HorizontalAlignment="Center" />
								</StackPanel>
								<StackPanel Margin="2,0">
									<hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" Tag="G" Value="{Binding ChannelG,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" />
									<TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="G" HorizontalAlignment="Center" />
								</StackPanel>
								<StackPanel Margin="2,0">
									<hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" Tag="B" Value="{Binding ChannelB,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" />
									<TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="B" HorizontalAlignment="Center" />
								</StackPanel>
								<StackPanel Margin="2,0">
									<hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" Value="{Binding ChannelA,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" />
									<TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="A" HorizontalAlignment="Center" />
								</StackPanel>
							</UniformGrid>
							<Button Command="interactivity:ControlCommands.Switch" Padding="6" FontSize="8" BorderThickness="0" HorizontalAlignment="Right" Height="24" Width="20" Grid.Column="3" Grid.Row="1">
								<Button.Content>
									<Path Fill="#323534" Style="{StaticResource UpDownPathStyle}" />
								</Button.Content>
							</Button>
						</Grid>
						<Border Grid.Row="2" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}">
							<WrapPanel Name="PART_PanelColor" Margin="6" HorizontalAlignment="Center" />
						</Border>
						<Border Grid.Row="3" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}">
							<StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
								<Button Command="interactivity:ControlCommands.Cancel" Content="{ex:Lang Key={x:Static langs:LangKeys.Cancel}}" Width="80" Margin="0,0,16,0" />
								<Button Command="interactivity:ControlCommands.Confirm" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" Width="80" Style="{StaticResource ButtonPrimary}" />
							</StackPanel>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ContextMenuBaseStyle" TargetType="ContextMenu">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContextMenu">
					<Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{TemplateBinding Background}" CornerRadius="2" MaxHeight="{TemplateBinding MaxHeight}" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}">
						<ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="0,6">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CoverViewContentBaseStyle" TargetType="hc:CoverViewContent">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Margin" Value="0,0,0,8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:CoverViewContent">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="16" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Border x:Name="PART_Triangle" Visibility="Visible" Grid.Row="0" Width="30" Height="30" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.RowSpan="2">
							<Border.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="5" Y="5" />
									<RotateTransform Angle="45" />
								</TransformGroup>
							</Border.RenderTransform>
						</Border>
						<Border x:Name="PART_Content" MinHeight="30" Height="0" Grid.Row="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
							<ContentPresenter Margin="{TemplateBinding Padding}" />
						</Border>
						<Rectangle SnapsToDevicePixels="True" Visibility="{Binding Visibility,ElementName=PART_Triangle}" Grid.Row="1" VerticalAlignment="Top" HorizontalAlignment="Left" Width="28" Margin="{Binding Margin,ElementName=PART_Triangle}" Height="1" Fill="{TemplateBinding Background}">
							<Rectangle.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="1" />
								</TransformGroup>
							</Rectangle.RenderTransform>
						</Rectangle>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CoverViewBaseStyle" TargetType="hc:CoverView">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource CoverViewItemBaseStyle}" />
		<Setter Property="CoverViewContentStyle" Value="{StaticResource CoverViewContentBaseStyle}" />
		<Setter Property="ItemMargin" Value="8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:CoverView">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<ScrollViewer>
							<WrapPanel x:Name="PART_Panel" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DatePickerTextBoxStyle" TargetType="DatePickerTextBox">
		<Setter Property="Foreground" Value="{Binding Foreground,RelativeSource={RelativeSource AncestorType=DatePicker}}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DatePickerTextBox">
					<hc:SimplePanel>
						<TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource AncestorType=DatePicker}}" TextElement.Foreground="{DynamicResource ThirdlyTextBrush}" Visibility="{TemplateBinding Text,Converter={StaticResource String2VisibilityReConverter}}" />
						<ScrollViewer Margin="-2,0" Padding="{TemplateBinding Padding}" x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DatePickerBaseStyle" TargetType="DatePicker">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="CalendarStyle" Value="{StaticResource CalendarBaseStyle}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="IsTodayHighlighted" Value="True" />
		<Setter Property="SelectedDateFormat" Value="Short" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DatePicker">
					<Border x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="30" />
							</Grid.ColumnDefinitions>
							<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource CalendarGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
							<DatePickerTextBox Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
							<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
						</MultiTrigger>
						<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="DatePickerExtendTopTemplate" TargetType="DatePicker">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource CalendarGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="DatePickerExtendLeftTemplate" TargetType="DatePicker">
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource CalendarGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="DatePickerExtendBaseStyle" BasedOn="{StaticResource DatePickerBaseStyle}" TargetType="DatePicker">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Template" Value="{StaticResource DatePickerExtendTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource DatePickerExtendLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="DatePickerPlusTopTemplate" TargetType="hc:DatePicker">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Grid.Row="1" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource CalendarGeometry}" x:Name="PART_Button" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="DatePickerPlusLeftTemplate" TargetType="hc:DatePicker">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource CalendarGeometry}" x:Name="PART_Button" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" />
					<DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="DatePickerPlusBaseStyle" BasedOn="{StaticResource DatePickerExtendBaseStyle}" TargetType="hc:DatePicker">
		<Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Template" Value="{StaticResource DatePickerPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource DatePickerPlusLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DateTimePickerBaseStyle" TargetType="hc:DateTimePicker">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:DateTimePicker">
					<Border x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="30" />
							</Grid.ColumnDefinitions>
							<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
							<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</MultiTrigger>
						<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="DateTimePickerExtendTopTemplate" TargetType="hc:DateTimePicker">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="DateTimePickerExtendLeftTemplate" TargetType="hc:DateTimePicker">
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="DateTimePickerExtendBaseStyle" BasedOn="{StaticResource DateTimePickerBaseStyle}" TargetType="hc:DateTimePicker">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Template" Value="{StaticResource DateTimePickerExtendTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource DateTimePickerExtendLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="DateTimePickerPlusTopTemplate" TargetType="hc:DateTimePicker">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Grid.Row="1" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="DateTimePickerPlusLeftTemplate" TargetType="hc:DateTimePicker">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="DateTimePickerPlusBaseStyle" BasedOn="{StaticResource DateTimePickerExtendBaseStyle}" TargetType="hc:DateTimePicker">
		<Setter Property="Template" Value="{StaticResource DateTimePickerPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource DateTimePickerPlusLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DialogBaseStyle" TargetType="hc:Dialog">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Dialog">
					<Border Background="{DynamicResource DarkOpacityBrush}">
						<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DividerBaseStyle" TargetType="hc:Divider">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Margin" Value="0,24" />
		<Setter Property="Padding" Value="24,0" />
		<Setter Property="LineStroke" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Divider">
					<hc:Row>
						<hc:Col Layout="12" x:Name="ColStart">
							<Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}" X2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
						</hc:Col>
						<hc:Col Layout="0">
							<ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
						</hc:Col>
						<hc:Col Layout="12" x:Name="ColEnd">
							<Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}" X2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
						</hc:Col>
					</hc:Row>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Padding" Value="0" />
						</Trigger>
						<Trigger Property="HorizontalContentAlignment" Value="Left">
							<Setter TargetName="ColStart" Property="Layout" Value="0" />
							<Setter TargetName="ColStart" Property="IsFixed" Value="True" />
							<Setter TargetName="ColStart" Property="Width" Value="20" />
							<Setter TargetName="ColEnd" Property="Layout" Value="24" />
						</Trigger>
						<Trigger Property="HorizontalContentAlignment" Value="Right">
							<Setter TargetName="ColEnd" Property="Layout" Value="0" />
							<Setter TargetName="ColEnd" Property="IsFixed" Value="True" />
							<Setter TargetName="ColEnd" Property="Width" Value="20" />
							<Setter TargetName="ColStart" Property="Layout" Value="24" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Content" Value="{x:Null}">
				<Setter Property="Padding" Value="0" />
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Margin" Value="6,0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="hc:Divider">
							<Line HorizontalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}" Y2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DrawerBaseStyle" TargetType="hc:Drawer">
		<Setter Property="Dock" Value="Right" />
		<Setter Property="MaskBrush" Value="{DynamicResource DarkOpacityBrush}" />
	</Style>
	<DrawingBrush x:Key="EmptySimpleLogo" o:Freeze="True">
		<DrawingBrush.Drawing>
			<DrawingGroup o:Freeze="True">
				<GeometryDrawing o:Freeze="True" Brush="{DynamicResource SecondaryRegionBrush}" Geometry="F1 M1638,1024z M0,0z M0,844.8C0,942.250667 361.096533,1021.269333 806.536533,1021.269333 1251.976533,1021.269333 1613.038933,942.250666 1613.038933,844.8 1613.038933,747.383467 1251.9424,668.398933 806.536533,668.398933 361.096533,668.398933 0,747.383467 0,844.8z" />
				<GeometryDrawing o:Freeze="True" Brush="{DynamicResource BorderBrush}" Geometry="F1 M1638,1024z M0,0z M1398.784,580.164267L214.254933,580.164267 214.254933,330.6496 473.873067,35.771733C486.4,13.1072,509.1328,0.477867,531.797333,0.477867L1081.2416,0.477867C1103.940267,0.477867,1126.638933,13.1072,1141.725867,38.2976L1398.818133,330.6496 1398.818133,580.164267z M239.479467,555.008L1373.627733,555.008 1373.627733,338.261333 1121.553067,50.858667C1108.992,33.245867,1096.362667,23.210667,1081.2416,23.210667L531.797333,23.210667C516.676266,23.210667,504.081066,33.28,493.9776,48.401067L239.445333,340.753067 239.445333,554.973867z" />
				<GeometryDrawing o:Freeze="True" Brush="{DynamicResource SecondaryRegionBrush}" Geometry="F1 M1638,1024z M0,0z M1048.4736,413.832533C1048.4736,373.521066,1073.664,340.753066,1103.940267,340.753067L1386.222933,340.753067 1386.222933,796.945067C1386.222933,849.851734,1353.454933,895.249067,1310.583467,895.249067L302.455467,895.249067C262.109867,895.249067,226.850134,852.3776,226.850133,796.945067L226.850133,340.753067 509.1328,340.753067C539.374933,340.753067 564.565333,373.521067 564.565333,413.832533 564.565333,454.143999 589.755733,486.912 619.997867,486.912L993.041067,486.912C1023.2832,489.437867,1048.4736,454.144,1048.4736,413.832533z" />
				<GeometryDrawing o:Freeze="True" Brush="{DynamicResource BorderBrush}" Geometry="F1 M1638,1024z M0,0z M1310.583467,907.844267L302.455467,907.844267C254.5664,907.844267,214.2208,857.429334,214.2208,796.910933L214.2208,328.192 509.1328,328.192C546.9184,328.192 577.160533,365.9776 577.160533,413.866667 577.160533,446.634667 597.2992,474.350934 619.997867,474.350933L993.041067,474.350933C1015.7056,474.350933 1035.8784,446.634666 1035.8784,413.866667 1035.8784,365.9776 1066.120533,328.192 1103.940267,328.192L1398.818133,328.192 1398.818133,796.9792C1398.818133,857.463467,1360.9984,907.8784,1310.583467,907.8784z M239.445333,353.348267L239.445333,796.945067C239.445333,844.834134,267.1616,882.619734,302.455467,882.619733L1310.583467,882.619733C1345.877334,882.619733,1373.5936,844.834133,1373.5936,796.945067L1373.5936,353.348267 1103.940267,353.348267C1081.2416,353.348267 1061.0688,381.064534 1061.0688,413.832533 1061.0688,461.7216 1030.826667,499.5072 993.041067,499.5072L619.997867,499.5072C582.212267,499.5072 551.970134,461.7216 551.970133,413.832533 551.970133,381.064533 531.831466,350.8224 509.1328,350.8224L239.445333,350.8224 239.445333,353.348267z" />
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>
	<Rectangle x:Key="LogoRectangle4Empty" x:Shared="False" HorizontalAlignment="Center" Width="64" Height="41" Fill="{StaticResource EmptySimpleLogo}" />
	<TextBlock x:Key="DescriptionTextBlock4Empty" x:Shared="False" Margin="0,10,0,0" HorizontalAlignment="Center" Foreground="{DynamicResource ThirdlyTextBrush}" Text="{ex:Lang Key={x:Static langs:LangKeys.NoData}}" />
	<Style x:Key="EmptyBaseStyle" TargetType="hc:Empty">
		<Setter Property="Logo" Value="{StaticResource LogoRectangle4Empty}" />
		<Setter Property="Description" Value="{StaticResource DescriptionTextBlock4Empty}" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Visibility" Value="{Binding Path=(hc:Empty.ShowEmpty),RelativeSource={RelativeSource Self},Converter={StaticResource Boolean2VisibilityConverter}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Empty">
					<hc:SimpleStackPanel>
						<ContentPresenter ContentSource="Logo" />
						<ContentPresenter ContentSource="Description" />
						<ContentPresenter HorizontalAlignment="Center" />
					</hc:SimpleStackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ExpanderLeftTemplate" TargetType="Expander">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Border x:Name="BorderHeader" Grid.Column="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<ToggleButton VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" Padding="0,0,0,10" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinWidth}" Style="{StaticResource ToggleButtonCustom}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="32" />
						</Grid.ColumnDefinitions>
						<Grid.LayoutTransform>
							<TransformGroup>
								<RotateTransform Angle="-90" />
							</TransformGroup>
						</Grid.LayoutTransform>
						<ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource UpGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
					</Grid>
				</ToggleButton>
			</Border>
			<ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="0" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsExpanded" Value="true">
				<Setter Property="CornerRadius" TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,1,1,0'}" />
				<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
				<Setter Property="Data" TargetName="PathArrow" Value="{StaticResource DownGeometry}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ExpanderUpTemplate" TargetType="Expander">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<Border x:Name="BorderHeader" Grid.Row="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<ToggleButton HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Focusable="False" Padding="10,0,0,0" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{TemplateBinding MinHeight}" Style="{StaticResource ToggleButtonCustom}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="32" />
						</Grid.ColumnDefinitions>
						<ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource UpGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
					</Grid>
				</ToggleButton>
			</Border>
			<ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="0" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsExpanded" Value="true">
				<Setter Property="CornerRadius" TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,0,1,1'}" />
				<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
				<Setter Property="Data" TargetName="PathArrow" Value="{StaticResource DownGeometry}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ExpanderRightTemplate" TargetType="Expander">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<Border x:Name="BorderHeader" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<ToggleButton VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" Padding="0,0,0,10" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{TemplateBinding MinWidth}" Style="{StaticResource ToggleButtonCustom}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="32" />
						</Grid.ColumnDefinitions>
						<Grid.LayoutTransform>
							<TransformGroup>
								<RotateTransform Angle="-90" />
							</TransformGroup>
						</Grid.LayoutTransform>
						<ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource DownGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
					</Grid>
				</ToggleButton>
			</Border>
			<ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="1" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsExpanded" Value="true">
				<Setter Property="CornerRadius" TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,0,0,1'}" />
				<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
				<Setter Property="Data" TargetName="PathArrow" Value="{StaticResource UpGeometry}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ExpanderDownTemplate" TargetType="Expander">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
			</Grid.RowDefinitions>
			<Border x:Name="BorderHeader" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<ToggleButton HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Focusable="False" Padding="10,0,0,0" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Width="{TemplateBinding Width}" Height="{TemplateBinding MinHeight}" Style="{StaticResource ToggleButtonCustom}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="32" />
						</Grid.ColumnDefinitions>
						<ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource DownGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
					</Grid>
				</ToggleButton>
			</Border>
			<ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="1" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsExpanded" Value="true">
				<Setter Property="CornerRadius" TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}" />
				<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
				<Setter Property="Data" TargetName="PathArrow" Value="{StaticResource UpGeometry}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ExpanderBaseStyle" TargetType="Expander">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="MinWidth" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template" Value="{StaticResource ExpanderDownTemplate}" />
		<Style.Triggers>
			<Trigger Property="ExpandDirection" Value="Left">
				<Setter Property="Template" Value="{StaticResource ExpanderLeftTemplate}" />
			</Trigger>
			<Trigger Property="ExpandDirection" Value="Up">
				<Setter Property="Template" Value="{StaticResource ExpanderUpTemplate}" />
			</Trigger>
			<Trigger Property="ExpandDirection" Value="Right">
				<Setter Property="Template" Value="{StaticResource ExpanderRightTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="FlowDocumentScrollViewerBaseStyle" TargetType="FlowDocumentScrollViewer">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="FlowDocumentScrollViewer">
					<DockPanel Background="{TemplateBinding Background}" LastChildFill="True">
						<Grid x:Name="PART_ToolBarHost" Panel.ZIndex="1" DockPanel.Dock="Bottom" Margin="0,6">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Border x:Name="PART_FindToolBarHost" Grid.Column="0" HorizontalAlignment="Left" Visibility="Collapsed" VerticalAlignment="Center" />
							<Grid Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<RepeatButton Height="20" Width="20" Padding="5,8" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource SubGeometry}" Grid.Column="0" Command="NavigationCommands.DecreaseZoom" IsEnabled="{TemplateBinding CanDecreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomOut}" />
								<Slider hc:TipElement.Visibility="Visible" hc:TipElement.Placement="Top" Grid.Column="1" HorizontalAlignment="Stretch" LargeChange="{TemplateBinding ZoomIncrement}" Maximum="{TemplateBinding MaxZoom}" Minimum="{TemplateBinding MinZoom}" SmallChange="{TemplateBinding ZoomIncrement}" TickFrequency="{TemplateBinding ZoomIncrement}" Value="{Binding Zoom, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Width="180" />
								<RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource AddGeometry}" Grid.Column="2" Command="NavigationCommands.IncreaseZoom" IsEnabled="{TemplateBinding CanIncreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomIn}" />
							</Grid>
						</Grid>
						<Border Panel.ZIndex="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<ScrollViewer x:Name="PART_ContentHost" CanContentScroll="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Border>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FlowDocumentPageViewerBaseStyle" TargetType="FlowDocumentPageViewer">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="FlowDocumentPageViewer">
					<DockPanel Background="{TemplateBinding Background}" LastChildFill="True">
						<Grid Panel.ZIndex="1" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Margin="0,6">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Border x:Name="PART_FindToolBarHost" Grid.Column="0" HorizontalAlignment="Left" Visibility="Collapsed" VerticalAlignment="Center" />
							<StackPanel Grid.Column="1" HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Center">
								<RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.PreviousPage" IsEnabled="{TemplateBinding CanGoToPreviousPage}" ToolTip="{x:Static langs:Lang.PreviousPage}" />
								<TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
									<Run Text=" " />
									<InlineUIContainer>
										<TextBlock Text="{Binding MasterPageNumber, RelativeSource={RelativeSource TemplatedParent}}" />
									</InlineUIContainer>
									<Run Text=" " />
									<Run Text="/" />
									<Run Text=" " />
									<InlineUIContainer>
										<TextBlock Text="{Binding PageCount, RelativeSource={RelativeSource TemplatedParent}}" />
									</InlineUIContainer>
									<Run Text=" " />
								</TextBlock>
								<RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.NextPage" IsEnabled="{TemplateBinding CanGoToNextPage}" ToolTip="{x:Static langs:Lang.NextPage}" />
							</StackPanel>
							<Grid Grid.Column="2" VerticalAlignment="Center" Margin="32,0,0,0">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<RepeatButton Height="20" Width="20" Padding="5,8" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource SubGeometry}" Grid.Column="0" Command="NavigationCommands.DecreaseZoom" IsEnabled="{TemplateBinding CanDecreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomOut}" />
								<Slider hc:TipElement.Visibility="Visible" hc:TipElement.Placement="Top" Grid.Column="1" HorizontalAlignment="Stretch" LargeChange="{TemplateBinding ZoomIncrement}" Maximum="{TemplateBinding MaxZoom}" Minimum="{TemplateBinding MinZoom}" SmallChange="{TemplateBinding ZoomIncrement}" TickFrequency="{TemplateBinding ZoomIncrement}" Value="{Binding Zoom, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" />
								<RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource AddGeometry}" Grid.Column="2" Command="NavigationCommands.IncreaseZoom" IsEnabled="{TemplateBinding CanIncreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomIn}" />
							</Grid>
						</Grid>
						<Border Panel.ZIndex="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<AdornerDecorator>
								<DocumentPageView HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DocumentPaginator="{x:Null}" KeyboardNavigation.IsTabStop="False" DocumentViewerBase.IsMasterPage="True" PageNumber="0" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" />
							</AdornerDecorator>
						</Border>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FlowDocumentReaderBaseStyle" TargetType="FlowDocumentReader">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="FlowDocumentReader">
					<DockPanel Background="{TemplateBinding Background}" LastChildFill="True">
						<Grid Panel.ZIndex="1" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Margin="0,6">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<StackPanel Orientation="Horizontal">
								<ToggleButton Width="24" Height="24" Padding="5" x:Name="FindButton" hc:IconElement.Geometry="{StaticResource SearchGeometry}" Command="ApplicationCommands.Find" Margin="0,0,10,0" ToolTip="{x:Static langs:Lang.Find}" />
								<Border x:Name="PART_FindToolBarHost" HorizontalAlignment="Left" Visibility="Collapsed" VerticalAlignment="Center" />
							</StackPanel>
							<StackPanel x:Name="PageCountAndButtons" Grid.Column="1" HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Center">
								<RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.PreviousPage" IsEnabled="{TemplateBinding CanGoToPreviousPage}" ToolTip="{x:Static langs:Lang.PreviousPage}" />
								<TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
									<Run Text=" " />
									<InlineUIContainer>
										<TextBlock Text="{Binding PageNumber, RelativeSource={RelativeSource TemplatedParent}}" />
									</InlineUIContainer>
									<Run Text=" " />
									<Run Text="/" />
									<Run Text=" " />
									<InlineUIContainer>
										<TextBlock Text="{Binding PageCount, RelativeSource={RelativeSource TemplatedParent}}" />
									</InlineUIContainer>
									<Run Text=" " />
								</TextBlock>
								<RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.NextPage" IsEnabled="{TemplateBinding CanGoToNextPage}" ToolTip="{x:Static langs:Lang.NextPage}" />
							</StackPanel>
							<Grid Grid.Column="2" Margin="32,0,0,0" VerticalAlignment="Center">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<hc:ButtonGroup Width="90">
									<RadioButton x:Name="PageViewButton" Padding="0" hc:IconElement.Geometry="{StaticResource PageModeGeometry}" CommandParameter="Page" Command="FlowDocumentReader.SwitchViewingModeCommand" GroupName="ViewingMode" IsEnabled="{TemplateBinding IsPageViewEnabled}" ToolTip="{x:Static langs:Lang.PageMode}" />
									<RadioButton x:Name="TwoPageViewButton" hc:IconElement.Geometry="{StaticResource TwoPageModeGeometry}" Padding="0" CommandParameter="TwoPage" Command="FlowDocumentReader.SwitchViewingModeCommand" GroupName="ViewingMode" IsEnabled="{TemplateBinding IsTwoPageViewEnabled}" ToolTip="{x:Static langs:Lang.TwoPageMode}" />
									<RadioButton x:Name="ScrollViewButton" hc:IconElement.Geometry="{StaticResource ScrollModeGeometry}" Padding="0" CommandParameter="Scroll" Command="FlowDocumentReader.SwitchViewingModeCommand" GroupName="ViewingMode" IsEnabled="{TemplateBinding IsScrollViewEnabled}" ToolTip="{x:Static langs:Lang.ScrollMode}" />
								</hc:ButtonGroup>
								<RepeatButton Margin="32,0,0,0" Height="20" Width="20" Padding="5,8" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource SubGeometry}" Grid.Column="1" Command="NavigationCommands.DecreaseZoom" IsEnabled="{TemplateBinding CanDecreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomOut}" />
								<Slider hc:TipElement.Visibility="Visible" hc:TipElement.Placement="Top" Grid.Column="2" HorizontalAlignment="Stretch" LargeChange="{TemplateBinding ZoomIncrement}" Maximum="{TemplateBinding MaxZoom}" Minimum="{TemplateBinding MinZoom}" SmallChange="{TemplateBinding ZoomIncrement}" TickFrequency="{TemplateBinding ZoomIncrement}" Value="{Binding Zoom, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" />
								<RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10" hc:IconElement.Geometry="{StaticResource AddGeometry}" Grid.Column="3" Command="NavigationCommands.IncreaseZoom" IsEnabled="{TemplateBinding CanIncreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomIn}" />
							</Grid>
						</Grid>
						<Border Panel.ZIndex="0" x:Name="PART_ContentHost" KeyboardNavigation.IsTabStop="False" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
					</DockPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="ViewingMode" Value="Page">
							<Setter Property="IsChecked" TargetName="PageViewButton" Value="True" />
						</Trigger>
						<Trigger Property="ViewingMode" Value="TwoPage">
							<Setter Property="IsChecked" TargetName="TwoPageViewButton" Value="True" />
							<Setter Property="BorderThickness" Value="0" />
						</Trigger>
						<Trigger Property="ViewingMode" Value="Scroll">
							<Setter Property="IsChecked" TargetName="ScrollViewButton" Value="True" />
							<Setter Property="Visibility" TargetName="PageCountAndButtons" Value="Collapsed" />
						</Trigger>
						<Trigger Property="Document" Value="{x:Null}">
							<Setter Property="IsEnabled" TargetName="FindButton" Value="False" />
						</Trigger>
						<Trigger Property="IsFindEnabled" Value="False">
							<Setter Property="IsEnabled" TargetName="FindButton" Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="MenuItem4FrameStyle" BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="MenuItem">
		<Setter Property="Header" Value="{Binding (JournalEntry.Name)}" />
		<Setter Property="Command" Value="NavigationCommands.NavigateJournal" />
		<Setter Property="CommandTarget" Value="{Binding TemplatedParent, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
		<Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}" />
	</Style>
	<ControlTemplate x:Key="FrameWithNavigationUIStyle" TargetType="Frame">
		<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
			<DockPanel LastChildFill="True">
				<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}" DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource DarkDefaultBrush}">
					<hc:ButtonGroup x:Name="NavChrome" Width="90" Margin="10,6" HorizontalAlignment="Left">
						<Button Padding="6" hc:IconElement.Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.BrowseBack">
							<Button.ContextMenu>
								<ContextMenu x:Name="BackNavMenu" ItemContainerStyle="{StaticResource MenuItem4FrameStyle}" ItemsSource="{Binding Path=(NavigationWindow.BackStack), RelativeSource={RelativeSource TemplatedParent}}" />
							</Button.ContextMenu>
						</Button>
						<Button Padding="6" hc:IconElement.Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.BrowseForward">
							<Button.ContextMenu>
								<ContextMenu x:Name="ForwardNavMenu" ItemContainerStyle="{StaticResource MenuItem4FrameStyle}" ItemsSource="{Binding Path=(NavigationWindow.ForwardStack), RelativeSource={RelativeSource TemplatedParent}}" />
							</Button.ContextMenu>
						</Button>
						<Button Padding="6" hc:IconElement.Geometry="{StaticResource RotateRightGeometry}" Command="NavigationCommands.Refresh" />
					</hc:ButtonGroup>
				</Border>
				<ContentPresenter SnapsToDevicePixels="True" x:Name="PART_NavWinCP" ClipToBounds="true" />
			</DockPanel>
		</Border>
	</ControlTemplate>
	<Style x:Key="FrameBaseStyle" TargetType="Frame">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Frame">
					<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<ContentPresenter SnapsToDevicePixels="True" x:Name="PART_FrameCP" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="NavigationUIVisibility" Value="Visible">
				<Setter Property="Template" Value="{StaticResource FrameWithNavigationUIStyle}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="JournalOwnership" Value="OwnsJournal" />
					<Condition Property="NavigationUIVisibility" Value="Automatic" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource FrameWithNavigationUIStyle}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="GotoTopBaseStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="hc:GotoTop">
		<Setter Property="Width" Value="50" />
		<Setter Property="Height" Value="50" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="25" />
		<Setter Property="hc:IconElement.Geometry" Value="{StaticResource UpGeometry}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Padding" Value="16" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="GravatarBaseStyle" TargetType="hc:Gravatar">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Width" Value="72" />
		<Setter Property="Height" Value="72" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Padding" Value="6" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Gravatar">
					<Border ClipToBounds="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter Margin="{TemplateBinding Padding}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ImageSelectorBaseStyle" TargetType="hc:ImageSelector">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Stretch" Value="UniformToFill" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="StrokeThickness" Value="1" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="StrokeDashArray" Value="2,2" />
		<Setter Property="hc:IconSwitchElement.Geometry" Value="{StaticResource AddGeometry}" />
		<Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{StaticResource RemoveGeometry}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ImageSelector">
					<Button Command="interactivity:ControlCommands.Switch" Style="{StaticResource ButtonCustom}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
						<Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<hc:DashedBorder BorderDashArray="{TemplateBinding StrokeDashArray}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" BorderDashThickness="{TemplateBinding StrokeThickness}" Background="{TemplateBinding PreviewBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
								<Border Width="30" Height="30" Background="{TemplateBinding Background}" Style="{StaticResource BorderCircular}">
									<hc:ToggleBlock IsChecked="{TemplateBinding HasValue}">
										<hc:ToggleBlock.CheckedContent>
											<Path Data="{TemplateBinding hc:IconSwitchElement.GeometrySelected}" Width="12" Height="12" Fill="{DynamicResource PrimaryBrush}" />
										</hc:ToggleBlock.CheckedContent>
										<hc:ToggleBlock.UnCheckedContent>
											<Path Data="{TemplateBinding hc:IconSwitchElement.Geometry}" Width="16" Height="16" Fill="{DynamicResource PrimaryBrush}" />
										</hc:ToggleBlock.UnCheckedContent>
									</hc:ToggleBlock>
								</Border>
							</hc:DashedBorder>
						</Border>
					</Button>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ListBoxItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="ListBoxItem">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<Border x:Name="Bd" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true" />
					<Condition Property="Selector.IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
			<Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="true">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ListBoxItem">
							<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
								<StackPanel Orientation="Horizontal">
									<ContentControl Width="16" Height="16" Content="{Binding Path=(hc:EdgeElement.LeftContent),RelativeSource={RelativeSource TemplatedParent}}" />
									<ContentPresenter Margin="6,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
								</StackPanel>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ListBoxBaseStyle" TargetType="ListBox">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="hc:ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="hc:ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="hc:ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="hc:ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBox">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
						<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
							<hc:ToggleBlock.CheckedContent>
								<hc:ScrollViewer Focusable="false">
									<ItemsPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</hc:ScrollViewer>
							</hc:ToggleBlock.CheckedContent>
							<hc:ToggleBlock.UnCheckedContent>
								<hc:Empty />
							</hc:ToggleBlock.UnCheckedContent>
						</hc:ToggleBlock>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="LoadingBaseStyle" TargetType="hc:LoadingBase">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="DotDiameter" Value="10" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="LoadingCircleBaseStyle" BasedOn="{StaticResource LoadingBaseStyle}" TargetType="hc:LoadingCircle">
		<Setter Property="Width" Value="40" />
		<Setter Property="Height" Value="40" />
		<Setter Property="DotDiameter" Value="5" />
		<Setter Property="DotInterval" Value="30" />
		<Setter Property="DotOffSet" Value="60" />
		<Setter Property="DotDelayTime" Value="90" />
		<Setter Property="DotSpeed" Value="4" />
	</Style>
	<Style x:Key="LoadingLineBaseStyle" BasedOn="{StaticResource LoadingBaseStyle}" TargetType="hc:LoadingLine">
		<Setter Property="DotDiameter" Value="5" />
	</Style>
	<Style x:Key="MagnifierBaseStyle" TargetType="hc:Magnifier">
		<Setter Property="IsHitTestVisible" Value="False" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Width" Value="180" />
		<Setter Property="Height" Value="180" />
		<Setter Property="BorderThickness" Value="8" />
		<Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Magnifier">
					<Border Style="{StaticResource BorderCircular}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Ellipse>
							<Ellipse.Fill>
								<VisualBrush Visual="{Binding Target,RelativeSource={RelativeSource TemplatedParent}}" ViewboxUnits="Absolute" x:Name="PART_VisualBrush" />
							</Ellipse.Fill>
						</Ellipse>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="MenuItem4NavigationWindowStyle" BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="MenuItem">
		<Setter Property="Header" Value="{Binding (JournalEntry.Name)}" />
		<Setter Property="Command" Value="NavigationCommands.NavigateJournal" />
		<Setter Property="CommandTarget" Value="{Binding TemplatedParent, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
		<Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}" />
	</Style>
	<Style x:Key="NavigationWindowBaseStyle" TargetType="NavigationWindow">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="NavigationWindow">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<DockPanel LastChildFill="True">
							<Border DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource DarkDefaultBrush}">
								<hc:ButtonGroup x:Name="NavChrome" Width="90" Margin="10,6" HorizontalAlignment="Left">
									<Button Padding="6" hc:IconElement.Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.BrowseBack">
										<Button.ContextMenu>
											<ContextMenu x:Name="BackNavMenu" ItemContainerStyle="{StaticResource MenuItem4NavigationWindowStyle}" ItemsSource="{Binding Path=(NavigationWindow.BackStack), RelativeSource={RelativeSource TemplatedParent}}" />
										</Button.ContextMenu>
									</Button>
									<Button Padding="6" hc:IconElement.Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.BrowseForward">
										<Button.ContextMenu>
											<ContextMenu x:Name="ForwardNavMenu" ItemContainerStyle="{StaticResource MenuItem4NavigationWindowStyle}" ItemsSource="{Binding Path=(NavigationWindow.ForwardStack), RelativeSource={RelativeSource TemplatedParent}}" />
										</Button.ContextMenu>
									</Button>
									<Button Padding="6" hc:IconElement.Geometry="{StaticResource RotateRightGeometry}" Command="NavigationCommands.Refresh" />
								</hc:ButtonGroup>
							</Border>
							<hc:SimplePanel>
								<AdornerDecorator>
									<ContentPresenter x:Name="PART_NavWinCP" ClipToBounds="true" />
								</AdornerDecorator>
								<ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom" />
							</hc:SimplePanel>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="ShowsNavigationUI" Value="False">
							<Setter Property="Visibility" TargetName="NavChrome" Value="Collapsed" />
						</Trigger>
						<Trigger Property="CanGoBack" Value="False">
							<Setter Property="IsEnabled" TargetName="BackNavMenu" Value="false" />
						</Trigger>
						<Trigger Property="CanGoForward" Value="False">
							<Setter Property="IsEnabled" TargetName="ForwardNavMenu" Value="false" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ResizeMode" Value="CanResizeWithGrip" />
								<Condition Property="WindowState" Value="Normal" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="NumericUpDownBaseStyle" TargetType="hc:NumericUpDown">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:NumericUpDown">
					<Border x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<hc:WatermarkTextBox Focusable="True" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
							<Button x:Name="UpButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Prev" Padding="5,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
							<Button x:Name="DownButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Next" Padding="5,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="ShowUpDownButton" Value="False">
							<Setter Property="Margin" TargetName="PART_TextBox" Value="2,0,2,1" />
						</Trigger>
						<Trigger Property="IsReadOnly" Value="True">
							<Setter Property="IsEnabled" TargetName="UpButton" Value="False" />
							<Setter Property="IsEnabled" TargetName="DownButton" Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="NumericUpDownExtendTopTemplate" TargetType="hc:NumericUpDown">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Foreground="{TemplateBinding Foreground}" Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<hc:WatermarkTextBox Margin="-2,0" CaretBrush="{TemplateBinding CaretBrush}" Focusable="True" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
					<Button x:Name="UpButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Prev" Padding="5,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
					<Button x:Name="DownButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Next" Padding="5,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="templateRoot">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="IsEnabled" TargetName="UpButton" Value="False" />
				<Setter Property="IsEnabled" TargetName="DownButton" Value="False" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="NumericUpDownExtendLeftTemplate" TargetType="hc:NumericUpDown">
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Foreground="{TemplateBinding Foreground}" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<hc:WatermarkTextBox Margin="-2,0" CaretBrush="{TemplateBinding CaretBrush}" Focusable="True" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
					<Button x:Name="UpButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Prev" Padding="5,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
					<Button x:Name="DownButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Next" Padding="5,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="templateRoot">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="IsEnabled" TargetName="UpButton" Value="False" />
				<Setter Property="IsEnabled" TargetName="DownButton" Value="False" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="NumericUpDownExtendBaseStyle" BasedOn="{StaticResource NumericUpDownBaseStyle}" TargetType="hc:NumericUpDown">
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Template" Value="{StaticResource NumericUpDownExtendTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource NumericUpDownExtendLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="NumericUpDownPlusTopTemplate" TargetType="hc:NumericUpDown">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="PART_ErrorTip" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="PART_ErrorTip" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="PART_ErrorTip" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
			<StackPanel Grid.Row="0" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Foreground="{TemplateBinding Foreground}" Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Name="ButtonClear" Width="16" Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button x:Name="UpButton" Command="interactivity:ControlCommands.Prev" Padding="0,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
					<Button x:Name="DownButton" Command="interactivity:ControlCommands.Next" Padding="0,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="templateRoot">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="IsEnabled" TargetName="UpButton" Value="False" />
				<Setter Property="IsEnabled" TargetName="DownButton" Value="False" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" />
					<Condition Property="ShowClearButton" Value="True" />
					<Condition Property="IsReadOnly" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="NumericUpDownPlusLeftTemplate" TargetType="hc:NumericUpDown">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="PART_ErrorTip" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="PART_ErrorTip" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="PART_ErrorTip" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
			<StackPanel Grid.Column="0" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,8">
				<TextBlock Foreground="{TemplateBinding Foreground}" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Padding="{TemplateBinding Padding}" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Name="PART_ButtonClear" Width="16" Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button x:Name="UpButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Prev" Padding="0,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
					<Button x:Name="DownButton" Visibility="{TemplateBinding ShowUpDownButton,Converter={StaticResource Boolean2VisibilityConverter}}" Command="interactivity:ControlCommands.Next" Padding="0,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="templateRoot">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="IsEnabled" TargetName="UpButton" Value="False" />
				<Setter Property="IsEnabled" TargetName="DownButton" Value="False" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" />
					<Condition Property="ShowClearButton" Value="True" />
					<Condition Property="IsReadOnly" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="PART_ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="NumericUpDownPlusBaseStyle" BasedOn="{StaticResource NumericUpDownExtendBaseStyle}" TargetType="hc:NumericUpDown">
		<Setter Property="Template" Value="{StaticResource NumericUpDownPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource NumericUpDownPlusLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="PasswordBoxBaseStyle" TargetType="PasswordBox">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="PasswordChar" Value="●" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="PasswordBox">
					<Border x:Name="border" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ScrollViewer Margin="-2,0" Padding="{TemplateBinding Padding}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="border" Value="0.4" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="PasswordBoxExtendTopTemplate" TargetType="PasswordBox">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border x:Name="border" Grid.Row="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<TextBlock x:Name="placeholder" Padding="1" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Row="1" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" />
			<ScrollViewer Margin="-1,1" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Row="1" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
				<Setter Property="Visibility" TargetName="placeholder" Value="Visible" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
				<Setter Property="Opacity" Value="0.4" TargetName="placeholder" />
				<Setter Property="Opacity" Value="0.4" TargetName="PART_ContentHost" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="PART_ContentHost">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="PasswordBoxExtendLeftTemplate" TargetType="PasswordBox">
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border x:Name="border" Grid.Column="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<TextBlock Padding="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="placeholder" Visibility="Collapsed" Grid.Column="1" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" />
			<ScrollViewer Margin="-1,1" Padding="{TemplateBinding Padding}" Grid.Column="1" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
				<Setter Property="Visibility" TargetName="placeholder" Value="Visible" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.4" TargetName="border" />
				<Setter Property="Opacity" Value="0.4" TargetName="placeholder" />
				<Setter Property="Opacity" Value="0.4" TargetName="PART_ContentHost" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true" SourceName="PART_ContentHost">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="PasswordBoxExtendBaseStyle" BasedOn="{StaticResource PasswordBoxBaseStyle}" TargetType="PasswordBox">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="hc:PasswordBoxAttach.IsMonitoring" Value="True" />
		<Setter Property="Template" Value="{StaticResource PasswordBoxExtendTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource PasswordBoxExtendLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="PasswordBoxPlusInternalStyle" TargetType="PasswordBox">
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="PasswordBox">
					<hc:SimplePanel>
						<TextBlock Margin="2,-1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" x:Name="placeholder" Visibility="Collapsed" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" />
						<ScrollViewer Padding="{TemplateBinding Padding}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
							<Setter Property="Visibility" TargetName="placeholder" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="PasswordBoxPlusTopTemplate" TargetType="hc:PasswordBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Grid.Column="0" Grid.ColumnSpan="3" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
			<Border Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<PasswordBox Margin="-1,1,0,1" Visibility="{Binding ShowPassword,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityReConverter}}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" Grid.Column="0" Grid.Row="1" x:Name="PART_PasswordBox" PasswordChar="{TemplateBinding PasswordChar}" Style="{StaticResource PasswordBoxPlusInternalStyle}" />
			<hc:WatermarkTextBox Margin="1,1,0,1" Visibility="{Binding ShowPassword,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			<Button Grid.Row="1" Grid.Column="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
			<ToggleButton IsChecked="{Binding ShowPassword,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" Width="25" Style="{StaticResource ToggleButtonIconTransparent}" Visibility="{TemplateBinding ShowEyeButton,Converter={StaticResource Boolean2VisibilityConverter}}" Padding="2,7,7,7" hc:IconSwitchElement.Geometry="{StaticResource EyeCloseGeometry}" hc:IconSwitchElement.GeometrySelected="{StaticResource EyeOpenGeometry}" x:Name="ButtonEye" Grid.Column="2" Foreground="{TemplateBinding BorderBrush}" Focusable="False" Grid.Row="1" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_PasswordBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="ShowEyeButton" Value="true">
				<Setter Property="Margin" Value="0" TargetName="ButtonClear" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="PasswordBoxPlusLeftTemplate" TargetType="hc:PasswordBox">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.Column="0" Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Grid.ColumnSpan="3" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
			<Border Grid.Column="1" Grid.ColumnSpan="3" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<PasswordBox Margin="-1,1,0,1" Visibility="{Binding ShowPassword,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityReConverter}}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" Grid.Column="1" x:Name="PART_PasswordBox" PasswordChar="{TemplateBinding PasswordChar}" Style="{StaticResource PasswordBoxPlusInternalStyle}" />
			<hc:WatermarkTextBox Margin="1,1,0,1" Visibility="{Binding ShowPassword,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="1" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			<Button Grid.Column="2" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Name="ButtonClear" Width="16" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
			<ToggleButton IsChecked="{Binding ShowPassword,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" Width="25" Style="{StaticResource ToggleButtonIconTransparent}" Visibility="{TemplateBinding ShowEyeButton,Converter={StaticResource Boolean2VisibilityConverter}}" Padding="2,7,7,7" hc:IconSwitchElement.Geometry="{StaticResource EyeCloseGeometry}" hc:IconSwitchElement.GeometrySelected="{StaticResource EyeOpenGeometry}" x:Name="ButtonEye" Grid.Column="3" Foreground="{TemplateBinding BorderBrush}" Focusable="False" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_PasswordBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="ShowEyeButton" Value="true">
				<Setter Property="Margin" Value="0" TargetName="ButtonClear" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="PasswordBoxPlusBaseStyle" TargetType="hc:PasswordBox">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="PasswordChar" Value="●" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:PasswordBoxAttach.IsMonitoring" Value="True" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template" Value="{StaticResource PasswordBoxPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource PasswordBoxPlusLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="PinBoxBaseStyle" TargetType="hc:PinBox">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ItemMargin" Value="4,0" />
		<Setter Property="ItemWidth" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="ItemHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:PinBox">
					<UniformGrid Name="PART_Panel" Columns="{TemplateBinding Length}" Rows="1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PoptipBaseStyle" TargetType="hc:Poptip">
		<Setter Property="IsHitTestVisible" Value="False" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Offset" Value="6" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Poptip">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
						<ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ProgressBarFlat4ProgressButton" TargetType="ProgressBar">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Foreground" Value="{DynamicResource DarkMaskBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ProgressBar">
					<Border x:Name="PART_Track">
						<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
							<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="Indicator" Background="{TemplateBinding Foreground}" />
						</Decorator>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ProgressButtonBaseStyle" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="hc:ProgressButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="ProgressStyle" Value="{StaticResource ProgressBarFlat4ProgressButton}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ProgressButton">
					<Border x:Name="Chrome" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<hc:SimplePanel>
							<ProgressBar x:Name="ProgressBar" Height="Auto" Value="{TemplateBinding Progress}" Maximum="100" Visibility="Collapsed" Style="{TemplateBinding ProgressStyle}" />
							<ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement),RelativeSource={RelativeSource TemplatedParent}}" />
						</hc:SimplePanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value=".9" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" Value=".6" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="ProgressBar" />
							<Setter Property="Visibility" Value="Visible" TargetName="CheckedElement" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True" />
								<Condition Property="IsChecked" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" Value="Collapsed" TargetName="UnCheckedElement" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PropertyItemToolTipBaseStyle" BasedOn="{StaticResource {x:Type ToolTip}}" TargetType="ToolTip">
		<Setter Property="Padding" Value="10" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{DynamicResource RegionBrush}" Padding="{TemplateBinding Padding}" BorderThickness="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<ContentPresenter x:Name="Presenter" Margin="0,0,0,10" />
							<StackPanel Grid.Row="1" Orientation="Horizontal">
								<TextBlock FontWeight="Bold" Text="{Binding PropertyTypeName,RelativeSource={RelativeSource AncestorType=hc:PropertyItem}}" />
								<TextBlock Text="{Binding PropertyName,RelativeSource={RelativeSource AncestorType=hc:PropertyItem}}" Margin="6,0,0,0" />
							</StackPanel>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter TargetName="Presenter" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="Content" Value="">
							<Setter TargetName="Presenter" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PropertyItemBaseStyle" TargetType="hc:PropertyItem">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Margin" Value="0,0,0,6" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:PropertyItem">
					<GroupBox Style="{StaticResource GroupBoxOriginal}" hc:TitleElement.TitlePlacement="Left">
						<GroupBox.Header>
							<TextBlock Padding="0,0,10,0" Width="{Binding Path=(hc:TitleElement.TitleWidth).Value,RelativeSource={RelativeSource TemplatedParent}}" Text="{TemplateBinding DisplayName}" TextTrimming="CharacterEllipsis">
								<TextBlock.ToolTip>
									<ToolTip Style="{StaticResource PropertyItemToolTipBaseStyle}" Content="{TemplateBinding Description}" />
								</TextBlock.ToolTip>
							</TextBlock>
						</GroupBox.Header>
						<ContentPresenter ContentSource="EditorElement" />
					</GroupBox>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PropertyItemsControlBaseStyle" TargetType="hc:PropertyItemsControl">
		<Setter Property="ItemContainerStyle" Value="{StaticResource PropertyItemBaseStyle}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:PropertyItemsControl">
					<hc:ScrollViewer Focusable="false" HorizontalScrollBarVisibility="Disabled">
						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</hc:ScrollViewer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsGrouping" Value="False">
				<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="PropertyGroupItemBaseStyle" TargetType="GroupItem">
		<Setter Property="Margin" Value="0,0,0,6" />
		<Setter Property="Padding" Value="10,6,6,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="GroupItem">
					<Expander Header="{Binding Name}" IsExpanded="True">
						<Border BorderThickness="1,0,1,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="0,0,4,4">
							<ItemsPresenter Margin="{TemplateBinding Padding}" />
						</Border>
					</Expander>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PropertyGridBaseStyle" TargetType="hc:PropertyGrid">
		<Setter Property="MaxTitleWidth" Value="200" />
		<Setter Property="MinTitleWidth" Value="120" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:PropertyGrid">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid Margin="{TemplateBinding Padding}">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<DockPanel LastChildFill="True" Margin="0,0,0,6">
								<hc:ButtonGroup Margin="0,0,6,0" Visibility="{Binding ShowSortButton,RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Style="{StaticResource ButtonGroupSolid}">
									<RadioButton Command="interactivity:ControlCommands.SortByCategory" IsChecked="True">
										<Rectangle Width="16" Height="16" Fill="{StaticResource SortByCategoryDrawingBrush}" />
									</RadioButton>
									<RadioButton Command="interactivity:ControlCommands.SortByName">
										<Rectangle Width="16" Height="16" Fill="{StaticResource SortByNameDrawingBrush}" />
									</RadioButton>
								</hc:ButtonGroup>
								<hc:SearchBar x:Name="PART_SearchBar" IsRealTime="True" ShowClearButton="True" Style="{StaticResource SearchBarPlus}" />
							</DockPanel>
							<hc:PropertyItemsControl Grid.Row="1" x:Name="PART_ItemsControl" Style="{StaticResource PropertyItemsControlBaseStyle}">
								<hc:PropertyItemsControl.GroupStyle>
									<GroupStyle ContainerStyle="{StaticResource PropertyGroupItemBaseStyle}" />
								</hc:PropertyItemsControl.GroupStyle>
							</hc:PropertyItemsControl>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RateRateItemBaseStyle" TargetType="hc:RateItem">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:RateItem">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnMouseEnter">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="CanvasRoot">
								<EasingDoubleKeyFrame KeyTime="0" Value="1.1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="CanvasRoot">
								<EasingDoubleKeyFrame KeyTime="0" Value="1.1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnMouseLeave">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="CanvasRoot">
								<EasingDoubleKeyFrame KeyTime="0" Value="1" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="CanvasRoot">
								<EasingDoubleKeyFrame KeyTime="0" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Canvas x:Name="CanvasRoot" RenderTransformOrigin="0.5,0.5">
						<Canvas.RenderTransform>
							<TransformGroup>
								<ScaleTransform />
							</TransformGroup>
						</Canvas.RenderTransform>
						<Path Width="{Binding ActualWidth,ElementName=CanvasRoot}" Height="{Binding ActualHeight,ElementName=CanvasRoot}" Data="{TemplateBinding Icon}" Fill="{TemplateBinding Background}" Stretch="Uniform" />
						<Border x:Name="PART_Icon" Visibility="Collapsed">
							<Path Width="{Binding ActualWidth,ElementName=CanvasRoot}" HorizontalAlignment="Left" Height="{Binding ActualHeight,ElementName=CanvasRoot}" Data="{TemplateBinding Icon}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" />
						</Border>
					</Canvas>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="UIElement.MouseEnter" SourceName="CanvasRoot">
							<BeginStoryboard Storyboard="{StaticResource OnMouseEnter}" />
						</EventTrigger>
						<EventTrigger RoutedEvent="UIElement.MouseLeave" SourceName="CanvasRoot">
							<BeginStoryboard Storyboard="{StaticResource OnMouseLeave}" />
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RateBaseStyle" TargetType="hc:Rate">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ItemMargin" Value="5,0" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Icon" Value="{StaticResource StarGeometry}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource RateRateItemBaseStyle}" />
		<Setter Property="Text" Value="{Binding Value,RelativeSource={RelativeSource Self},StringFormat={}{0:0.0}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Rate">
					<StackPanel Background="Transparent" Orientation="Horizontal">
						<UniformGrid Rows="1" Margin="-5,0" x:Name="PART_Panel" />
						<TextBlock Visibility="{TemplateBinding ShowText,Converter={StaticResource Boolean2VisibilityConverter}}" Text="{TemplateBinding Text}" Margin="10,0,0,0" VerticalAlignment="Center" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RunningBlockBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:RunningBlock">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="0,10" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:RunningBlock">
					<hc:RunningBorder CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<hc:SimplePanel ClipToBounds="True">
							<hc:SimplePanel HorizontalAlignment="Left" x:Name="PART_Panel">
								<ContentPresenter x:Name="PART_ContentElement" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left">
									<ContentPresenter.RenderTransform>
										<TransformGroup>
											<TranslateTransform />
										</TransformGroup>
									</ContentPresenter.RenderTransform>
								</ContentPresenter>
							</hc:SimplePanel>
						</hc:SimplePanel>
					</hc:RunningBorder>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Padding" Value="10,0" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="SeparatorBaseStyle" TargetType="Separator">
		<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
	</Style>
	<Style x:Key="ShieldBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:Shield">
		<Setter Property="Height" Value="20" />
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="3" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Color" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Shield">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Border Grid.Column="0" Background="#555" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='1,0,0,1'}">
							<TextBlock Text="{TemplateBinding Subject}" VerticalAlignment="Center" Margin="4,0" />
						</Border>
						<Border Grid.Column="1" Background="{TemplateBinding Color}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='0,1,1,0'}">
							<ContentPresenter ContentSource="Status" VerticalAlignment="Center" Margin="4,0" TextElement.Foreground="{TemplateBinding Foreground}" ContentStringFormat="{TemplateBinding ContentStringFormat}" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SideMenuItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:SideMenuItem">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
		<Setter Property="Role" Value="Item" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="MinHeight" Value="40" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SideMenuItem">
					<Border Name="BorderRoot" Background="{TemplateBinding Background}">
						<hc:SimplePanel>
							<Rectangle Width="4" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Left" />
							<ContentControl Margin="4,0,0,0">
								<DockPanel Margin="{TemplateBinding Padding}">
									<ContentControl Width="40" Name="PresenterIcon">
										<ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
									</ContentControl>
									<ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
								</DockPanel>
							</ContentControl>
						</hc:SimplePanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Icon" Value="{x:Null}">
							<Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<DataTrigger Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=hc:SideMenuItem}}" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
						</DataTrigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
							<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
							<Setter Property="TextElement.FontWeight" Value="Bold" TargetName="PresenterHeader" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SideMenuItemAccordionBaseStyle" BasedOn="{StaticResource SideMenuItemBaseStyle}" TargetType="hc:SideMenuItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SideMenuItem">
					<Border Name="BorderRoot" Background="{TemplateBinding Background}">
						<hc:SimplePanel>
							<Rectangle Width="4" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Left" />
							<ContentControl Margin="4,0,0,0">
								<DockPanel Margin="{TemplateBinding Padding}">
									<ContentControl Width="40" Name="PresenterIcon">
										<ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
									</ContentControl>
									<ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
								</DockPanel>
							</ContentControl>
						</hc:SimplePanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Icon" Value="{x:Null}">
							<Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<DataTrigger Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=hc:SideMenuItem}}" Value="True">
							<Setter Property="BorderBrush" Value="Transparent" />
						</DataTrigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
							<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
							<Setter Property="TextElement.FontWeight" Value="Bold" TargetName="PresenterHeader" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SideMenuItemHeaderBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:SideMenuItem">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource SideMenuItemBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SideMenuItem">
					<Border Name="BorderRoot" Background="{TemplateBinding Background}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition MinHeight="48" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Border Name="BorderBack" Background="{TemplateBinding Background}" />
							<ContentControl Grid.Row="0" Margin="4,0,0,0">
								<DockPanel Margin="{TemplateBinding Padding}" Name="PanelHeader" Background="Transparent">
									<ContentControl Width="40" Name="PresenterIcon">
										<ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
									</ContentControl>
									<ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
								</DockPanel>
							</ContentControl>
							<StackPanel Grid.Row="1" x:Name="PART_Panel" Visibility="Collapsed" Height="{Binding PanelAreaLength,RelativeSource={RelativeSource AncestorType=hc:SideMenu}}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Icon" Value="{x:Null}">
							<Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="BorderBack" Property="BorderThickness" Value="4,0,0,0" />
							<Setter TargetName="BorderBack" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
							<Setter Property="TextElement.FontWeight" Value="Bold" TargetName="PresenterHeader" />
						</Trigger>
						<Trigger SourceName="PanelHeader" Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderBack" Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SideMenuItemHeaderAccordionBaseStyle" BasedOn="{StaticResource SideMenuItemHeaderBaseStyle}" TargetType="hc:SideMenuItem">
		<Setter Property="ItemContainerStyle" Value="{StaticResource SideMenuItemAccordionBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SideMenuItem">
					<Border Name="BorderRoot" Background="{TemplateBinding Background}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition MinHeight="48" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Border Name="BorderBack" Background="{TemplateBinding Background}" />
							<ContentControl Grid.Row="0" Margin="4,0,0,0">
								<DockPanel Margin="{TemplateBinding Padding}" Name="PanelHeader" Background="Transparent">
									<ContentControl Width="40" Name="PresenterIcon">
										<ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
									</ContentControl>
									<ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
								</DockPanel>
							</ContentControl>
							<ScrollViewer Visibility="{Binding Visibility,ElementName=PART_Panel}" Grid.Row="1" Height="{Binding PanelAreaLength,RelativeSource={RelativeSource AncestorType=hc:SideMenu}}">
								<StackPanel x:Name="PART_Panel" Visibility="Collapsed" />
							</ScrollViewer>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Icon" Value="{x:Null}">
							<Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="BorderBack" Property="BorderThickness" Value="4,0,0,0" />
							<Setter TargetName="BorderBack" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
							<Setter Property="TextElement.FontWeight" Value="Bold" TargetName="PresenterHeader" />
						</Trigger>
						<Trigger SourceName="PanelHeader" Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderBack" Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SideMenuBaseStyle" TargetType="hc:SideMenu">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource SideMenuItemHeaderBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SideMenu">
					<Border Name="BorderRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<ScrollViewer>
							<StackPanel x:Name="PART_Panel" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SplitButtonBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:SplitButton">
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SplitButton">
					<hc:SimplePanel x:Name="templateRoot">
						<Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
						<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
									<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
									<ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</StackPanel>
								<ToggleButton x:Name="PART_Arrow" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Width="22" Height="Auto" Padding="0,10,8,10" HorizontalContentAlignment="Left" Grid.Column="1" Style="{StaticResource ToggleButtonIconTransparent}" hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}" hc:IconElement.Geometry="{StaticResource DownGeometry}" />
							</Grid>
						</Border>
						<Popup AllowsTransparency="true" StaysOpen="False" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="Fade" Placement="Bottom">
							<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" Background="{DynamicResource RegionBrush}">
								<ScrollViewer Margin="0,4" x:Name="DropDownScrollViewer">
									<hc:SimplePanel RenderOptions.ClearTypeHint="Enabled">
										<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
											<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
										</Canvas>
										<ContentPresenter ContentSource="DropDownContent" />
									</hc:SimplePanel>
								</ScrollViewer>
							</Border>
						</Popup>
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="ContentPresenterMain" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HitMode" Value="Click" />
								<Condition Property="IsChecked" Value="True" SourceName="PART_Arrow" />
							</MultiTrigger.Conditions>
							<Setter Property="IsDropDownOpen" Value="True" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" Value=".9" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Opacity" Value=".6" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" BasedOn="{StaticResource SeparatorBaseStyle}" TargetType="Separator" />
	<Style x:Key="StatusBarBaseStyle" TargetType="StatusBar">
		<Setter Property="BorderThickness" Value="0,1,0,0" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
	</Style>
	<Style x:Key="StatusBarItemBaseStyle" TargetType="StatusBarItem">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="StepBarItemBaseStyle" TargetType="hc:StepBarItem">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
		<Style.Triggers>
			<Trigger Property="Status" Value="Complete">
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
			</Trigger>
			<Trigger Property="Status" Value="UnderWay">
				<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="Status" Value="Waiting">
				<Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="StepBarItemHorizontalTop" BasedOn="{StaticResource StepBarItemBaseStyle}" TargetType="hc:StepBarItem">
		<Setter Property="Margin" Value="10,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:StepBarItem">
					<StackPanel>
						<Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12" BorderThickness="2" BorderBrush="{TemplateBinding Foreground}" Height="24" MinWidth="24">
							<TextBlock Foreground="{TemplateBinding Foreground}" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Index,RelativeSource={RelativeSource TemplatedParent}}" />
						</Border>
						<ContentPresenter HorizontalAlignment="Center" ContentTemplate="{Binding ItemTemplate,RelativeSource={RelativeSource AncestorType=hc:StepBar}}" TextElement.Foreground="{TemplateBinding Foreground}" Margin="0,4,0,0" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="StepBarItemHorizontalBottom" BasedOn="{StaticResource StepBarItemBaseStyle}" TargetType="hc:StepBarItem">
		<Setter Property="Margin" Value="10,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:StepBarItem">
					<StackPanel>
						<ContentPresenter HorizontalAlignment="Center" ContentTemplate="{Binding ItemTemplate,RelativeSource={RelativeSource AncestorType=hc:StepBar}}" TextElement.Foreground="{TemplateBinding Foreground}" Margin="0,0,0,4" />
						<Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12" BorderThickness="2" BorderBrush="{TemplateBinding Foreground}" Height="24" MinWidth="24">
							<TextBlock Foreground="{TemplateBinding Foreground}" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Index,RelativeSource={RelativeSource TemplatedParent}}" />
						</Border>
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="StepBarItemVerticalLeft" BasedOn="{StaticResource StepBarItemBaseStyle}" TargetType="hc:StepBarItem">
		<Setter Property="Margin" Value="0, 10" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:StepBarItem">
					<StackPanel Orientation="Horizontal">
						<Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12" BorderThickness="2" BorderBrush="{TemplateBinding Foreground}" Height="24" MinWidth="24">
							<TextBlock Foreground="{TemplateBinding Foreground}" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Index,RelativeSource={RelativeSource TemplatedParent}}" />
						</Border>
						<ContentPresenter HorizontalAlignment="Left" ContentTemplate="{Binding ItemTemplate,RelativeSource={RelativeSource AncestorType=hc:StepBar}}" TextElement.Foreground="{TemplateBinding Foreground}" Margin="10,4,0,0" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="StepBarHorizontalTopControlTemplate" TargetType="hc:StepBar">
		<hc:SimplePanel>
			<ProgressBar HorizontalAlignment="Center" Name="PART_ProgressBarBack" VerticalAlignment="Top" Margin="0,10,0,0" Style="{StaticResource ProgressBarFlat}" Background="{DynamicResource ThirdlyTextBrush}" />
			<ItemsPresenter />
		</hc:SimplePanel>
	</ControlTemplate>
	<ControlTemplate x:Key="StepBarHorizontalBottomControlTemplate" TargetType="hc:StepBar">
		<hc:SimplePanel>
			<ProgressBar HorizontalAlignment="Center" Name="PART_ProgressBarBack" VerticalAlignment="Bottom" Margin="0,0,0,10" Style="{StaticResource ProgressBarFlat}" Background="{DynamicResource ThirdlyTextBrush}" />
			<ItemsPresenter VerticalAlignment="Bottom" />
		</hc:SimplePanel>
	</ControlTemplate>
	<ControlTemplate x:Key="StepBarVerticalLeftControlTemplate" TargetType="hc:StepBar">
		<hc:SimplePanel>
			<ProgressBar Orientation="Vertical" Width="4" HorizontalAlignment="Left" Name="PART_ProgressBarBack" VerticalAlignment="Center" Margin="10,0,0,0" Style="{StaticResource ProgressBarFlat}" Background="{DynamicResource ThirdlyTextBrush}" RenderTransformOrigin="0.5,0.5">
				<ProgressBar.RenderTransform>
					<TransformGroup>
						<RotateTransform Angle="180" />
					</TransformGroup>
				</ProgressBar.RenderTransform>
			</ProgressBar>
			<ItemsPresenter />
		</hc:SimplePanel>
	</ControlTemplate>
	<Style x:Key="StepBarBaseStyle" TargetType="hc:StepBar">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemHorizontalTop}" />
		<Setter Property="Template" Value="{StaticResource StepBarHorizontalTopControlTemplate}" />
		<Setter Property="ItemsPanel" Value="{StaticResource StepBarHorizontalItemsPanelTemplate}" />
		<Style.Triggers>
			<Trigger Property="Dock" Value="Left">
				<Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemVerticalLeft}" />
				<Setter Property="Template" Value="{StaticResource StepBarVerticalLeftControlTemplate}" />
				<Setter Property="ItemsPanel" Value="{StaticResource StepBarVerticalItemsPanelTemplate}" />
			</Trigger>
			<Trigger Property="Dock" Value="Bottom">
				<Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemHorizontalBottom}" />
				<Setter Property="Template" Value="{StaticResource StepBarHorizontalBottomControlTemplate}" />
				<Setter Property="ItemsPanel" Value="{StaticResource StepBarHorizontalItemsPanelTemplate}" />
			</Trigger>
			<Trigger Property="Dock" Value="Right">
				<Setter Property="FlowDirection" Value="RightToLeft" />
				<Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemVerticalLeft}" />
				<Setter Property="Template" Value="{StaticResource StepBarVerticalLeftControlTemplate}" />
				<Setter Property="ItemsPanel" Value="{StaticResource StepBarVerticalItemsPanelTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TabItemStyle" TargetType="TabItem">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabItem">
					<hc:SimplePanel x:Name="templateRoot" SnapsToDevicePixels="true">
						<Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Margin="0" />
						<ContentPresenter x:Name="contentPresenter" TextElement.Foreground="{DynamicResource PrimaryTextBrush}" ContentSource="Header" Focusable="False" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="False">
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,0,0,0" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" TargetName="contentPresenter" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Top" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1" />
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,0,0,3" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1" />
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,0,3,0" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Bottom" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1" />
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,3,0,0" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Right" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1" />
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="3,0,0,0" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TabControlBaseStyle" TargetType="TabControl">
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource TabItemStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabControl">
					<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<Grid x:Name="templateRoot" Background="{TemplateBinding Background}" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
							<Grid.ColumnDefinitions>
								<ColumnDefinition x:Name="ColumnDefinition0" />
								<ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition x:Name="RowDefinition0" Height="Auto" />
								<RowDefinition x:Name="RowDefinition1" Height="*" />
							</Grid.RowDefinitions>
							<TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
							<Border x:Name="contentPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
								<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="BorderThickness" Value="0,0,0,1" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
							<Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
							<Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
							<Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="BorderThickness" Value="1,0,0,0" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
							<Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
							<Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
							<Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="BorderThickness" Value="0,0,1,0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TabItemCapsuleBaseStyle" TargetType="TabItem">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="Margin" Value="-1,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabItem">
					<Border x:Name="BorderRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentPresenter x:Name="contentPresenter" ContentSource="Header" TextElement.Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" TargetName="BorderRoot" />
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="BorderBrush" Value="{Binding Path=(hc:TitleElement.BorderBrush),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="Background" Value="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="TextElement.Foreground" Value="{Binding Path=(hc:TitleElement.Foreground),RelativeSource={RelativeSource TemplatedParent}}" TargetName="contentPresenter" />
						</Trigger>
						<DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left">
							<Setter Property="Margin" Value="0,-1,0,0" />
						</DataTrigger>
						<DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Right">
							<Setter Property="Margin" Value="0,-1,0,0" />
						</DataTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" TargetName="contentPresenter" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TimePickerBaseStyle" TargetType="hc:TimePicker">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:TimePicker">
					<Border x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="30" />
							</Grid.ColumnDefinitions>
							<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
							<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</MultiTrigger>
						<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="TimePickerExtendTopTemplate" TargetType="hc:TimePicker">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TimePickerExtendLeftTemplate" TargetType="hc:TimePicker">
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="30" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="1" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="TimePickerExtendBaseStyle" BasedOn="{StaticResource TimePickerBaseStyle}" TargetType="hc:TimePicker">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="hc:InfoElement.Symbol" Value="●" />
		<Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
		<Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Template" Value="{StaticResource TimePickerExtendTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource TimePickerExtendLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="TimePickerPlusTopTemplate" TargetType="hc:TimePicker">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Double2GridLengthConverter}}" />
			</Grid.RowDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
				<TextBlock Margin="1,0,0,0" Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock Grid.Row="1" FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
			<Border Grid.Row="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TimePickerPlusLeftTemplate" TargetType="hc:TimePicker">
		<ControlTemplate.Resources>
			<Storyboard x:Key="StoryboardShow">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
			</Storyboard>
			<Storyboard x:Key="StoryboardHidden">
				<ThicknessAnimation Storyboard.TargetName="TextBlockError" Storyboard.TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight),RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight),RelativeSource={RelativeSource TemplatedParent}}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth),RelativeSource={RelativeSource TemplatedParent}}" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<StackPanel Visibility="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource String2VisibilityConverter}}" Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,7,6,7">
				<TextBlock Text="{Binding Path=(hc:InfoElement.Title),RelativeSource={RelativeSource TemplatedParent}}" />
				<ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol),RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" />
			</StackPanel>
			<TextBlock FontSize="12" Text="{TemplateBinding ErrorStr}" Name="TextBlockError" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
			<Border Grid.Column="1" x:Name="templateRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
				<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="25" />
					</Grid.ColumnDefinitions>
					<Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Name="ButtonClear" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush,ElementName=templateRoot}" />
					<Button Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" hc:IconElement.Geometry="{StaticResource ClockGeometry}" x:Name="PART_Button" Grid.Column="2" Foreground="{Binding BorderBrush,ElementName=templateRoot}" Focusable="False" Grid.Row="0" />
					<hc:WatermarkTextBox CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" x:Name="PART_TextBox" Watermark="{Binding Path=(hc:InfoElement.Placeholder),RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					<Popup Grid.Column="0" VerticalOffset="4" x:Name="PART_Popup" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" StaysOpen="False" />
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="templateRoot" Value="0.4" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="false" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="IsOpen" Value="true" SourceName="PART_Popup" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" SourceName="templateRoot" />
					<Condition Property="ShowClearButton" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" TargetName="ButtonClear" />
			</MultiTrigger>
			<Trigger Property="IsFocused" Value="true" SourceName="PART_TextBox">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsError" Value="true">
				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource DangerBrush}" />
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="TimePickerPlusBaseStyle" BasedOn="{StaticResource TimePickerExtendBaseStyle}" TargetType="hc:TimePicker">
		<Setter Property="Template" Value="{StaticResource TimePickerPlusTopTemplate}" />
		<Style.Triggers>
			<Trigger Property="hc:InfoElement.TitlePlacement" Value="Left">
				<Setter Property="Template" Value="{StaticResource TimePickerPlusLeftTemplate}" />
				<Setter Property="Width" Value="Auto" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="Separator">
		<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Width" Value="1" />
	</Style>
	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource CheckBoxBaseStyle}" TargetType="CheckBox" />
	<Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource RadioButtonBaseStyle}" TargetType="RadioButton" />
	<Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="ComboBox" />
	<Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="TextBox" />
	<Style x:Key="{x:Static ToolBar.MenuStyleKey}" BasedOn="{StaticResource MenuBaseStyle}" TargetType="Menu" />
	<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ToolBarThumbHorizontalStyle" TargetType="Thumb">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
						<Path Stretch="Uniform" Width="4" Fill="{DynamicResource PrimaryBrush}" Data="{StaticResource DragVerticalGeometry}" SnapsToDevicePixels="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Cursor" Value="SizeAll" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToolBarThumbVerticalStyle" TargetType="Thumb">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
						<Path Stretch="Uniform" Height="4" Fill="{DynamicResource PrimaryBrush}" Data="{StaticResource DragHorizontalGeometry}" SnapsToDevicePixels="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Cursor" Value="SizeAll" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="4" Background="{TemplateBinding Background}">
						<Path x:Name="PathMore" Data="{StaticResource RightGeometry}" Height="8" Margin="4,4,8,4" HorizontalAlignment="Right" Fill="{DynamicResource PrimaryTextBrush}" Stretch="Uniform" SnapsToDevicePixels="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Fill" TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="ToggleButton">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="4" Background="{TemplateBinding Background}">
						<Path x:Name="PathMore" Data="{StaticResource DownGeometry}" Width="8" Margin="4,4,4,8" VerticalAlignment="Bottom" Fill="{DynamicResource PrimaryTextBrush}" Stretch="Uniform" SnapsToDevicePixels="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Fill" TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ToolBarVerticalTemplate" TargetType="ToolBar">
		<Grid x:Name="Grid" SnapsToDevicePixels="true">
			<Grid.RowDefinitions>
				<RowDefinition />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<hc:SimplePanel x:Name="OverflowGrid" Grid.Row="1">
				<ToggleButton Margin="0,4,0,0" x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarVerticalOverflowButtonStyle}" />
				<Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Right" StaysOpen="false">
					<Border x:Name="ToolBarSubMenuBorder" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" Background="{DynamicResource RegionBrush}" RenderOptions.ClearTypeHint="Enabled">
						<ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200" />
					</Border>
				</Popup>
			</hc:SimplePanel>
			<Border x:Name="MainPanelBorder" Grid.Row="0" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
				<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
					<Thumb x:Name="ToolBarThumb" DockPanel.Dock="Top" Style="{StaticResource ToolBarThumbVerticalStyle}" Height="10" />
					<ContentPresenter x:Name="ToolBarHeader" DockPanel.Dock="Top" ContentSource="Header" HorizontalAlignment="Center" Margin="0,4,0,4" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
					<ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</DockPanel>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsOverflowOpen" Value="true">
				<Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false" />
			</Trigger>
			<Trigger Property="Header" Value="{x:Null}">
				<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed" />
			</Trigger>
			<Trigger Property="ToolBarTray.IsLocked" Value="true">
				<Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ToolBarHorizontalTemplate" TargetType="ToolBar">
		<Grid x:Name="Grid" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<hc:SimplePanel x:Name="OverflowGrid" Grid.Column="1">
				<ToggleButton Margin="4,0,0,0" x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" />
				<Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" StaysOpen="false">
					<Border x:Name="ToolBarSubMenuBorder" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" Background="{DynamicResource RegionBrush}" RenderOptions.ClearTypeHint="Enabled">
						<ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200" />
					</Border>
				</Popup>
			</hc:SimplePanel>
			<Border x:Name="MainPanelBorder" Grid.Column="0" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
				<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
					<Thumb x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbHorizontalStyle}" Width="10" />
					<ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
					<ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</DockPanel>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsOverflowOpen" Value="true">
				<Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false" />
			</Trigger>
			<Trigger Property="Header" Value="{x:Null}">
				<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed" />
			</Trigger>
			<Trigger Property="ToolBarTray.IsLocked" Value="true">
				<Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ToolBarBaseStyle" TargetType="ToolBar">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Margin" Value="0,0,4,4" />
		<Setter Property="Template" Value="{StaticResource ToolBarHorizontalTemplate}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{StaticResource ToolBarVerticalTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ToolTipBaseStyle" TargetType="ToolTip">
		<Setter Property="Padding" Value="0,6" />
		<Setter Property="Background" Value="White" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{DynamicResource RegionBrush}" Padding="{TemplateBinding Padding}" BorderThickness="1" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BorderBrush}">
						<ContentPresenter Margin="10,0" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TransferItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:TransferItem">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualMargin0}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="CanDeselect" Value="True" />
		<Setter Property="SelfManage" Value="True" />
		<Setter Property="Padding" Value="10, 0" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Margin" Value="5,0,5,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:TransferItem">
					<Border x:Name="BorderRoot" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
						<ContentPresenter x:Name="ContentPresenter" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" ContentTemplate="{Binding ItemTemplate,RelativeSource={RelativeSource AncestorType=hc:TransferGroup}}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource PrimaryBrush}" />
							<Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsOrigin" Value="True" />
					<Condition Property="IsTransferred" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsOrigin" Value="True" />
					<Condition Property="IsTransferred" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsOrigin" Value="False" />
					<Condition Property="IsTransferred" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Visible" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsOrigin" Value="False" />
					<Condition Property="IsTransferred" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TransferGroupBaseStyle" TargetType="hc:TransferGroup">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:TransferGroup">
					<Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ScrollViewer Margin="0,5">
							<StackPanel x:Name="PART_Panel" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TransferBaseStyle" TargetType="hc:Transfer">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource TransferItemBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Transfer">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="200" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition MinWidth="200" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition />
							<RowDefinition />
							<RowDefinition />
						</Grid.RowDefinitions>
						<hc:TransferGroup x:Name="PART_ItemsOrigin" Style="{StaticResource TransferGroupBaseStyle}" Grid.RowSpan="4" ItemTemplate="{TemplateBinding ItemTemplate}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" />
						<StackPanel Margin="32,0" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0" Grid.RowSpan="4" Grid.Column="1">
							<Button hc:IconElement.Geometry="{StaticResource LeftGeometry}" Command="interactivity:ControlCommands.Cancel" />
							<Button hc:IconElement.Geometry="{StaticResource RightGeometry}" Margin="0,10,0,0" Command="interactivity:ControlCommands.Selected" />
						</StackPanel>
						<hc:TransferGroup x:Name="PART_ItemsSelected" Style="{StaticResource TransferGroupBaseStyle}" Grid.Row="0" Grid.RowSpan="4" Grid.Column="2" ItemTemplate="{TemplateBinding ItemTemplate}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Width" Value="16" />
		<Setter Property="Height" Value="16" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border Background="Transparent" Height="16" Padding="4" Width="16">
						<Path x:Name="ExpandPath" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" Data="{StaticResource TreeArrow}" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=TreeViewItem}}">
							<Path.RenderTransform>
								<RotateTransform Angle="-90" />
							</Path.RenderTransform>
						</Path>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="RenderTransform" TargetName="ExpandPath">
								<Setter.Value>
									<RotateTransform Angle="0" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TreeViewItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="TreeViewItem">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TreeViewItem">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition MinHeight="{StaticResource DefaultControlHeight}" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Border x:Name="Bd" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<DockPanel LastChildFill="True" Margin="{Binding Converter={StaticResource TreeViewItemMarginConverter}, RelativeSource={RelativeSource TemplatedParent}}">
								<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
								<ContentPresenter VerticalAlignment="Center" x:Name="PART_Header" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</DockPanel>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" Grid.Row="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true" SourceName="Bd">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" />
						</Trigger>
						<Trigger Property="IsExpanded" Value="false">
							<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource PrimaryBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="IsSelectionActive" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource DarkDefaultBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TreeViewBaseStyle" TargetType="TreeView" BasedOn="{StaticResource BaseStyle}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="hc:ScrollViewer.IsInertiaEnabled" Value="False" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TreeView">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
						<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
							<hc:ToggleBlock.CheckedContent>
								<hc:ScrollViewer x:Name="_tv_scrollviewer_" IsInertiaEnabled="{Binding Path=(hc:ScrollViewer.IsInertiaEnabled),RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ScrollViewerBaseControlTemplate}" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
									<ItemsPresenter />
								</hc:ScrollViewer>
							</hc:ToggleBlock.CheckedContent>
							<hc:ToggleBlock.UnCheckedContent>
								<hc:Empty />
							</hc:ToggleBlock.UnCheckedContent>
						</hc:ToggleBlock>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}" />
						</Trigger>
						<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
							<Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="WatermarkBaseStyle" TargetType="hc:Watermark">
		<Setter Property="MarkBrush" Value="{DynamicResource DarkMaskBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource DarkMaskBrush}" />
		<Setter Property="Angle" Value="20" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Watermark">
					<Border Name="PART_Root">
						<ContentPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource BadgeBaseStyle}" TargetType="hc:Badge">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
	</Style>
	<Style x:Key="BadgePrimary" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="hc:Badge">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="BadgeSuccess" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="hc:Badge">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="BadgeInfo" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="hc:Badge">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="BadgeWarning" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="hc:Badge">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="BadgeDanger" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="hc:Badge">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style TargetType="hc:CalendarWithClock">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Margin" Value="8,0,8,8" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:CalendarWithClock">
					<hc:SimplePanel>
						<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" />
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="50" />
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}" Grid.ColumnSpan="2" Grid.Row="0" Height="50" VerticalAlignment="Top" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" />
							<ContentPresenter Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" x:Name="PART_CalendarPresenter" />
							<ContentPresenter Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" x:Name="PART_ClockPresenter" />
							<Button Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{TemplateBinding ShowConfirmButton,Converter={StaticResource Boolean2VisibilityConverter}}" Name="PART_ButtonConfirm" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" HorizontalAlignment="Center" Margin="0,0,0,19" Width="180" VerticalAlignment="Bottom" Style="{StaticResource ButtonPrimary}" />
						</Grid>
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource CardBaseStyle}" TargetType="hc:Card" />
	<Style x:Key="CarouselPateButton" BasedOn="{StaticResource BaseStyle}" TargetType="RadioButton">
		<Setter Property="Margin" Value="5,0" />
		<Setter Property="Width" Value="10" />
		<Setter Property="Height" Value="10" />
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border CornerRadius="5" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value=".9" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" Value=".6" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="hc:Carousel">
		<Setter Property="PageButtonStyle" Value="{StaticResource CarouselPateButton}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource CarouselItemBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Carousel">
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation Storyboard.TargetName="GridTop" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:.1" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation Storyboard.TargetName="GridTop" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:.1" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</ControlTemplate.Triggers>
					<hc:SimplePanel ClipToBounds="True">
						<StackPanel x:Name="PART_Panel" Orientation="Horizontal" />
						<!--<ItemsPresenter x:Name="PART_ItemsControl" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Left"/>-->
						<hc:SimplePanel x:Name="GridTop" Opacity="0">
							<Button Command="interactivity:ControlCommands.Prev" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="30,0,0,0" Style="{StaticResource ButtonCustom}">
								<Border Width="50" Height="100" Background="{DynamicResource DarkOpacityBrush}" CornerRadius="4">
									<Path Margin="16" Fill="White" Style="{StaticResource LeftPathStyle}" />
								</Border>
							</Button>
							<Button Command="interactivity:ControlCommands.Next" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,30,0" Style="{StaticResource ButtonCustom}">
								<Border Width="50" Height="100" Background="{DynamicResource DarkOpacityBrush}" CornerRadius="4">
									<Path Margin="16" Fill="White" Style="{StaticResource RightPathStyle}" />
								</Border>
							</Button>
						</hc:SimplePanel>
						<StackPanel Name="PART_PanelPage" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,20" />
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ChatBubbleBaseStyle}" TargetType="hc:ChatBubble" />
	<Style BasedOn="{StaticResource CheckComboBoxBaseStyle}" TargetType="hc:CheckComboBox" />
	<Style x:Key="CheckComboBoxExtend" BasedOn="{StaticResource CheckComboBoxExtendBaseStyle}" TargetType="hc:CheckComboBox" />
	<Style x:Key="CheckComboBoxPlus" BasedOn="{StaticResource CheckComboBoxPlusBaseStyle}" TargetType="hc:CheckComboBox" />
	<Style x:Key="ClockRadioButtonStyle" TargetType="hc:ClockRadioButton">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Width" Value="28" />
		<Setter Property="Height" Value="28" />
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ClockRadioButton">
					<ControlTemplate.Resources>
						<Storyboard x:Key="Storyboard1">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="optionMark">
								<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="Storyboard2">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="optionMark">
								<EasingDoubleKeyFrame KeyTime="0" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<hc:SimplePanel x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
						<Ellipse x:Name="optionMark" Fill="{TemplateBinding Background}" MinWidth="6" MinHeight="6" Opacity="0" />
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="hc:Clock">
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Margin" Value="8,0,8,8" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Width" Value="210" />
		<Setter Property="Height" Value="310" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="ClockRadioButtonStyle" Value="{StaticResource ClockRadioButtonStyle}" />
		<Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Clock">
					<hc:SimplePanel>
						<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" />
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="50" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition />
								<ColumnDefinition />
							</Grid.ColumnDefinitions>
							<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}" Grid.ColumnSpan="3" Background="{Binding Path=(hc:TitleElement.Background),RelativeSource={RelativeSource TemplatedParent}}" Name="PART_BorderTitle">
								<TextBlock x:Name="PART_TimeStr" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="20" Foreground="{DynamicResource TextIconBrush}" />
							</Border>
							<Canvas Grid.Row="1" Grid.ColumnSpan="3" Margin="0,16,0,0" VerticalAlignment="Top" Name="PART_Canvas" Width="178" Height="178">
								<Border Background="{DynamicResource SecondaryRegionBrush}" Width="178" Height="178" CornerRadius="89" />
								<hc:CirclePanel Diameter="130" x:Name="PART_PanelNum" KeepVertical="True" Margin="24,24,0,0" OffsetAngle="-60" />
								<Border Focusable="False" Name="PART_BorderClock" Background="{DynamicResource PrimaryBrush}" RenderTransformOrigin="0.5,1" Height="63" Width="2" Canvas.Left="88" Canvas.Top="26" />
								<Ellipse Fill="White" Width="8" Height="8" StrokeThickness="2" Stroke="{DynamicResource PrimaryBrush}" Canvas.Top="85" Canvas.Left="85" />
							</Canvas>
							<hc:ClockRadioButton Grid.Row="1" Background="{DynamicResource PrimaryBrush}" Grid.Column="0" x:Name="PART_ButtonAm" IsChecked="True" Height="30" Width="30" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="16,0,0,16" Content="{ex:Lang Key={x:Static langs:LangKeys.Am}}" Style="{StaticResource ClockRadioButtonStyle}" />
							<hc:ClockRadioButton Grid.Row="1" Background="{DynamicResource PrimaryBrush}" Grid.Column="2" x:Name="PART_ButtonPm" Height="30" Width="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,16,16" Content="{ex:Lang Key={x:Static langs:LangKeys.Pm}}" Style="{StaticResource ClockRadioButtonStyle}" />
							<Button Grid.Row="1" Grid.Column="1" Visibility="{TemplateBinding ShowConfirmButton,Converter={StaticResource Boolean2VisibilityConverter}}" Name="PART_ButtonConfirm" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" Foreground="{DynamicResource PrimaryBrush}" HorizontalAlignment="Center" Margin="0,0,0,19" Height="24" Width="60" VerticalAlignment="Bottom" Background="Transparent" Style="{StaticResource ButtonCustom}" />
						</Grid>
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ClockListBoxItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource ListBoxItemBaseStyle}">
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
			<Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="true">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ListBoxItem">
							<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
								<StackPanel Orientation="Horizontal">
									<ContentControl Width="16" Height="16" Content="{Binding Path=(hc:EdgeElement.LeftContent),RelativeSource={RelativeSource TemplatedParent}}" />
									<ContentPresenter Margin="6,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
								</StackPanel>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ClockListBoxStyle" TargetType="ListBox" BasedOn="{StaticResource ListBoxBaseStyle}">
		<Setter Property="MaxHeight" Value="192" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ClockListBoxItemStyle}" />
	</Style>
	<Style TargetType="hc:ListClock">
		<Setter Property="BorderThickness" Value="0,1,0,0" />
		<Setter Property="Margin" Value="8,0,8,8" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Width" Value="210" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ListClock">
					<hc:SimplePanel>
						<Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" />
						<Grid Margin="0,4">
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition />
								<ColumnDefinition />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<ListBox hc:BorderElement.CornerRadius="0" x:Name="PART_HourList" Style="{StaticResource ClockListBoxStyle}" />
							<ListBox hc:BorderElement.CornerRadius="0" Grid.Row="0" Grid.Column="1" x:Name="PART_MinuteList" Style="{StaticResource ClockListBoxStyle}" BorderThickness="1,0" />
							<ListBox hc:BorderElement.CornerRadius="0" Grid.Row="0" Grid.Column="2" x:Name="PART_SecondList" Style="{StaticResource ClockListBoxStyle}" />
							<Border VerticalAlignment="Bottom" Visibility="{Binding Visibility,ElementName=PART_ButtonConfirm}" Height="1" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Background="{DynamicResource BorderBrush}" />
							<Button Margin="0,10" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" Visibility="{TemplateBinding ShowConfirmButton,Converter={StaticResource Boolean2VisibilityConverter}}" Name="PART_ButtonConfirm" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" Foreground="{DynamicResource PrimaryBrush}" HorizontalAlignment="Center" Background="Transparent" Style="{StaticResource ButtonCustom}" />
						</Grid>
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ColorPickerBaseStyle}" TargetType="hc:ColorPicker" />
	<Style BasedOn="{StaticResource ContextMenuBaseStyle}" TargetType="ContextMenu" />
	<Style BasedOn="{StaticResource CoverFlowBaseStyle}" TargetType="hc:CoverFlow" />
	<Style BasedOn="{StaticResource CoverViewBaseStyle}" TargetType="hc:CoverView" />
	<Style x:Key="DataGridCellStyle" TargetType="DataGridCell">
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="2" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DataGridCell">
					<Border Background="Transparent">
						<Border Margin="0,0,4,0" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}" Value="true" />
					<Condition Binding="{Binding SelectionUnit,RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid}}" Value="Cell" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}" Value="true" />
					<Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="False" />
					<Condition Binding="{Binding SelectionUnit,RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid}}" Value="CellOrRowHeader" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}" Value="true" />
					<Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
					<Condition Binding="{Binding SelectionUnit,RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid}}" Value="CellOrRowHeader" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}" Value="true" />
					<Condition Binding="{Binding SelectionUnit,RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid}}" Value="FullRow" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
			</MultiDataTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true" />
					<Condition Property="Selector.IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DataGridRowStyle" TargetType="DataGridRow">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="Margin" Value="0,0,0,4" />
		<Setter Property="Padding" Value="0,6" />
		<Setter Property="MinHeight" Value="44" />
		<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
		<Setter Property="ValidationErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DataGridRow">
					<SelectiveScrollingGrid>
						<SelectiveScrollingGrid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</SelectiveScrollingGrid.ColumnDefinitions>
						<SelectiveScrollingGrid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</SelectiveScrollingGrid.RowDefinitions>
						<Border CornerRadius="4" Grid.ColumnSpan="2" x:Name="DGR_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
						<DataGridCellsPresenter MinHeight="{TemplateBinding MinHeight}" VerticalContentAlignment="Center" Grid.Row="0" Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<DataGridDetailsPresenter Margin="0,6" Grid.Column="1" Grid.Row="1" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" Visibility="{TemplateBinding DetailsVisibility}" />
						<DataGridRowHeader Grid.Row="0" Grid.Column="0" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
					</SelectiveScrollingGrid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
			</Trigger>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true" />
					<Condition Property="Selector.IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Padding" Value="12,6,12,12" />
		<Setter Property="MinHeight" Value="44" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DataGridColumnHeader">
					<hc:SimplePanel>
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Padding="{TemplateBinding Padding}">
							<Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<ContentPresenter RecognizesAccessKey="True" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<ToggleButton Grid.Column="1" VerticalAlignment="Center" Height="{x:Static system:Double.NaN}" Padding="4,0" Width="20" IsEnabled="False" Opacity="1" Foreground="{DynamicResource PrimaryBrush}" x:Name="ToggleButtonSortDirection" Style="{StaticResource ToggleButtonIconTransparent}" hc:IconSwitchElement.Geometry="{StaticResource DownGeometry}" hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}" />
							</Grid>
						</Border>
						<Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
						<Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
					</hc:SimplePanel>
					<ControlTemplate.Triggers>
						<Trigger Property="SortDirection" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ToggleButtonSortDirection" />
						</Trigger>
						<Trigger Property="SortDirection" Value="Ascending">
							<Setter Property="IsChecked" Value="True" TargetName="ToggleButtonSortDirection" />
						</Trigger>
						<Trigger Property="SortDirection" Value="Descending">
							<Setter Property="IsChecked" Value="False" TargetName="ToggleButtonSortDirection" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="SortDirection" Value="Ascending">
				<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="SortDirection" Value="Descending">
				<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DataGridRowHeaderStyle" TargetType="DataGridRowHeader">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DataGridRowHeader">
					<hc:SimplePanel HorizontalAlignment="Center">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Padding="{TemplateBinding Padding}">
							<StackPanel Orientation="Horizontal">
								<ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
							</StackPanel>
						</Border>
						<Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Top" />
						<Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Bottom" />
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="DataGrid">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="GridLinesVisibility" Value="None" />
		<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="EnableRowVirtualization" Value="True" />
		<Setter Property="CanUserAddRows" Value="False" />
		<Setter Property="CanUserDeleteRows" Value="False" />
		<Setter Property="CanUserReorderColumns" Value="False" />
		<Setter Property="CanUserResizeRows" Value="False" />
		<Setter Property="ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle}" />
		<Setter Property="RowHeaderStyle" Value="{StaticResource DataGridRowHeaderStyle}" />
		<Setter Property="RowStyle" Value="{StaticResource DataGridRowStyle}" />
		<Setter Property="CellStyle" Value="{StaticResource DataGridCellStyle}" />
		<Setter Property="Padding" Value="6" />
		<Setter Property="ColumnWidth" Value="*" />
		<Setter Property="hc:DataGridAttach.TextColumnStyle" Value="{StaticResource DataGridTextColumnStyle}" />
		<Setter Property="hc:DataGridAttach.EditingTextColumnStyle" Value="{StaticResource TextBoxBaseStyle}" />
		<Setter Property="hc:DataGridAttach.ComboBoxColumnStyle" Value="{StaticResource TextBlockComboBoxStyle}" />
		<Setter Property="hc:DataGridAttach.EditingComboBoxColumnStyle" Value="{StaticResource ComboBoxBaseStyle}" />
		<Setter Property="hc:DataGridAttach.CheckBoxColumnStyle" Value="{StaticResource CheckBoxBaseStyle}" />
		<Setter Property="hc:DataGridAttach.EditingCheckBoxColumnStyle" Value="{StaticResource CheckBoxBaseStyle}" />
		<Setter Property="hc:DataGridAttach.ApplyDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DataGrid">
					<ControlTemplate.Resources>
						<Storyboard x:Key="Storyboard1">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="Storyboard2">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
						<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
							<hc:ToggleBlock.CheckedContent>
								<ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
									<ScrollViewer.Template>
										<ControlTemplate TargetType="ScrollViewer">
											<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto" />
													<ColumnDefinition Width="*" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition Height="*" />
												</Grid.RowDefinitions>
												<Button Command="{x:Static DataGrid.SelectAllCommand}" Margin="0,0,0,6" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType=DataGrid},Converter={StaticResource DoubleMinConverter}}" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource AllGeometry}" Foreground="{DynamicResource PrimaryBrush}" />
												<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.ColumnSpan="2" Grid.Row="0" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
												<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="3" Grid.Column="0" Grid.Row="1" />
												<ScrollBar Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" />
												<ScrollBar Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" VerticalAlignment="Bottom" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
											</Grid>
											<ControlTemplate.Triggers>
												<EventTrigger RoutedEvent="MouseEnter">
													<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
												</EventTrigger>
												<EventTrigger RoutedEvent="MouseLeave">
													<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
												</EventTrigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</ScrollViewer.Template>
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</hc:ToggleBlock.CheckedContent>
							<hc:ToggleBlock.UnCheckedContent>
								<hc:Empty />
							</hc:ToggleBlock.UnCheckedContent>
						</hc:ToggleBlock>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource DatePickerBaseStyle}" TargetType="DatePicker" />
	<Style x:Key="DatePickerExtend" BasedOn="{StaticResource DatePickerExtendBaseStyle}" TargetType="DatePicker" />
	<Style BasedOn="{StaticResource DatePickerPlusBaseStyle}" TargetType="hc:DatePicker" />
	<Style BasedOn="{StaticResource DateTimePickerBaseStyle}" TargetType="hc:DateTimePicker" />
	<Style x:Key="DateTimePickerExtend" BasedOn="{StaticResource DateTimePickerExtendBaseStyle}" TargetType="hc:DateTimePicker" />
	<Style x:Key="DateTimePickerPlus" BasedOn="{StaticResource DateTimePickerPlusBaseStyle}" TargetType="hc:DateTimePicker" />
	<Style BasedOn="{StaticResource DialogBaseStyle}" TargetType="hc:Dialog" />
	<Style BasedOn="{StaticResource DividerBaseStyle}" TargetType="hc:Divider" />
	<Style BasedOn="{StaticResource DrawerBaseStyle}" TargetType="hc:Drawer" />
	<Style BasedOn="{StaticResource EmptyBaseStyle}" TargetType="hc:Empty" />
	<Style BasedOn="{StaticResource ExpanderBaseStyle}" TargetType="Expander" />
	<Style BasedOn="{StaticResource FlowDocumentScrollViewerBaseStyle}" TargetType="FlowDocumentScrollViewer" />
	<Style BasedOn="{StaticResource FlowDocumentPageViewerBaseStyle}" TargetType="FlowDocumentPageViewer" />
	<Style BasedOn="{StaticResource FlowDocumentReaderBaseStyle}" TargetType="FlowDocumentReader" />
	<Style BasedOn="{StaticResource FrameBaseStyle}" TargetType="Frame" />
	<Style BasedOn="{StaticResource GotoTopBaseStyle}" TargetType="hc:GotoTop" />
	<Style BasedOn="{StaticResource GravatarBaseStyle}" TargetType="hc:Gravatar" />
	<Style x:Key="GravatarCircle" BasedOn="{StaticResource GravatarBaseStyle}" TargetType="hc:Gravatar">
		<Setter Property="Padding" Value="16" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Gravatar">
					<Border Style="{StaticResource BorderCircularClip}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter Margin="{TemplateBinding Padding}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="GravatarCircleImg" BasedOn="{StaticResource GravatarCircle}" TargetType="hc:Gravatar">
		<Setter Property="Padding" Value="0" />
	</Style>
	<Style TargetType="hc:Growl">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="MinHeight" Value="60" />
		<Setter Property="Width" Value="320" />
		<Setter Property="Margin" Value="10,0,0,10" />
		<Setter Property="MaxWidth" Value="320" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="8" />
		<Setter Property="Background" Value="{DynamicResource ThirdlyRegionBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Growl">
					<Grid Name="PART_GridMain" RenderTransformOrigin="0.5,0.5">
						<Grid.RenderTransform>
							<TransformGroup>
								<TranslateTransform X="{TemplateBinding MaxWidth}" />
							</TransformGroup>
						</Grid.RenderTransform>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="50" />
							<ColumnDefinition />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<Border Grid.ColumnSpan="3" Grid.RowSpan="2" Effect="{StaticResource EffectShadow2}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
						<Path Grid.Row="0" Grid.Column="0" VerticalAlignment="Top" Margin="0,15,0,0" Width="30" Height="30" Data="{TemplateBinding Icon}" Stretch="Uniform" Fill="{TemplateBinding IconBrush}" />
						<StackPanel VerticalAlignment="Center" Grid.Row="0" Grid.Column="1" Margin="0,10,10,10">
							<TextBlock Text="{TemplateBinding Message}" Style="{StaticResource TextBlockDefault}" HorizontalAlignment="Left" TextWrapping="Wrap" />
							<TextBlock Visibility="{Binding ShowDateTime,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Boolean2VisibilityConverter}}" Text="{Binding Time,RelativeSource={RelativeSource AncestorType=hc:Growl},StringFormat=yyyy/MM/dd HH:mm:ss}" Style="{StaticResource TextBlockDefault}" Foreground="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Left" Margin="0,4,0,0" />
						</StackPanel>
						<Button Grid.Row="0" Visibility="Collapsed" Margin="11,0" Name="PART_ButtonClose" Command="interactivity:ControlCommands.Close" Grid.Column="2" Background="Transparent" Style="{StaticResource ButtonCustom}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="18" Height="18">
							<Path Data="{StaticResource ErrorGeometry}" Stretch="Uniform" Fill="{DynamicResource SecondaryTextBrush}" />
						</Button>
						<UniformGrid Columns="2" Name="PART_PanelMore" IsEnabled="False" Visibility="Collapsed" Grid.Row="1" Grid.ColumnSpan="3" Height="28" Grid.Column="0">
							<Button Command="interactivity:ControlCommands.Cancel" Style="{StaticResource ButtonCustom}" HorizontalAlignment="Stretch" Background="Transparent">
								<TextBlock Text="{Binding CancelStr,RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Foreground="{DynamicResource DangerBrush}" />
							</Button>
							<Button Command="interactivity:ControlCommands.Confirm" Style="{StaticResource ButtonCustom}" HorizontalAlignment="Stretch" Background="Transparent">
								<TextBlock Text="{Binding ConfirmStr,RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Foreground="{DynamicResource PrimaryBrush}" />
							</Button>
						</UniformGrid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ImageSelectorBaseStyle}" TargetType="hc:ImageSelector" />
	<Style TargetType="hc:ImageViewer">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinWidth" Value="400" />
		<Setter Property="MinHeight" Value="250" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:ImageViewer">
					<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<hc:SimplePanel x:Name="PART_PanelMain" ClipToBounds="True" Grid.RowSpan="2">
								<Border HorizontalAlignment="Left" VerticalAlignment="Top" Height="{TemplateBinding ImageHeight}" Width="{TemplateBinding ImageWidth}" Margin="{TemplateBinding ImageMargin}">
									<Image Name="PART_ImageMain" RenderOptions.BitmapScalingMode="NearestNeighbor" RenderTransformOrigin="0.5,0.5" Source="{TemplateBinding ImageSource}" />
								</Border>
							</hc:SimplePanel>
							<Border Grid.Row="0" Grid.RowSpan="2" Width="252" Height="162" HorizontalAlignment="Right" VerticalAlignment="Bottom" Background="{DynamicResource DarkOpacityBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
								<Border.Visibility>
									<MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
										<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ShowSmallImgInternal" />
										<Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ShowImgMap" />
									</MultiBinding>
								</Border.Visibility>
								<Canvas ClipToBounds="True" Name="PART_CanvasSmallImg" MaxWidth="250" MaxHeight="160">
									<Border UseLayoutRounding="True" Name="PART_BorderMove" Background="Transparent" Width="50" Height="70" BorderThickness="1" BorderBrush="Black">
										<Border BorderThickness="1" BorderBrush="White" />
									</Border>
								</Canvas>
							</Border>
							<Border UseLayoutRounding="True" Name="PART_BorderBottom" Opacity="0" CornerRadius="4,4,0,0" Grid.Row="1" HorizontalAlignment="Center" Background="{DynamicResource DarkOpacityBrush}">
								<StackPanel Margin="30,10" VerticalAlignment="Center" Orientation="Horizontal">
									<Button Command="interactivity:ControlCommands.Save" Margin="6,0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource SaveGeometry}" Padding="3" />
									<Button Command="interactivity:ControlCommands.Open" Margin="6,0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource WindowsGeometry}" Padding="3" />
									<Border Margin="10,2" Background="White" Style="{StaticResource BorderVerticallySplitter}" />
									<Button Command="interactivity:ControlCommands.Reduce" Margin="6,0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource ReduceGeometry}" Padding="3" />
									<TextBlock Margin="6,0" Text="{TemplateBinding ScaleStr}" Style="{StaticResource TextBlockSubTitle}" Foreground="{DynamicResource TextIconBrush}" />
									<Button Command="interactivity:ControlCommands.Enlarge" Margin="6,0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource EnlargeGeometry}" Padding="3" />
									<Button Command="interactivity:ControlCommands.Restore" Background="Transparent" Margin="6,0" Style="{StaticResource ButtonCustom}" Foreground="White">
										<Border BorderThickness="1" BorderBrush="White" Padding="2">
											<TextBlock Text="1:1" />
										</Border>
									</Button>
									<Border Margin="10,2" Background="White" Style="{StaticResource BorderVerticallySplitter}" />
									<Button Command="interactivity:ControlCommands.RotateLeft" CommandParameter="" Margin="6,0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource RotateLeftGeometry}" Padding="3" />
									<Button Command="interactivity:ControlCommands.RotateRight" Margin="6,0,0,0" Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource RotateRightGeometry}" Padding="3" />
									<ToggleButton Visibility="{TemplateBinding ShowFullScreenButton,Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{DynamicResource TextIconBrush}" IsChecked="{Binding IsFullScreen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" Margin="12,0,6,0" Style="{StaticResource ToggleButtonIconTransparent}" hc:IconSwitchElement.Geometry="{StaticResource FullScreenGeometry}" hc:IconSwitchElement.GeometrySelected="{StaticResource FullScreenReturnGeometry}" Padding="3" />
								</StackPanel>
							</Border>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="ListBox" />
	<Style x:Key="ListBoxCustom" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="ListBox">
		<Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemCustom}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
	</Style>
	<Style x:Key="WrapPanelHorizontalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="ListBox">
		<Setter Property="ItemsPanel" Value="{StaticResource WrapPanelHorizontalItemsPanelTemplate}" />
	</Style>
	<Style x:Key="WrapPanelVerticalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="ListBox">
		<Setter Property="ItemsPanel" Value="{StaticResource WrapPanelVerticalItemsPanelTemplate}" />
	</Style>
	<Style x:Key="StackPanelHorizontalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="ListBox">
		<Setter Property="ItemsPanel" Value="{StaticResource StackPanelHorizontalItemsPanelTemplate}" />
	</Style>
	<Style x:Key="StackPanelVerticalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="ListBox">
		<Setter Property="ItemsPanel" Value="{StaticResource StackPanelVerticalItemsPanelTemplate}" />
	</Style>
	<Style TargetType="GridViewColumnHeader">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Padding" Value="12,6,12,12" />
		<Setter Property="MinHeight" Value="44" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="GridViewColumnHeader">
					<hc:SimplePanel SnapsToDevicePixels="true">
						<Border x:Name="HeaderBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
							<ContentPresenter x:Name="HeaderContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Border>
						<Canvas>
							<Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}" />
						</Canvas>
					</hc:SimplePanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ListViewItemBaseStyle" TargetType="ListViewItem">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="Margin" Value="0,0,0,4" />
		<Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
		<Setter Property="MinHeight" Value="44" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Border CornerRadius="4" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<GridViewRowPresenter Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
			</Trigger>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true" />
					<Condition Property="Selector.IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ListViewScrollViewerStyle" TargetType="ScrollViewer">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ScrollViewer">
					<ControlTemplate.Resources>
						<Storyboard x:Key="Storyboard1">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="Storyboard2">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
								<EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<GridViewHeaderRowPresenter Grid.ColumnSpan="2" AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" Margin="2,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.ColumnSpan="2" Grid.Row="1" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" KeyboardNavigation.DirectionalNavigation="Local" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<ScrollBar Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" x:Name="PART_VerticalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" />
						<ScrollBar Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" x:Name="PART_HorizontalScrollBar" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" VerticalAlignment="Bottom" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
					</Grid>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="MouseEnter">
							<BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
						</EventTrigger>
						<EventTrigger RoutedEvent="MouseLeave">
							<BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="ListView">
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="6" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ListViewItemBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListView">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
						<hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
							<hc:ToggleBlock.CheckedContent>
								<ScrollViewer Style="{StaticResource ListViewScrollViewerStyle}">
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</hc:ToggleBlock.CheckedContent>
							<hc:ToggleBlock.UnCheckedContent>
								<hc:Empty />
							</hc:ToggleBlock.UnCheckedContent>
						</hc:ToggleBlock>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="hc:LoadingLine" />
	<Style x:Key="LoadingLineLight" BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="hc:LoadingLine">
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
	</Style>
	<Style x:Key="LoadingLineLarge" BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="hc:LoadingLine">
		<Setter Property="DotDiameter" Value="10" />
	</Style>
	<Style x:Key="LoadingLineLargeLight" BasedOn="{StaticResource LoadingLineLarge}" TargetType="hc:LoadingLine">
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
	</Style>
	<Style BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="hc:LoadingCircle" />
	<Style x:Key="LoadingCircleLight" BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="hc:LoadingCircle">
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
	</Style>
	<Style x:Key="LoadingCircleLarge" BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="hc:LoadingCircle">
		<Setter Property="Width" Value="100" />
		<Setter Property="Height" Value="100" />
		<Setter Property="DotDiameter" Value="10" />
		<Setter Property="DotInterval" Value="20" />
		<Setter Property="DotOffSet" Value="40" />
		<Setter Property="DotDelayTime" Value="120" />
	</Style>
	<Style x:Key="LoadingCircleLargeLight" BasedOn="{StaticResource LoadingCircleLarge}" TargetType="hc:LoadingCircle">
		<Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
	</Style>
	<Style BasedOn="{StaticResource MagnifierBaseStyle}" TargetType="hc:Magnifier" />
	<Style x:Key="MessageBoxButtonStyle" BasedOn="{StaticResource ButtonDefault}" TargetType="Button">
		<Setter Property="MinWidth" Value="88" />
		<Setter Property="Visibility" Value="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource Boolean2VisibilityConverter}}" />
		<Setter Property="Margin" Value="5,0" />
	</Style>
	<Style x:Key="MessageBoxPrimaryButtonStyle" BasedOn="{StaticResource ButtonPrimary}" TargetType="Button">
		<Setter Property="MinWidth" Value="88" />
		<Setter Property="Visibility" Value="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource Boolean2VisibilityConverter}}" />
		<Setter Property="Margin" Value="5,0" />
	</Style>
	<Style TargetType="hc:MessageBox" BasedOn="{StaticResource WindowWin10}">
		<Setter Property="MinHeight" Value="172" />
		<Setter Property="ShowInTaskbar" Value="False" />
		<Setter Property="MinWidth" Value="335" />
		<Setter Property="MaxWidth" Value="476" />
		<Setter Property="MaxHeight" Value="680" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="SizeToContent" Value="WidthAndHeight" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:MessageBox">
					<Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<Grid Margin="{TemplateBinding Padding}">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid Background="{TemplateBinding NonClientAreaBackground}" Name="PART_NonClientArea" TextElement.Foreground="{TemplateBinding NonClientAreaForeground}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<StackPanel WindowChrome.IsHitTestVisibleInChrome="True" UseLayoutRounding="True" VerticalAlignment="Top" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
									<Button Background="{TemplateBinding CloseButtonBackground}" Foreground="{TemplateBinding CloseButtonForeground}" IsTabStop="False" Name="PART_ButtonClose" Height="29" Style="{StaticResource ButtonIcon}" Width="46" hc:IconElement.Geometry="{StaticResource CloseGeometry}" BorderThickness="1,0,0,0" hc:IconElement.Width="10" hc:IconElement.Height="10" />
								</StackPanel>
								<Grid Grid.Column="0">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<Button Name="ButtonIcon" Visibility="{TemplateBinding Icon,Converter={StaticResource Object2VisibilityConverter}}" Command="{x:Static SystemCommands.ShowSystemMenuCommand}" Background="Transparent" Margin="10,0,0,0" WindowChrome.IsHitTestVisibleInChrome="True" Style="{StaticResource ButtonCustom}" VerticalAlignment="Center">
										<interactivity:Interaction.Triggers>
											<interactivity:EventTrigger EventName="MouseDoubleClick">
												<interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}" />
											</interactivity:EventTrigger>
										</interactivity:Interaction.Triggers>
										<Image IsHitTestVisible="False" Source="{TemplateBinding Icon}" VerticalAlignment="Center" Width="16" Height="16" />
									</Button>
									<TextBlock Grid.Column="1" Text="{TemplateBinding Title}" Padding="10,0,0,0" VerticalAlignment="Center">
										<TextBlock.Visibility>
											<MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
												<MultiBinding.Bindings>
													<Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}" />
													<Binding Path="Title" RelativeSource="{RelativeSource TemplatedParent}" Converter="{StaticResource Object2BooleanConverter}" />
												</MultiBinding.Bindings>
											</MultiBinding>
										</TextBlock.Visibility>
									</TextBlock>
									<ContentPresenter WindowChrome.IsHitTestVisibleInChrome="True" Grid.Column="2" x:Name="ContentPresenterMain" Content="{TemplateBinding NonClientAreaContent}" />
								</Grid>
							</Grid>
							<Grid Grid.Row="1">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<Path Data="{TemplateBinding Image}" Fill="{TemplateBinding ImageBrush}" HorizontalAlignment="Center" Visibility="{TemplateBinding ShowImage,Converter={StaticResource Boolean2VisibilityConverter}}" Grid.Row="0" Grid.Column="0" VerticalAlignment="Top" Margin="20,32,0,0" Width="30" Height="30" Stretch="Uniform" />
								<ScrollViewer Grid.Row="0" Grid.Column="1" VerticalAlignment="Top">
									<Border MinHeight="30" Margin="10,32,10,10" HorizontalAlignment="Left">
										<TextBlock VerticalAlignment="Center" Text="{TemplateBinding Message}" TextWrapping="Wrap" />
									</Border>
								</ScrollViewer>
								<StackPanel Name="PART_Panel" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Margin="0,10,0,16" Orientation="Horizontal" HorizontalAlignment="Center" />
							</Grid>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsActive" Value="False">
							<Setter Property="Opacity" Value=".8" TargetName="ContentPresenterMain" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True" SourceName="PART_ButtonClose">
							<Setter Property="Background" TargetName="PART_ButtonClose" Value="{Binding CloseButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter Property="Foreground" TargetName="PART_ButtonClose" Value="{Binding CloseButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource NavigationWindowBaseStyle}" TargetType="NavigationWindow" />
	<Style BasedOn="{StaticResource NumericUpDownBaseStyle}" TargetType="hc:NumericUpDown" />
	<Style x:Key="NumericUpDownExtend" BasedOn="{StaticResource NumericUpDownExtendBaseStyle}" TargetType="hc:NumericUpDown" />
	<Style x:Key="NumericUpDownPlus" BasedOn="{StaticResource NumericUpDownPlusBaseStyle}" TargetType="hc:NumericUpDown" />
	<Style x:Key="PaginationButtonStyle" BasedOn="{StaticResource BaseStyle}" TargetType="RadioButton">
		<Setter Property="GroupName" Value="1" />
		<Setter Property="MinWidth" Value="30" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="Margin" Value="-1,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<Border x:Name="BorderRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
							<Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
							<ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="BorderBrush" Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="Background" Value="{Binding Path=(hc:VisualElement.HighlightBackground),RelativeSource={RelativeSource TemplatedParent}}" TargetName="BorderRoot" />
							<Setter Property="TextElement.Foreground" Value="{Binding Path=(hc:VisualElement.HighlightForeground),RelativeSource={RelativeSource TemplatedParent}}" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="Content" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="contentPresenter" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
							<Setter Property="Margin" Value="0" TargetName="contentPresenter" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="hc:Pagination">
		<Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource TextIconBrush}" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:Pagination">
					<StackPanel Orientation="Horizontal" VerticalAlignment="Top">
						<Button x:Name="PART_ButtonLeft" MinWidth="30" Padding="10,8" hc:IconElement.Geometry="{StaticResource LeftGeometry}" hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='1,0,0,1'}" Command="interactivity:ControlCommands.Prev" />
						<StackPanel ZIndex="999" HorizontalAlignment="Center" Orientation="Horizontal">
							<interactivity:Interaction.Triggers>
								<interactivity:RoutedEventTrigger RoutedEvent="RadioButton.Checked">
									<interactivity:EventToCommand Command="interactivity:ControlCommands.Selected" PassEventArgsToCommand="True" />
								</interactivity:RoutedEventTrigger>
							</interactivity:Interaction.Triggers>
							<RadioButton Name="PART_ButtonFirst" Content="1" IsChecked="True" Style="{StaticResource PaginationButtonStyle}" />
							<Border Name="PART_MoreLeft" Cursor="No" Margin="-1,0,0,0" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource SecondaryRegionBrush}" Padding="10,0">
								<hc:SimpleText FontWeight="Bold" Foreground="{DynamicResource SecondaryTextBrush}" Text="..." VerticalAlignment="Center" />
							</Border>
							<StackPanel Name="PART_PanelMain" Orientation="Horizontal" />
							<Border Name="PART_MoreRight" Cursor="No" Margin="-1,0,0,0" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource SecondaryRegionBrush}" Padding="10,0">
								<hc:SimpleText FontWeight="Bold" Foreground="{DynamicResource SecondaryTextBrush}" Text="..." VerticalAlignment="Center" />
							</Border>
							<RadioButton Name="PART_ButtonLast" Content="10" Style="{StaticResource PaginationButtonStyle}" />
						</StackPanel>
						<Button x:Name="PART_ButtonRight" MinWidth="30" Padding="10,8" hc:IconElement.Geometry="{StaticResource RightGeometry}" hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource CornerRadiusSplitConverter},ConverterParameter='0,1,1,0'}" Margin="-1,0,0,0" Command="interactivity:ControlCommands.Next" />
						<hc:NumericUpDown x:Name="PART_Jump" IsEnabled="{TemplateBinding IsJumpEnabled}" Visibility="{TemplateBinding IsJumpEnabled,Converter={StaticResource Boolean2VisibilityConverter}}" Margin="6,0,0,0" Maximum="{Binding MaxPageCount,RelativeSource={RelativeSource TemplatedParent}}" Minimum="1" />
						<Button IsEnabled="{TemplateBinding IsJumpEnabled}" Visibility="{TemplateBinding IsJumpEnabled,Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang {x:Static langs:LangKeys.Jump}}" Margin="6,0,0,0" Command="interactivity:ControlCommands.Jump" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource PasswordBoxBaseStyle}" TargetType="PasswordBox" />
	<Style x:Key="PasswordBoxExtend" BasedOn="{StaticResource PasswordBoxExtendBaseStyle}" TargetType="PasswordBox" />
	<Style BasedOn="{StaticResource PasswordBoxPlusBaseStyle}" TargetType="hc:PasswordBox" />
	<Style BasedOn="{StaticResource PinBoxBaseStyle}" TargetType="hc:PinBox" />
	<Style BasedOn="{StaticResource PoptipBaseStyle}" TargetType="hc:Poptip" />
	<Style TargetType="hc:PopupWindow">
		<Setter Property="WindowStyle" Value="None" />
		<Setter Property="MinHeight" Value="220" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="BorderThickness" Value="20" />
		<Setter Property="ShowInTaskbar" Value="False" />
		<Setter Property="MinWidth" Value="300" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="SizeToContent" Value="WidthAndHeight" />
		<Setter Property="Effect">
			<Setter.Value>
				<DropShadowEffect Opacity=".6" ShadowDepth="0" BlurRadius="15" />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:PopupWindow">
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<Grid Name="TitleGrid" Height="30" Background="{DynamicResource TitleBrush}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<TextBlock Name="PART_TitleBlock" Background="Transparent" Padding="{StaticResource DefaultControlPadding}" Foreground="White" Text="{TemplateBinding Title}" VerticalAlignment="Center" TextWrapping="Wrap" TextTrimming="WordEllipsis" />
								<Button Margin="0,0,1,0" Background="Transparent" Name="CloseButton" Foreground="White" Grid.Column="1" hc:BackgroundSwitchElement.MouseHoverBackground="Red" hc:BackgroundSwitchElement.MouseDownBackground="Red" Command="interactivity:ControlCommands.Close" IsCancel="True" Height="28" Style="{StaticResource ButtonCustom}" Width="44" Padding="9">
									<Path Fill="{Binding ElementName=CloseButton,Path=Foreground}" Style="{StaticResource ClosePathStyle}" />
								</Button>
							</Grid>
							<Border BorderBrush="{DynamicResource TitleBrush}" Name="PART_MainBorder" Grid.Row="1">
								<StackPanel>
									<TextBlock Text="{TemplateBinding ContentStr}" MinHeight="110" Name="MyTextBlock" TextAlignment="Center" Padding="32" Foreground="{DynamicResource PrimaryTextBrush}" MaxWidth="300" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Background="{TemplateBinding Background}" />
									<StackPanel Margin="0,0,0,32" Orientation="Horizontal" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center">
										<Button IsCancel="True" MinWidth="80" Command="interactivity:ControlCommands.Cancel" Content="{ex:Lang Key={x:Static langs:LangKeys.Cancel}}" Visibility="{TemplateBinding ShowCancel,Converter={StaticResource Boolean2VisibilityConverter}}" Margin="0,0,16,0" />
										<Button IsDefault="True" MinWidth="80" Command="interactivity:ControlCommands.Confirm" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" Style="{StaticResource ButtonPrimary}" />
									</StackPanel>
								</StackPanel>
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="ShowBorder" Value="True">
							<Setter Property="BorderThickness" Value="1,0,1,1" TargetName="PART_MainBorder" />
						</Trigger>
						<Trigger Property="ShowTitle" Value="False">
							<Setter Property="Visibility" Value="Collapsed" TargetName="TitleGrid" />
							<Setter Property="Background" Value="Transparent" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="hc:ProgressButton">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ProgressButtonPrimary" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="hc:ProgressButton">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="ProgressButtonSuccess" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="hc:ProgressButton">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="ProgressButtonInfo" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="hc:ProgressButton">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="ProgressButtonWarning" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="hc:ProgressButton">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="ProgressButtonDanger" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="hc:ProgressButton">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style BasedOn="{StaticResource PropertyGridBaseStyle}" TargetType="hc:PropertyGrid" />
	<Style x:Key="ComboBoxItemCapsuleBaseStyle" BasedOn="{x:Null}" TargetType="ComboBoxItem">
		<Setter Property="MinWidth" Value="40" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="hc:BorderElement.CornerRadius" Value="0" />
		<Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="Margin" Value="-1,0,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBoxItem">
					<Border x:Name="BorderRoot" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<ContentPresenter x:Name="contentPresenter" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" TextElement.Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
				<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}" />
			</Trigger>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
				<Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ComboBoxItemCapsuleDefault" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="ComboBoxItem" />
	<Style x:Key="ComboBoxItemCapsuleHorizontalFirst" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="ComboBoxItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="ComboBoxItemCapsuleHorizontalLast" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="ComboBoxItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
	</Style>
	<Style x:Key="ComboBoxItemCapsuleSingle" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="ComboBoxItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
	</Style>
	<Style x:Key="ComboBoxItemCapsuleVerticalFirst" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="ComboBoxItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="ComboBoxItemCapsuleVerticalLast" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="ComboBoxItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
	</Style>
	<Style x:Key="ComboBoxCapsule" BasedOn="{x:Null}" TargetType="ComboBox">
		<Setter Property="ItemContainerStyleSelector" Value="{StaticResource ComboBoxItemCapsuleStyleSelector}" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ItemsPanel" Value="{StaticResource ComboBoxCapsuleItemsPanelTemplate}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource RateBaseStyle}" TargetType="hc:Rate" />
	<Style BasedOn="{StaticResource RunningBlockBaseStyle}" TargetType="hc:RunningBlock" />
	<Style BasedOn="{StaticResource SeparatorBaseStyle}" TargetType="Separator" />
	<Style BasedOn="{StaticResource ShieldBaseStyle}" TargetType="hc:Shield" />
	<Style BasedOn="{StaticResource SideMenuBaseStyle}" TargetType="hc:SideMenu" />
	<Style x:Key="SideMenuAccordion" BasedOn="{StaticResource SideMenuBaseStyle}" TargetType="hc:SideMenu">
		<Setter Property="ExpandMode" Value="Accordion" />
		<Setter Property="PanelAreaLength" Value="200" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource SideMenuItemHeaderAccordionBaseStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:SideMenu">
					<Border Name="BorderRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<StackPanel x:Name="PART_Panel" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="hc:SplitButton">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource BorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="SplitButtonPrimary" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="hc:SplitButton">
		<Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
	</Style>
	<Style x:Key="SplitButtonSuccess" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="hc:SplitButton">
		<Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
	</Style>
	<Style x:Key="SplitButtonInfo" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="hc:SplitButton">
		<Setter Property="Background" Value="{DynamicResource InfoBrush}" />
	</Style>
	<Style x:Key="SplitButtonWarning" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="hc:SplitButton">
		<Setter Property="Background" Value="{DynamicResource WarningBrush}" />
	</Style>
	<Style x:Key="SplitButtonDanger" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="hc:SplitButton">
		<Setter Property="Background" Value="{DynamicResource DangerBrush}" />
	</Style>
	<Style BasedOn="{StaticResource StatusBarBaseStyle}" TargetType="StatusBar" />
	<Style BasedOn="{StaticResource StatusBarItemBaseStyle}" TargetType="StatusBarItem" />
	<Style BasedOn="{StaticResource StepBarBaseStyle}" TargetType="hc:StepBar" />
	<Style TargetType="hc:TabItem">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderThickness" Value="1,0,1,1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="10,0,0,0" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Menu" Value="{StaticResource TabItemMenu}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:TabItem">
					<Grid x:Name="templateRoot" SnapsToDevicePixels="true" ContextMenu="{TemplateBinding Menu}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Border Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}" x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Margin="0">
							<Border Margin="0,0,0,-1" x:Name="innerBorder" Background="{DynamicResource RegionBrush}" Visibility="Collapsed" />
						</Border>
						<Path x:Name="PathMain" Margin="10,0,0,0" Grid.Column="0" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}" />
						<ContentPresenter Grid.Column="1" x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
						<Border Name="BorderMask" Grid.Column="1" HorizontalAlignment="Right" Width="20" Background="{TemplateBinding Background}" Margin="0,0,1,1">
							<Border.OpacityMask>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="White" Offset="1" />
									<GradientStop Offset="0" />
								</LinearGradientBrush>
							</Border.OpacityMask>
						</Border>
						<Button Grid.Column="2" Focusable="False" Command="interactivity:ControlCommands.Close" Visibility="{TemplateBinding ShowCloseButton,Converter={StaticResource Boolean2VisibilityConverter}}" Background="Transparent" Style="{StaticResource ButtonCustom}" Width="28">
							<Path Fill="{DynamicResource PrimaryTextBrush}" Width="8" Height="8" Style="{StaticResource ClosePathStyle}" />
						</Button>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Panel.ZIndex" Value="1" />
							<Setter Property="Visibility" TargetName="innerBorder" Value="Visible" />
							<Setter Property="Background" TargetName="BorderMask" Value="{DynamicResource RegionBrush}" />
						</Trigger>
						<Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
						</Trigger>
						<Trigger Property="ShowCloseButton" Value="True">
							<Setter Property="Margin" Value="0,0,0,1" TargetName="BorderMask" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4" TargetName="contentPresenter" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="TabControlPlusTemplate" TargetType="hc:TabControl">
		<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
			<Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
				<Grid.ColumnDefinitions>
					<ColumnDefinition x:Name="ColumnDefinition0" />
					<ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<Border Background="{TemplateBinding Background}" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}">
					<hc:TabPanel MinHeight="{TemplateBinding TabItemHeight}" TabItemHeight="{TemplateBinding TabItemHeight}" TabItemWidth="{TemplateBinding TabItemWidth}" IsTabFillEnabled="{TemplateBinding IsTabFillEnabled}" Margin="0,0,-1,-1" x:Name="PART_HeaderPanel" HorizontalAlignment="Left" Background="{DynamicResource SecondaryTextBrush}" IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1">
						<interactivity:Interaction.Behaviors>
							<interactivity:FluidMoveBehavior AppliesTo="Children" Duration="{Binding FluidMoveDuration,ElementName=PART_HeaderPanel}">
								<interactivity:FluidMoveBehavior.EaseX>
									<CubicEase EasingMode="EaseOut" />
								</interactivity:FluidMoveBehavior.EaseX>
							</interactivity:FluidMoveBehavior>
						</interactivity:Interaction.Behaviors>
					</hc:TabPanel>
				</Border>
				<Border x:Name="contentPanel" Background="{DynamicResource SecondaryRegionBrush}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
					<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</Border>
				<Border Visibility="{Binding Visibility,ElementName=PART_OverflowButton}" Margin="0,-1,0,0" Grid.Row="0" Grid.Column="0" BorderThickness="1,0,0,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Right">
					<hc:ContextMenuToggleButton x:Name="PART_OverflowButton" Visibility="Collapsed" Style="{StaticResource ToggleButtonIconTransparent}" hc:IconSwitchElement.Geometry="{StaticResource DownGeometry}" hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}" />
				</Border>
			</Grid>
		</Border>
	</ControlTemplate>
	<ControlTemplate x:Key="TabControlPlusScrollableTemplate" TargetType="hc:TabControl">
		<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
			<Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<Border Visibility="{TemplateBinding ShowScrollButton,Converter={StaticResource Boolean2VisibilityConverter}}" Margin="0,-1,0,0" Grid.Row="0" Grid.Column="0" BorderThickness="0,0,1,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Left" Panel.ZIndex="2">
					<Border.CacheMode>
						<BitmapCache SnapsToDevicePixels="True" />
					</Border.CacheMode>
					<RepeatButton Focusable="False" Style="{StaticResource RepeatButtonIcon}" Padding="8" hc:IconElement.Geometry="{StaticResource LeftGeometry}" Foreground="{DynamicResource PrimaryTextBrush}" Background="{DynamicResource SecondaryRegionBrush}" x:Name="PART_ScrollButtonLeft" />
				</Border>
				<hc:ScrollViewer HorizontalScrollBarVisibility="Hidden" CanMouseWheel="True" Orientation="Horizontal" IsInertiaEnabled="True" Grid.Row="0" Grid.Column="1" IsDeferredScrollingEnabled="True" x:Name="PART_OverflowScrollviewer">
					<Border Background="{TemplateBinding Background}" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}" Name="PART_HeaderBorder">
						<hc:TabPanel MinHeight="{TemplateBinding TabItemHeight}" TabItemHeight="{TemplateBinding TabItemHeight}" TabItemWidth="{TemplateBinding TabItemWidth}" IsTabFillEnabled="{TemplateBinding IsTabFillEnabled}" Margin="0,0,-1,-1" x:Name="PART_HeaderPanel" HorizontalAlignment="Left" Background="{DynamicResource SecondaryTextBrush}" IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1">
							<interactivity:Interaction.Behaviors>
								<interactivity:FluidMoveBehavior AppliesTo="Children" Duration="{Binding FluidMoveDuration,ElementName=PART_HeaderPanel}">
									<interactivity:FluidMoveBehavior.EaseX>
										<CubicEase EasingMode="EaseOut" />
									</interactivity:FluidMoveBehavior.EaseX>
								</interactivity:FluidMoveBehavior>
							</interactivity:Interaction.Behaviors>
						</hc:TabPanel>
					</Border>
				</hc:ScrollViewer>
				<Border Margin="0,-1,0,0" Grid.Row="0" Grid.Column="2" BorderThickness="1,0,0,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Right">
					<Border.CacheMode>
						<BitmapCache SnapsToDevicePixels="True" />
					</Border.CacheMode>
					<StackPanel Orientation="Horizontal">
						<RepeatButton Focusable="False" Visibility="{TemplateBinding ShowScrollButton,Converter={StaticResource Boolean2VisibilityConverter}}" Style="{StaticResource RepeatButtonIcon}" BorderBrush="{DynamicResource BorderBrush}" Padding="8" hc:IconElement.Geometry="{StaticResource RightGeometry}" Foreground="{DynamicResource PrimaryTextBrush}" Background="{DynamicResource SecondaryRegionBrush}" x:Name="PART_ScrollButtonRight" />
						<Border Visibility="{Binding Visibility,ElementName=PART_OverflowButton}" Width="1" Background="{DynamicResource BorderBrush}" />
						<hc:ContextMenuToggleButton x:Name="PART_OverflowButton" Visibility="Collapsed" Style="{StaticResource ToggleButtonIconTransparent}" hc:IconSwitchElement.Geometry="{StaticResource DownGeometry}" hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}" />
					</StackPanel>
				</Border>
				<Border x:Name="contentPanel" Background="{DynamicResource SecondaryRegionBrush}" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
					<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</Border>
			</Grid>
		</Border>
	</ControlTemplate>
	<Style TargetType="hc:TabControl">
		<Setter Property="Padding" Value="0" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template" Value="{StaticResource TabControlPlusTemplate}" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsScrollable" Value="True" />
					<Condition Property="IsTabFillEnabled" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" Value="{StaticResource TabControlPlusScrollableTemplate}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource TabControlBaseStyle}" TargetType="TabControl" />
	<Style x:Key="TabItemInLine" BasedOn="{StaticResource TabItemStyle}" TargetType="TabItem">
		<Setter Property="MinWidth" Value="0" />
	</Style>
	<Style x:Key="TabControlInLine" BasedOn="{StaticResource TabControlBaseStyle}" TargetType="TabControl">
		<Setter Property="ItemContainerStyle" Value="{StaticResource TabItemInLine}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabControl">
					<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<Grid x:Name="templateRoot" Background="{TemplateBinding Background}" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
							<Grid.ColumnDefinitions>
								<ColumnDefinition x:Name="ColumnDefinition0" />
								<ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition x:Name="RowDefinition0" Height="Auto" />
								<RowDefinition x:Name="RowDefinition1" Height="*" />
							</Grid.RowDefinitions>
							<UniformGrid Rows="1" x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
							<Border x:Name="contentPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
								<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="BorderThickness" Value="0,0,0,1" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
							<Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
							<Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
							<Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="BorderThickness" Value="1,0,0,0" />
							<Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="headerPanel" Property="Rows" Value="0" />
							<Setter TargetName="headerPanel" Property="Columns" Value="1" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
							<Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
							<Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
							<Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="BorderThickness" Value="0,0,1,0" />
							<Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="headerPanel" Property="Rows" Value="0" />
							<Setter TargetName="headerPanel" Property="Columns" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TabItemCapsuleDefault" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="TabItem" />
	<Style x:Key="TabItemCapsuleHorizontalFirst" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="TabItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="TabItemCapsuleHorizontalLast" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="TabItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
	</Style>
	<Style x:Key="TabItemCapsuleSingle" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="TabItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
	</Style>
	<Style x:Key="TabItemCapsuleVerticalFirst" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="TabItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
		<Setter Property="Margin" Value="0" />
	</Style>
	<Style x:Key="TabItemCapsuleVerticalLast" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="TabItem">
		<Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
	</Style>
	<Style x:Key="TabControlCapsule" TargetType="TabControl">
		<Setter Property="Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="hc:TitleElement.BorderBrush" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="hc:TitleElement.Background" Value="{DynamicResource RegionBrush}" />
		<Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource PrimaryBrush}" />
		<Setter Property="ItemContainerStyleSelector">
			<Setter.Value>
				<tools:TabItemCapsuleStyleSelector />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabControl">
					<Grid x:Name="templateRoot" Background="{TemplateBinding Background}" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
						<Grid.ColumnDefinitions>
							<ColumnDefinition x:Name="ColumnDefinition0" />
							<ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition x:Name="RowDefinition0" Height="Auto" />
							<RowDefinition x:Name="RowDefinition1" Height="*" />
						</Grid.RowDefinitions>
						<UniformGrid Rows="1" HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
						<Border x:Name="contentPanel" Margin="0,6,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
							<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
							<Setter TargetName="contentPanel" Property="Margin" Value="0,0,0,6" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
							<Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
							<Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
							<Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="headerPanel" Property="Rows" Value="0" />
							<Setter TargetName="headerPanel" Property="Columns" Value="1" />
							<Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="Margin" Value="6,0,0,0" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
							<Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
							<Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
							<Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
							<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="headerPanel" Property="Rows" Value="0" />
							<Setter TargetName="headerPanel" Property="Columns" Value="1" />
							<Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
							<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="contentPanel" Property="Margin" Value="0,0,6,0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TabControlCapsuleSolid" BasedOn="{StaticResource TabControlCapsule}" TargetType="TabControl">
		<Setter Property="hc:TitleElement.BorderBrush" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
		<Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}" />
	</Style>
	<Style TargetType="hc:TimeBar">
		<Setter Property="HotspotsBrush" Value="{DynamicResource AccentBrush}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="BorderThickness" Value="0,1,0,0" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Background" Value="{DynamicResource TitleBrush}" />
		<Setter Property="Height" Value="60" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="hc:TimeBar">
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
							<BeginStoryboard>
								<Storyboard>
									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_TextBlockMove">
										<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
									</ObjectAnimationUsingKeyFrames>
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
							<BeginStoryboard>
								<Storyboard>
									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_TextBlockMove">
										<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
									</ObjectAnimationUsingKeyFrames>
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</ControlTemplate.Triggers>
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<hc:SimplePanel ClipToBounds="True">
							<Border BorderThickness="0,0,0,4" BorderBrush="White" VerticalAlignment="Top" Height="52">
								<TextBlock FontSize="16" Name="PART_TextBlockSelected" VerticalAlignment="Top" Margin="0,14,0,0" HorizontalAlignment="Center" />
							</Border>
							<TextBlock Visibility="{TemplateBinding ShowSpeStr,Converter={StaticResource Boolean2VisibilityConverter}}" Text="{TemplateBinding SpeStr}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,14,10,0" />
							<TextBlock Visibility="Collapsed" Name="PART_TextBlockMove" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,2,0,0" />
							<Canvas Name="PART_CanvasSpe" VerticalAlignment="Bottom" Height="28" />
							<hc:SimplePanel x:Name="PART_Hotspots" Margin="0,48,0,0" VerticalAlignment="Top" Visibility="{Binding Hotspots,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Object2VisibilityConverter}}" />
							<Border Width="1" Background="{DynamicResource DangerBrush}" />
							<Border Name="PART_BorderTop" Background="Transparent" Cursor="Hand" />
						</hc:SimplePanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource TimePickerBaseStyle}" TargetType="hc:TimePicker" />
	<Style x:Key="TimePickerExtend" BasedOn="{StaticResource TimePickerExtendBaseStyle}" TargetType="hc:TimePicker" />
	<Style x:Key="TimePickerPlus" BasedOn="{StaticResource TimePickerPlusBaseStyle}" TargetType="hc:TimePicker" />
	<Style BasedOn="{StaticResource ToolBarTrayBaseStyle}" TargetType="ToolBarTray" />
	<Style BasedOn="{StaticResource ToolBarBaseStyle}" TargetType="ToolBar" />
	<Style BasedOn="{StaticResource ToolTipBaseStyle}" TargetType="ToolTip" />
	<Style BasedOn="{StaticResource TransferBaseStyle}" TargetType="hc:Transfer" />
	<Style BasedOn="{StaticResource TreeViewItemBaseStyle}" TargetType="TreeViewItem" />
	<Style BasedOn="{StaticResource TreeViewBaseStyle}" TargetType="TreeView" />
	<Style BasedOn="{StaticResource WatermarkBaseStyle}" TargetType="hc:Watermark" />
	<ControlTemplate x:Key="TipSliderThumbHorizontalTop" TargetType="Thumb">
		<hc:AxleCanvas>
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Bottom="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value,RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=Slider}}" />
			<Border Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TipSliderThumbHorizontalBottom" TargetType="Thumb">
		<hc:AxleCanvas>
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Top="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value,RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=Slider}}" />
			<Border Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TipSliderThumbVerticalLeft" TargetType="Thumb">
		<hc:AxleCanvas Orientation="Vertical">
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Right="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value,RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=Slider}}" />
			<Border Canvas.Right="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TipSliderThumbVerticalRight" TargetType="Thumb">
		<hc:AxleCanvas Orientation="Vertical">
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Left="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value,RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=Slider}}" />
			<Border Canvas.Right="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderHorizontal" TargetType="Slider">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
			<TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" />
			<Border x:Name="TrackBackground" Background="{TemplateBinding Background}" Grid.Row="1" Height="2" VerticalAlignment="center" Margin="9,0">
				<Canvas x:Name="Canvas_SelectionRange" Visibility="Hidden">
					<Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource AccentBrush}" Height="2" />
				</Canvas>
			</Border>
			<Track Margin="9,0" x:Name="PART_Track" Grid.Row="1">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}" Style="{StaticResource SliderRepeatButtonHorizontalStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonHorizontalStyle}" />
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb ClipToBounds="False" Width="18" Margin="-9,0" Height="18" x:Name="Thumb" Focusable="False" OverridesDefaultStyle="True" Template="{StaticResource SliderThumb}" VerticalAlignment="Center" />
				</Track.Thumb>
			</Track>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Top" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource TipSliderThumbHorizontalTop}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Bottom" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource TipSliderThumbHorizontalBottom}" />
			</MultiTrigger>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="IsSelectionRangeEnabled" Value="true">
				<Setter Property="Visibility" TargetName="Canvas_SelectionRange" Value="Visible" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderVertical" TargetType="Slider">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4" />
			<TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4" />
			<Border x:Name="TrackBackground" Background="{TemplateBinding Background}" Grid.Column="1" HorizontalAlignment="center" Margin="0,9" Width="2">
				<Canvas x:Name="Canvas_SelectionRange" Visibility="Hidden">
					<Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource AccentBrush}" Width="2" />
				</Canvas>
			</Border>
			<Track Margin="0,9" x:Name="PART_Track" Grid.Column="1">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}" Style="{StaticResource SliderRepeatButtonVerticalStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonVerticalStyle}" />
				</Track.IncreaseRepeatButton>
				<Track.Thumb>
					<Thumb Margin="0,-9" x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource SliderThumb}" HorizontalAlignment="Center" Width="18" />
				</Track.Thumb>
			</Track>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Left" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource TipSliderThumbVerticalLeft}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Right" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource TipSliderThumbVerticalRight}" />
			</MultiTrigger>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="IsSelectionRangeEnabled" Value="true">
				<Setter Property="Visibility" TargetName="Canvas_SelectionRange" Value="Visible" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="SliderBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="Slider">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource DarkPrimaryBrush}" />
		<Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{StaticResource SliderVertical}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate x:Key="TipRangeSliderThumbHorizontalTop" TargetType="hc:RangeThumb">
		<hc:AxleCanvas>
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Bottom="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
			<Border Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TipRangeSliderThumbHorizontalBottom" TargetType="hc:RangeThumb">
		<hc:AxleCanvas>
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Top="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
			<Border Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TipRangeSliderThumbVerticalLeft" TargetType="hc:RangeThumb">
		<hc:AxleCanvas Orientation="Vertical">
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Right="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
			<Border Canvas.Right="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TipRangeSliderThumbVerticalRight" TargetType="hc:RangeThumb">
		<hc:AxleCanvas Orientation="Vertical">
			<Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Left="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat),RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
			<Border Canvas.Right="0" Effect="{StaticResource EffectShadow1}" Name="BorderDot" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
		</hc:AxleCanvas>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Effect" Value="{StaticResource EffectShadow2}" TargetName="BorderDot" />
				<Setter Property="Opacity" Value="1" TargetName="LabelValue" />
			</Trigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
			<EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot" Storyboard.TargetProperty="BorderThickness" />
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="RangeSliderHorizontal" TargetType="hc:RangeSlider">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<TickBar x:Name="TopTick" Width="{Binding ActualWidth,ElementName=TrackBackground}" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
			<TickBar x:Name="BottomTick" Width="{Binding ActualWidth,ElementName=TrackBackground}" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" />
			<Border x:Name="TrackBackground" Background="{TemplateBinding Background}" Margin="9,0" Grid.Row="1" Height="2" VerticalAlignment="center" />
			<hc:RangeTrack IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Orientation="{TemplateBinding Orientation}" ValueStart="{TemplateBinding ValueStart}" ValueEnd="{TemplateBinding ValueEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Margin="9,0" x:Name="PART_Track" Grid.Row="1">
				<hc:RangeTrack.DecreaseRepeatButton>
					<RepeatButton Interval="{TemplateBinding Interval}" Delay="{TemplateBinding Delay}" Command="{x:Static hc:RangeSlider.DecreaseLarge}" Style="{StaticResource SliderRepeatButtonHorizontalStyle}" />
				</hc:RangeTrack.DecreaseRepeatButton>
				<hc:RangeTrack.CenterRepeatButton>
					<RepeatButton Interval="{TemplateBinding Interval}" Delay="{TemplateBinding Delay}" Command="{x:Static hc:RangeSlider.CenterLarge}" Background="{DynamicResource PrimaryBrush}" Style="{StaticResource SliderRepeatButtonHorizontalStyle}" />
				</hc:RangeTrack.CenterRepeatButton>
				<hc:RangeTrack.IncreaseRepeatButton>
					<RepeatButton Interval="{TemplateBinding Interval}" Delay="{TemplateBinding Delay}" Command="{x:Static hc:RangeSlider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonHorizontalStyle}" />
				</hc:RangeTrack.IncreaseRepeatButton>
				<hc:RangeTrack.ThumbStart>
					<hc:RangeThumb Content="{TemplateBinding ValueStart}" ClipToBounds="False" Width="18" Margin="-9,0" Height="18" x:Name="ThumbStart" Focusable="False" OverridesDefaultStyle="True" Template="{StaticResource RangeSliderThumb}" VerticalAlignment="Center" />
				</hc:RangeTrack.ThumbStart>
				<hc:RangeTrack.ThumbEnd>
					<hc:RangeThumb Content="{TemplateBinding ValueEnd}" ClipToBounds="False" Width="18" Margin="-9,0" Height="18" x:Name="ThumbEnd" Focusable="False" OverridesDefaultStyle="True" Template="{StaticResource RangeSliderThumb}" VerticalAlignment="Center" />
				</hc:RangeTrack.ThumbEnd>
			</hc:RangeTrack>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Top" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbHorizontalTop}" />
				<Setter Property="Template" TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbHorizontalTop}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Bottom" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbHorizontalBottom}" />
				<Setter Property="Template" TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbHorizontalBottom}" />
			</MultiTrigger>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="RangeSliderVertical" TargetType="hc:RangeSlider">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<TickBar x:Name="TopTick" Height="{Binding ActualHeight,ElementName=TrackBackground}" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4" />
			<TickBar x:Name="BottomTick" Height="{Binding ActualHeight,ElementName=TrackBackground}" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4" />
			<Border x:Name="TrackBackground" Background="{TemplateBinding Background}" Margin="0,9" Grid.Column="1" HorizontalAlignment="center" Width="2" />
			<hc:RangeTrack IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Orientation="{TemplateBinding Orientation}" ValueStart="{TemplateBinding ValueStart}" ValueEnd="{TemplateBinding ValueEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Margin="0,9" x:Name="PART_Track" Grid.Column="1">
				<hc:RangeTrack.DecreaseRepeatButton>
					<RepeatButton Interval="{TemplateBinding Interval}" Delay="{TemplateBinding Delay}" Command="{x:Static hc:RangeSlider.DecreaseLarge}" Style="{StaticResource SliderRepeatButtonVerticalStyle}" />
				</hc:RangeTrack.DecreaseRepeatButton>
				<hc:RangeTrack.CenterRepeatButton>
					<RepeatButton Interval="{TemplateBinding Interval}" Delay="{TemplateBinding Delay}" Command="{x:Static hc:RangeSlider.CenterLarge}" Background="{DynamicResource PrimaryBrush}" Style="{StaticResource SliderRepeatButtonVerticalStyle}" />
				</hc:RangeTrack.CenterRepeatButton>
				<hc:RangeTrack.IncreaseRepeatButton>
					<RepeatButton Interval="{TemplateBinding Interval}" Delay="{TemplateBinding Delay}" Command="{x:Static hc:RangeSlider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonVerticalStyle}" />
				</hc:RangeTrack.IncreaseRepeatButton>
				<hc:RangeTrack.ThumbStart>
					<hc:RangeThumb Content="{TemplateBinding ValueStart}" Margin="0,-9" x:Name="ThumbStart" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource RangeSliderThumb}" HorizontalAlignment="Center" Width="18" />
				</hc:RangeTrack.ThumbStart>
				<hc:RangeTrack.ThumbEnd>
					<hc:RangeThumb Content="{TemplateBinding ValueEnd}" Margin="0,-9" x:Name="ThumbEnd" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource RangeSliderThumb}" HorizontalAlignment="Center" Width="18" />
				</hc:RangeTrack.ThumbEnd>
			</hc:RangeTrack>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Left" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbVerticalLeft}" />
				<Setter Property="Template" TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbVerticalLeft}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="hc:TipElement.Placement" Value="Right" />
					<Condition Property="hc:TipElement.Visibility" Value="Visible" />
				</MultiTrigger.Conditions>
				<Setter Property="Template" TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbVerticalRight}" />
				<Setter Property="Template" TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbVerticalRight}" />
			</MultiTrigger>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="RangeSliderBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="hc:RangeSlider">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource DarkPrimaryBrush}" />
		<Setter Property="Template" Value="{StaticResource RangeSliderHorizontal}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{StaticResource RangeSliderVertical}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value=".4" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource RangeSliderBaseStyle}" TargetType="hc:RangeSlider" />
	<Style BasedOn="{StaticResource SliderBaseStyle}" TargetType="Slider" />
</ResourceDictionary>